//
// File generated by /opt/ocean/FairSoftInst/bin/rootcint at Thu Oct  8 06:26:59 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIinputdIFairShipRundIfielddIG__FieldDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__FieldDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void ShipFieldPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipFieldPar(void *p = 0);
   static void *newArray_ShipFieldPar(Long_t size, void *p);
   static void delete_ShipFieldPar(void *p);
   static void deleteArray_ShipFieldPar(void *p);
   static void destruct_ShipFieldPar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipFieldPar*)
   {
      ::ShipFieldPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipFieldPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipFieldPar", ::ShipFieldPar::Class_Version(), "/input/FairShip/field/ShipFieldPar.h", 12,
                  typeid(::ShipFieldPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipFieldPar::Dictionary, isa_proxy, 4,
                  sizeof(::ShipFieldPar) );
      instance.SetNew(&new_ShipFieldPar);
      instance.SetNewArray(&newArray_ShipFieldPar);
      instance.SetDelete(&delete_ShipFieldPar);
      instance.SetDeleteArray(&deleteArray_ShipFieldPar);
      instance.SetDestructor(&destruct_ShipFieldPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipFieldPar*)
   {
      return GenerateInitInstanceLocal((::ShipFieldPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipFieldPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipConstField_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipConstField(void *p = 0);
   static void *newArray_ShipConstField(Long_t size, void *p);
   static void delete_ShipConstField(void *p);
   static void deleteArray_ShipConstField(void *p);
   static void destruct_ShipConstField(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipConstField*)
   {
      ::ShipConstField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipConstField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipConstField", ::ShipConstField::Class_Version(), "/input/FairShip/field/ShipConstField.h", 27,
                  typeid(::ShipConstField), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipConstField::Dictionary, isa_proxy, 4,
                  sizeof(::ShipConstField) );
      instance.SetNew(&new_ShipConstField);
      instance.SetNewArray(&newArray_ShipConstField);
      instance.SetDelete(&delete_ShipConstField);
      instance.SetDeleteArray(&deleteArray_ShipConstField);
      instance.SetDestructor(&destruct_ShipConstField);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipConstField*)
   {
      return GenerateInitInstanceLocal((::ShipConstField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipConstField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipFieldCreator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipFieldCreator(void *p = 0);
   static void *newArray_ShipFieldCreator(Long_t size, void *p);
   static void delete_ShipFieldCreator(void *p);
   static void deleteArray_ShipFieldCreator(void *p);
   static void destruct_ShipFieldCreator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipFieldCreator*)
   {
      ::ShipFieldCreator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipFieldCreator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipFieldCreator", ::ShipFieldCreator::Class_Version(), "/input/FairShip/field/ShipFieldCreator.h", 17,
                  typeid(::ShipFieldCreator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipFieldCreator::Dictionary, isa_proxy, 4,
                  sizeof(::ShipFieldCreator) );
      instance.SetNew(&new_ShipFieldCreator);
      instance.SetNewArray(&newArray_ShipFieldCreator);
      instance.SetDelete(&delete_ShipFieldCreator);
      instance.SetDeleteArray(&deleteArray_ShipFieldCreator);
      instance.SetDestructor(&destruct_ShipFieldCreator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipFieldCreator*)
   {
      return GenerateInitInstanceLocal((::ShipFieldCreator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipFieldCreator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipBellField_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipBellField(void *p = 0);
   static void *newArray_ShipBellField(Long_t size, void *p);
   static void delete_ShipBellField(void *p);
   static void deleteArray_ShipBellField(void *p);
   static void destruct_ShipBellField(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipBellField*)
   {
      ::ShipBellField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipBellField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipBellField", ::ShipBellField::Class_Version(), "/input/FairShip/field/ShipBellField.h", 28,
                  typeid(::ShipBellField), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipBellField::Dictionary, isa_proxy, 4,
                  sizeof(::ShipBellField) );
      instance.SetNew(&new_ShipBellField);
      instance.SetNewArray(&newArray_ShipBellField);
      instance.SetDelete(&delete_ShipBellField);
      instance.SetDeleteArray(&deleteArray_ShipBellField);
      instance.SetDestructor(&destruct_ShipBellField);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipBellField*)
   {
      return GenerateInitInstanceLocal((::ShipBellField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipBellField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr ShipFieldPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipFieldPar::Class_Name()
{
   return "ShipFieldPar";
}

//______________________________________________________________________________
const char *ShipFieldPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipFieldPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipFieldPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipFieldPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipConstField::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipConstField::Class_Name()
{
   return "ShipConstField";
}

//______________________________________________________________________________
const char *ShipConstField::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipConstField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipConstField::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipConstField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipConstField::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipConstField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipConstField::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipConstField*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipFieldCreator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipFieldCreator::Class_Name()
{
   return "ShipFieldCreator";
}

//______________________________________________________________________________
const char *ShipFieldCreator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldCreator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipFieldCreator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldCreator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipFieldCreator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldCreator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipFieldCreator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipFieldCreator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipBellField::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipBellField::Class_Name()
{
   return "ShipBellField";
}

//______________________________________________________________________________
const char *ShipBellField::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipBellField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipBellField::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipBellField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipBellField::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipBellField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipBellField::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipBellField*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void ShipConstField::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipConstField.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipConstField::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipConstField::Class(),this);
   }
}

//______________________________________________________________________________
void ShipConstField::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipConstField.
      TClass *R__cl = ::ShipConstField::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmin", &fZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmax", &fZmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBx", &fBx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBy", &fBy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBz", &fBz);
      FairField::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipConstField(void *p) {
      return  p ? new(p) ::ShipConstField : new ::ShipConstField;
   }
   static void *newArray_ShipConstField(Long_t nElements, void *p) {
      return p ? new(p) ::ShipConstField[nElements] : new ::ShipConstField[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipConstField(void *p) {
      delete ((::ShipConstField*)p);
   }
   static void deleteArray_ShipConstField(void *p) {
      delete [] ((::ShipConstField*)p);
   }
   static void destruct_ShipConstField(void *p) {
      typedef ::ShipConstField current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipConstField

//______________________________________________________________________________
void ShipFieldCreator::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipFieldCreator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipFieldCreator::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipFieldCreator::Class(),this);
   }
}

//______________________________________________________________________________
void ShipFieldCreator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipFieldCreator.
      TClass *R__cl = ::ShipFieldCreator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFieldPar", &fFieldPar);
      FairFieldFactory::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipFieldCreator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ShipFieldCreator : new ::ShipFieldCreator;
   }
   static void *newArray_ShipFieldCreator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ShipFieldCreator[nElements] : new ::ShipFieldCreator[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipFieldCreator(void *p) {
      delete ((::ShipFieldCreator*)p);
   }
   static void deleteArray_ShipFieldCreator(void *p) {
      delete [] ((::ShipFieldCreator*)p);
   }
   static void destruct_ShipFieldCreator(void *p) {
      typedef ::ShipFieldCreator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipFieldCreator

//______________________________________________________________________________
void ShipFieldPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipFieldPar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipFieldPar::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipFieldPar::Class(),this);
   }
}

//______________________________________________________________________________
void ShipFieldPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipFieldPar.
      TClass *R__cl = ::ShipFieldPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmin", &fZmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmax", &fZmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBx", &fBx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBy", &fBy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBz", &fBz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMapName", &fMapName);
      R__insp.InspectMember(fMapName, "fMapName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosX", &fPosX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosY", &fPosY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosZ", &fPosZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScale", &fScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeak", &fPeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMiddle", &fMiddle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBtube", &fBtube);
      FairParGenericSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipFieldPar(void *p) {
      return  p ? new(p) ::ShipFieldPar : new ::ShipFieldPar;
   }
   static void *newArray_ShipFieldPar(Long_t nElements, void *p) {
      return p ? new(p) ::ShipFieldPar[nElements] : new ::ShipFieldPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipFieldPar(void *p) {
      delete ((::ShipFieldPar*)p);
   }
   static void deleteArray_ShipFieldPar(void *p) {
      delete [] ((::ShipFieldPar*)p);
   }
   static void destruct_ShipFieldPar(void *p) {
      typedef ::ShipFieldPar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipFieldPar

//______________________________________________________________________________
void ShipBellField::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipBellField.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipBellField::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipBellField::Class(),this);
   }
}

//______________________________________________________________________________
void ShipBellField::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipBellField.
      TClass *R__cl = ::ShipBellField::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeak", &fPeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMiddle", &fMiddle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBtube", &fBtube);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOrient", &fOrient);
      FairField::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipBellField(void *p) {
      return  p ? new(p) ::ShipBellField : new ::ShipBellField;
   }
   static void *newArray_ShipBellField(Long_t nElements, void *p) {
      return p ? new(p) ::ShipBellField[nElements] : new ::ShipBellField[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipBellField(void *p) {
      delete ((::ShipBellField*)p);
   }
   static void deleteArray_ShipBellField(void *p) {
      delete [] ((::ShipBellField*)p);
   }
   static void destruct_ShipBellField(void *p) {
      typedef ::ShipBellField current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipBellField

/********************************************************
* /input/FairShipRun/field/G__FieldDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__FieldDict();

extern "C" void G__set_cpp_environmentG__FieldDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("ShipConstField.h");
  G__add_compiledheader("ShipFieldCreator.h");
  G__add_compiledheader("ShipFieldPar.h");
  G__add_compiledheader("ShipBellField.h");
  G__cpp_reset_tagtableG__FieldDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__FieldDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ShipFieldPar */
static int G__G__FieldDict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipFieldPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ShipFieldPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) ShipFieldPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipFieldPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipFieldPar[n];
     } else {
       p = new((void*) gvp) ShipFieldPar[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipFieldPar;
     } else {
       p = new((void*) gvp) ShipFieldPar;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipFieldPar*) G__getstructoffset())->SetParameters((FairField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ShipFieldPar*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetZmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetZmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetBx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetBy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetBz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipFieldPar*) G__getstructoffset())->MapName(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetPositionX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetPositionY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetPositionZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetPeak());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetMiddle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipFieldPar*) G__getstructoffset())->GetBtube());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipFieldPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipFieldPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipFieldPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipFieldPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipFieldPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipFieldPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipFieldPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipFieldPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_190_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipFieldPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipFieldPar G__TShipFieldPar;
static int G__G__FieldDict_190_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipFieldPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipFieldPar*) (soff+(sizeof(ShipFieldPar)*i)))->~G__TShipFieldPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipFieldPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipFieldPar*) (soff))->~G__TShipFieldPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipConstField */
static int G__G__FieldDict_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipConstField* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipConstField[n];
     } else {
       p = new((void*) gvp) ShipConstField[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipConstField;
     } else {
       p = new((void*) gvp) ShipConstField;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipConstField* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ShipConstField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
   } else {
     p = new((void*) gvp) ShipConstField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipConstField* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ShipConstField((ShipFieldPar*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) ShipConstField((ShipFieldPar*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipConstField*) G__getstructoffset())->SetFieldRegion((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipConstField*) G__getstructoffset())->SetField((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetZmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetZmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetBx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetBy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipConstField*) G__getstructoffset())->GetBz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipConstField*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipConstField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipConstField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipConstField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipConstField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipConstField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipConstField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipConstField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipConstField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_191_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipConstField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipConstField G__TShipConstField;
static int G__G__FieldDict_191_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipConstField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipConstField*) (soff+(sizeof(ShipConstField)*i)))->~G__TShipConstField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipConstField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipConstField*) (soff))->~G__TShipConstField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FieldDict_191_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipConstField* dest = (ShipConstField*) G__getstructoffset();
   *dest = *(ShipConstField*) libp->para[0].ref;
   const ShipConstField& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipFieldCreator */
static int G__G__FieldDict_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipFieldCreator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipFieldCreator[n];
     } else {
       p = new((void*) gvp) ShipFieldCreator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipFieldCreator;
     } else {
       p = new((void*) gvp) ShipFieldCreator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipFieldCreator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipFieldCreator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipFieldCreator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipFieldCreator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipFieldCreator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipFieldCreator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipFieldCreator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipFieldCreator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipFieldCreator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipFieldCreator G__TShipFieldCreator;
static int G__G__FieldDict_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipFieldCreator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipFieldCreator*) (soff+(sizeof(ShipFieldCreator)*i)))->~G__TShipFieldCreator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipFieldCreator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipFieldCreator*) (soff))->~G__TShipFieldCreator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipBellField */
static int G__G__FieldDict_220_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipBellField* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipBellField[n];
     } else {
       p = new((void*) gvp) ShipBellField[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipBellField;
     } else {
       p = new((void*) gvp) ShipBellField;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipBellField* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipBellField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) ShipBellField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipBellField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) ShipBellField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipBellField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) ShipBellField(
(const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipBellField* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ShipBellField((ShipFieldPar*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) ShipBellField((ShipFieldPar*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipBellField*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipBellField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipBellField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipBellField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipBellField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipBellField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipBellField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipBellField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipBellField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__FieldDict_220_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipBellField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipBellField G__TShipBellField;
static int G__G__FieldDict_220_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipBellField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipBellField*) (soff+(sizeof(ShipBellField)*i)))->~G__TShipBellField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipBellField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipBellField*) (soff))->~G__TShipBellField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__FieldDict_220_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipBellField* dest = (ShipBellField*) G__getstructoffset();
   *dest = *(ShipBellField*) libp->para[0].ref;
   const ShipBellField& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ShipFieldPar */

/* ShipConstField */

/* ShipFieldCreator */

/* ShipBellField */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__FieldDict {
 public:
  G__Sizep2memfuncG__FieldDict(): p(&G__Sizep2memfuncG__FieldDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__FieldDict::*p)();
};

size_t G__get_sizep2memfuncG__FieldDict()
{
  G__Sizep2memfuncG__FieldDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__FieldDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar))) {
     ShipFieldPar *G__Lderived;
     G__Lderived=(ShipFieldPar*)0x1000;
     {
       FairParGenericSet *G__Lpbase=(FairParGenericSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar),G__get_linked_tagnum(&G__G__FieldDictLN_FairParGenericSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairParSet *G__Lpbase=(FairParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar),G__get_linked_tagnum(&G__G__FieldDictLN_FairParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar),G__get_linked_tagnum(&G__G__FieldDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar),G__get_linked_tagnum(&G__G__FieldDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField))) {
     ShipConstField *G__Lderived;
     G__Lderived=(ShipConstField*)0x1000;
     {
       FairField *G__Lpbase=(FairField*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField),G__get_linked_tagnum(&G__G__FieldDictLN_FairField),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TVirtualMagField *G__Lpbase=(TVirtualMagField*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField),G__get_linked_tagnum(&G__G__FieldDictLN_TVirtualMagField),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField),G__get_linked_tagnum(&G__G__FieldDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField),G__get_linked_tagnum(&G__G__FieldDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator))) {
     ShipFieldCreator *G__Lderived;
     G__Lderived=(ShipFieldCreator*)0x1000;
     {
       FairFieldFactory *G__Lpbase=(FairFieldFactory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator),G__get_linked_tagnum(&G__G__FieldDictLN_FairFieldFactory),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FieldDictLN_FairDbObjTableMap))) {
     FairDbObjTableMap *G__Lderived;
     G__Lderived=(FairDbObjTableMap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_FairDbObjTableMap),G__get_linked_tagnum(&G__G__FieldDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FieldDictLN_FairParSet))) {
     FairParSet *G__Lderived;
     G__Lderived=(FairParSet*)0x1000;
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_FairParSet),G__get_linked_tagnum(&G__G__FieldDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_FairParSet),G__get_linked_tagnum(&G__G__FieldDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FieldDictLN_FairParGenericSet))) {
     FairParGenericSet *G__Lderived;
     G__Lderived=(FairParGenericSet*)0x1000;
     {
       FairParSet *G__Lpbase=(FairParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_FairParGenericSet),G__get_linked_tagnum(&G__G__FieldDictLN_FairParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairDbObjTableMap *G__Lpbase=(FairDbObjTableMap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_FairParGenericSet),G__get_linked_tagnum(&G__G__FieldDictLN_FairDbObjTableMap),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_FairParGenericSet),G__get_linked_tagnum(&G__G__FieldDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField))) {
     ShipBellField *G__Lderived;
     G__Lderived=(ShipBellField*)0x1000;
     {
       FairField *G__Lpbase=(FairField*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField),G__get_linked_tagnum(&G__G__FieldDictLN_FairField),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TVirtualMagField *G__Lpbase=(TVirtualMagField*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField),G__get_linked_tagnum(&G__G__FieldDictLN_TVirtualMagField),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField),G__get_linked_tagnum(&G__G__FieldDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField),G__get_linked_tagnum(&G__G__FieldDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__FieldDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__FieldDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FieldDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FieldDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FieldDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FieldDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__FieldDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FieldDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FieldDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FieldDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FieldDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ShipFieldPar */
static void G__setup_memvarShipFieldPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar));
   { ShipFieldPar *p; p=(ShipFieldPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBz=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__FieldDictLN_TString),-1,-1,4,"fMapName=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPosX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPosY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPosZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScale=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMiddle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBtube=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FieldDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipConstField */
static void G__setup_memvarShipConstField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField));
   { ShipConstField *p; p=(ShipConstField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FieldDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipFieldCreator */
static void G__setup_memvarShipFieldCreator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator));
   { ShipFieldCreator *p; p=(ShipFieldCreator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FieldDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar),-1,-1,2,"fFieldPar=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipBellField */
static void G__setup_memvarShipBellField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField));
   { ShipBellField *p; p=(ShipBellField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPeak=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMiddle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBtube=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOrient=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__FieldDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__FieldDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncShipFieldPar(void) {
   /* ShipFieldPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar));
   G__memfunc_setup("ShipFieldPar",1179,G__G__FieldDict_190_0_1, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipFieldPar",1179,G__G__FieldDict_190_0_2, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - list", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - list", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameters",1344,G__G__FieldDict_190_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FairField' - 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__FieldDict_190_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__G__FieldDict_190_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__G__FieldDict_190_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmin",701,G__G__FieldDict_190_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmax",703,G__G__FieldDict_190_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmin",702,G__G__FieldDict_190_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmax",704,G__G__FieldDict_190_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBx",474,G__G__FieldDict_190_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBy",475,G__G__FieldDict_190_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBz",476,G__G__FieldDict_190_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapName",671,G__G__FieldDict_190_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionX",1229,G__G__FieldDict_190_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionY",1230,G__G__FieldDict_190_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPositionZ",1231,G__G__FieldDict_190_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScale",776,G__G__FieldDict_190_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeak",673,G__G__FieldDict_190_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMiddle",879,G__G__FieldDict_190_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBtube",786,G__G__FieldDict_190_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipFieldPar",1179,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar), -1, 0, 1, 1, 4, 0, "u 'ShipFieldPar' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldPar), -1, 1, 1, 1, 4, 0, "u 'ShipFieldPar' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__FieldDict_190_0_26, 85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipFieldPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FieldDict_190_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipFieldPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FieldDict_190_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipFieldPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FieldDict_190_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipFieldPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FieldDict_190_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FieldDict_190_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipFieldPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FieldDict_190_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipFieldPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FieldDict_190_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipFieldPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FieldDict_190_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipFieldPar::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ShipFieldPar", 1305, G__G__FieldDict_190_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipConstField(void) {
   /* ShipConstField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField));
   G__memfunc_setup("ShipConstField",1407,G__G__FieldDict_191_0_1, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipConstField",1407,G__G__FieldDict_191_0_2, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField), -1, 0, 10, 1, 1, 0, 
"C - - 10 - name d - 'Double_t' 0 - xMin "
"d - 'Double_t' 0 - xMax d - 'Double_t' 0 - yMin "
"d - 'Double_t' 0 - yMax d - 'Double_t' 0 - zMin "
"d - 'Double_t' 0 - zMax d - 'Double_t' 0 - bX "
"d - 'Double_t' 0 - bY d - 'Double_t' 0 - bZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipConstField",1407,G__G__FieldDict_191_0_3, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField), -1, 0, 1, 1, 1, 0, "U 'ShipFieldPar' - 0 - fieldPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFieldRegion",1396,G__G__FieldDict_191_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - xMin d - 'Double_t' 0 - xMax "
"d - 'Double_t' 0 - yMin d - 'Double_t' 0 - yMax "
"d - 'Double_t' 0 - zMin d - 'Double_t' 0 - zMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetField",784,G__G__FieldDict_191_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - bX d - 'Double_t' 0 - bY "
"d - 'Double_t' 0 - bZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBx",474,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBy",475,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBz",476,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXmin",700,G__G__FieldDict_191_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__G__FieldDict_191_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmin",701,G__G__FieldDict_191_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmax",703,G__G__FieldDict_191_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmin",702,G__G__FieldDict_191_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmax",704,G__G__FieldDict_191_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBx",474,G__G__FieldDict_191_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBy",475,G__G__FieldDict_191_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBz",476,G__G__FieldDict_191_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__FieldDict_191_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__FieldDict_191_0_19, 85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipConstField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FieldDict_191_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipConstField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FieldDict_191_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipConstField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FieldDict_191_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipConstField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FieldDict_191_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FieldDict_191_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipConstField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FieldDict_191_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipConstField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FieldDict_191_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipConstField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FieldDict_191_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipConstField::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ShipConstField", 1533, G__G__FieldDict_191_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FieldDict_191_0_32, (int) ('u'), G__get_linked_tagnum(&G__G__FieldDictLN_ShipConstField), -1, 1, 1, 1, 1, 0, "u 'ShipConstField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipFieldCreator(void) {
   /* ShipFieldCreator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator));
   G__memfunc_setup("ShipFieldCreator",1608,G__G__FieldDict_193_0_1, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createFairField",1498,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FieldDictLN_FairField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParm",700,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__FieldDict_193_0_4, 85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipFieldCreator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FieldDict_193_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipFieldCreator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FieldDict_193_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipFieldCreator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FieldDict_193_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipFieldCreator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FieldDict_193_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FieldDict_193_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipFieldCreator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FieldDict_193_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipFieldCreator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FieldDict_193_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipFieldCreator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FieldDict_193_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipFieldCreator::DeclFileLine) ), 0);
   G__memfunc_setup("ShipFieldCreator",1608,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator), -1, 0, 1, 1, 4, 0, "u 'ShipFieldCreator' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__FieldDictLN_ShipFieldCreator), -1, 1, 1, 1, 4, 0, "u 'ShipFieldCreator' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipFieldCreator", 1734, G__G__FieldDict_193_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipBellField(void) {
   /* ShipBellField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField));
   G__memfunc_setup("ShipBellField",1271,G__G__FieldDict_220_0_1, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipBellField",1271,G__G__FieldDict_220_0_2, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name d - 'Double_t' 0 - Bpeak "
"d - 'Double_t' 0 - Zmiddle i - 'Int_t' 0 '1' fOrient "
"d - 'Double_t' 0 '500.' Btube", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipBellField",1271,G__G__FieldDict_220_0_3, 105, G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField), -1, 0, 1, 1, 1, 0, "U 'ShipFieldPar' - 0 - fieldPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBx",474,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBy",475,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBz",476,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__FieldDict_220_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__FieldDict_220_0_8, 85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipBellField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__FieldDict_220_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipBellField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__FieldDict_220_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipBellField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__FieldDict_220_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipBellField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__FieldDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__FieldDict_220_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__FieldDict_220_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipBellField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__FieldDict_220_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipBellField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__FieldDict_220_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipBellField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__FieldDict_220_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipBellField::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ShipBellField", 1397, G__G__FieldDict_220_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__FieldDict_220_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__FieldDictLN_ShipBellField), -1, 1, 1, 1, 1, 0, "u 'ShipBellField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__FieldDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__FieldDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__FieldDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__FieldDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_TVirtualMagField = { "TVirtualMagField" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_FairField = { "FairField" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_ShipFieldPar = { "ShipFieldPar" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_ShipConstField = { "ShipConstField" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_FairFieldFactory = { "FairFieldFactory" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_ShipFieldCreator = { "ShipFieldCreator" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_FairDbObjTableMap = { "FairDbObjTableMap" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_FairParSet = { "FairParSet" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_FairParamList = { "FairParamList" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_FairParGenericSet = { "FairParGenericSet" , 99 , -1 };
G__linked_taginfo G__G__FieldDictLN_ShipBellField = { "ShipBellField" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__FieldDict() {
  G__G__FieldDictLN_TClass.tagnum = -1 ;
  G__G__FieldDictLN_TBuffer.tagnum = -1 ;
  G__G__FieldDictLN_TMemberInspector.tagnum = -1 ;
  G__G__FieldDictLN_TObject.tagnum = -1 ;
  G__G__FieldDictLN_TNamed.tagnum = -1 ;
  G__G__FieldDictLN_TString.tagnum = -1 ;
  G__G__FieldDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__FieldDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FieldDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__FieldDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FieldDictLN_TVirtualMagField.tagnum = -1 ;
  G__G__FieldDictLN_FairField.tagnum = -1 ;
  G__G__FieldDictLN_ShipFieldPar.tagnum = -1 ;
  G__G__FieldDictLN_ShipConstField.tagnum = -1 ;
  G__G__FieldDictLN_FairFieldFactory.tagnum = -1 ;
  G__G__FieldDictLN_ShipFieldCreator.tagnum = -1 ;
  G__G__FieldDictLN_FairDbObjTableMap.tagnum = -1 ;
  G__G__FieldDictLN_FairParSet.tagnum = -1 ;
  G__G__FieldDictLN_FairParamList.tagnum = -1 ;
  G__G__FieldDictLN_FairParGenericSet.tagnum = -1 ;
  G__G__FieldDictLN_ShipBellField.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__FieldDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_TVirtualMagField);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_FairField);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FieldDictLN_ShipFieldPar),sizeof(ShipFieldPar),-1,327424,(char*)NULL,G__setup_memvarShipFieldPar,G__setup_memfuncShipFieldPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FieldDictLN_ShipConstField),sizeof(ShipConstField),-1,324864,(char*)NULL,G__setup_memvarShipConstField,G__setup_memfuncShipConstField);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_FairFieldFactory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FieldDictLN_ShipFieldCreator),sizeof(ShipFieldCreator),-1,265984,(char*)NULL,G__setup_memvarShipFieldCreator,G__setup_memfuncShipFieldCreator);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_FairDbObjTableMap);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_FairParSet);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_FairParamList);
   G__get_linked_tagnum_fwd(&G__G__FieldDictLN_FairParGenericSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__FieldDictLN_ShipBellField),sizeof(ShipBellField),-1,324864,(char*)NULL,G__setup_memvarShipBellField,G__setup_memfuncShipBellField);
}
extern "C" void G__cpp_setupG__FieldDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__FieldDict()");
  G__set_cpp_environmentG__FieldDict();
  G__cpp_setup_tagtableG__FieldDict();

  G__cpp_setup_inheritanceG__FieldDict();

  G__cpp_setup_typetableG__FieldDict();

  G__cpp_setup_memvarG__FieldDict();

  G__cpp_setup_memfuncG__FieldDict();
  G__cpp_setup_globalG__FieldDict();
  G__cpp_setup_funcG__FieldDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__FieldDict();
  return;
}
class G__cpp_setup_initG__FieldDict {
  public:
    G__cpp_setup_initG__FieldDict() { G__add_setup_func("G__FieldDict",(G__incsetup)(&G__cpp_setupG__FieldDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__FieldDict() { G__remove_setup_func("G__FieldDict"); }
};
G__cpp_setup_initG__FieldDict G__cpp_setup_initializerG__FieldDict;

