//
// File generated by /opt/ocean/FairSoftInst/bin/rootcint at Thu Oct  8 06:24:34 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIinputdIFairShipRundIshipdatadIG__ShipDataDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__ShipDataDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void ShipStack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipStack(void *p = 0);
   static void *newArray_ShipStack(Long_t size, void *p);
   static void delete_ShipStack(void *p);
   static void deleteArray_ShipStack(void *p);
   static void destruct_ShipStack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipStack*)
   {
      ::ShipStack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipStack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipStack", ::ShipStack::Class_Version(), "/input/FairShip/shipdata/ShipStack.h", 47,
                  typeid(::ShipStack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipStack::Dictionary, isa_proxy, 4,
                  sizeof(::ShipStack) );
      instance.SetNew(&new_ShipStack);
      instance.SetNewArray(&newArray_ShipStack);
      instance.SetDelete(&delete_ShipStack);
      instance.SetDeleteArray(&deleteArray_ShipStack);
      instance.SetDestructor(&destruct_ShipStack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipStack*)
   {
      return GenerateInitInstanceLocal((::ShipStack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipStack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipMCTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipMCTrack(void *p = 0);
   static void *newArray_ShipMCTrack(Long_t size, void *p);
   static void delete_ShipMCTrack(void *p);
   static void deleteArray_ShipMCTrack(void *p);
   static void destruct_ShipMCTrack(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipMCTrack*)
   {
      ::ShipMCTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipMCTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipMCTrack", ::ShipMCTrack::Class_Version(), "/input/FairShip/shipdata/ShipMCTrack.h", 26,
                  typeid(::ShipMCTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipMCTrack::Dictionary, isa_proxy, 4,
                  sizeof(::ShipMCTrack) );
      instance.SetNew(&new_ShipMCTrack);
      instance.SetNewArray(&newArray_ShipMCTrack);
      instance.SetDelete(&delete_ShipMCTrack);
      instance.SetDeleteArray(&deleteArray_ShipMCTrack);
      instance.SetDestructor(&destruct_ShipMCTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipMCTrack*)
   {
      return GenerateInitInstanceLocal((::ShipMCTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipMCTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr ShipStack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipStack::Class_Name()
{
   return "ShipStack";
}

//______________________________________________________________________________
const char *ShipStack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipStack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipStack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipStack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipStack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipStack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipStack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipStack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipMCTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipMCTrack::Class_Name()
{
   return "ShipMCTrack";
}

//______________________________________________________________________________
const char *ShipMCTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMCTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipMCTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMCTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipMCTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMCTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipMCTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMCTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void ShipStack::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipStack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipStack::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipStack::Class(),this);
   }
}

//______________________________________________________________________________
void ShipStack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipStack.
      TClass *R__cl = ::ShipStack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLogger", &fLogger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStack", (void*)&fStack);
      R__insp.InspectMember("stack<TParticle*>", (void*)&fStack, "fStack.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticles", &fParticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTracks", &fTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreMap", (void*)&fStoreMap);
      R__insp.InspectMember("map<Int_t,Bool_t>", (void*)&fStoreMap, "fStoreMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreIter", (void*)&fStoreIter);
      R__insp.InspectMember("map<int,bool,less<int>,allocator<pair<const int,bool> > >::iterator", (void*)&fStoreIter, "fStoreIter.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndexMap", (void*)&fIndexMap);
      R__insp.InspectMember("map<Int_t,Int_t>", (void*)&fIndexMap, "fIndexMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndexIter", (void*)&fIndexIter);
      R__insp.InspectMember("map<int,int,less<int>,allocator<pair<const int,int> > >::iterator", (void*)&fIndexIter, "fIndexIter.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointsMap", (void*)&fPointsMap);
      R__insp.InspectMember("map<std::pair<Int_t,Int_t>,Int_t>", (void*)&fPointsMap, "fPointsMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentTrack", &fCurrentTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPrimaries", &fNPrimaries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParticles", &fNParticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTracks", &fNTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreSecondaries", &fStoreSecondaries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinPoints", &fMinPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergyCut", &fEnergyCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreMothers", &fStoreMothers);
      FairGenericStack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipStack(void *p) {
      return  p ? new(p) ::ShipStack : new ::ShipStack;
   }
   static void *newArray_ShipStack(Long_t nElements, void *p) {
      return p ? new(p) ::ShipStack[nElements] : new ::ShipStack[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipStack(void *p) {
      delete ((::ShipStack*)p);
   }
   static void deleteArray_ShipStack(void *p) {
      delete [] ((::ShipStack*)p);
   }
   static void destruct_ShipStack(void *p) {
      typedef ::ShipStack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipStack

//______________________________________________________________________________
void ShipMCTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipMCTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipMCTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipMCTrack::Class(),this);
   }
}

//______________________________________________________________________________
void ShipMCTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipMCTrack.
      TClass *R__cl = ::ShipMCTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdgCode", &fPdgCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMotherId", &fMotherId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPx", &fPx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPy", &fPy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPz", &fPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartX", &fStartX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartY", &fStartY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartZ", &fStartZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartT", &fStartT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fW", &fW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNPoints", &fNPoints);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipMCTrack(void *p) {
      return  p ? new(p) ::ShipMCTrack : new ::ShipMCTrack;
   }
   static void *newArray_ShipMCTrack(Long_t nElements, void *p) {
      return p ? new(p) ::ShipMCTrack[nElements] : new ::ShipMCTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipMCTrack(void *p) {
      delete ((::ShipMCTrack*)p);
   }
   static void deleteArray_ShipMCTrack(void *p) {
      delete [] ((::ShipMCTrack*)p);
   }
   static void destruct_ShipMCTrack(void *p) {
      typedef ::ShipMCTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipMCTrack

/********************************************************
* /input/FairShipRun/shipdata/G__ShipDataDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__ShipDataDict();

extern "C" void G__set_cpp_environmentG__ShipDataDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("ShipStack.h");
  G__add_compiledheader("ShipMCTrack.h");
  G__cpp_reset_tagtableG__ShipDataDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__ShipDataDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ShipStack */
static int G__G__ShipDataDict_463_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipStack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipStack((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ShipStack((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ShipStack[n];
       } else {
         p = new((void*) gvp) ShipStack[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ShipStack;
       } else {
         p = new((void*) gvp) ShipStack;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const ShipStack*) G__getstructoffset())->Print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const ShipStack*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ShipStack*) G__getstructoffset())->StoreSecondaries((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ShipStack*) G__getstructoffset())->StoreSecondaries();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipStack*) G__getstructoffset())->SetMinPoints((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipStack*) G__getstructoffset())->SetEnergyCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ShipStack*) G__getstructoffset())->StoreMothers((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ShipStack*) G__getstructoffset())->StoreMothers();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipStack*) G__getstructoffset())->AddPoint((DetectorId) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipStack*) G__getstructoffset())->AddPoint((DetectorId) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipStack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipStack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipStack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipStack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipStack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipStack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipStack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipStack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_463_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipStack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipStack G__TShipStack;
static int G__G__ShipDataDict_463_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipStack*) (soff+(sizeof(ShipStack)*i)))->~G__TShipStack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipStack*) (soff))->~G__TShipStack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipMCTrack */
static int G__G__ShipDataDict_527_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMCTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMCTrack[n];
     } else {
       p = new((void*) gvp) ShipMCTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMCTrack;
     } else {
       p = new((void*) gvp) ShipMCTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMCTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 11
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ShipMCTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]));
   } else {
     p = new((void*) gvp) ShipMCTrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMCTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ShipMCTrack(*(ShipMCTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ShipMCTrack(*(ShipMCTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMCTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ShipMCTrack((TParticle*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) ShipMCTrack((TParticle*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const ShipMCTrack*) G__getstructoffset())->Print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const ShipMCTrack*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ShipMCTrack*) G__getstructoffset())->GetPdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ShipMCTrack*) G__getstructoffset())->GetMotherId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetStartX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetStartY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetStartZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetStartT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetRapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ShipMCTrack*) G__getstructoffset())->GetWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMCTrack*) G__getstructoffset())->GetMomentum(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMCTrack*) G__getstructoffset())->Get4Momentum(*(TLorentzVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMCTrack*) G__getstructoffset())->GetStartVertex(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ShipMCTrack*) G__getstructoffset())->GetNPoints((DetectorId) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMCTrack*) G__getstructoffset())->SetMotherId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMCTrack*) G__getstructoffset())->SetNPoints((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipMCTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMCTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipMCTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipMCTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMCTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMCTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipMCTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMCTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ShipDataDict_527_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipMCTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipMCTrack G__TShipMCTrack;
static int G__G__ShipDataDict_527_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipMCTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipMCTrack*) (soff+(sizeof(ShipMCTrack)*i)))->~G__TShipMCTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipMCTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipMCTrack*) (soff))->~G__TShipMCTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ShipDataDict_527_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMCTrack* dest = (ShipMCTrack*) G__getstructoffset();
   *dest = *(ShipMCTrack*) libp->para[0].ref;
   const ShipMCTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ShipStack */

/* ShipMCTrack */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__ShipDataDict {
 public:
  G__Sizep2memfuncG__ShipDataDict(): p(&G__Sizep2memfuncG__ShipDataDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__ShipDataDict::*p)();
};

size_t G__get_sizep2memfuncG__ShipDataDict()
{
  G__Sizep2memfuncG__ShipDataDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__ShipDataDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack))) {
     ShipStack *G__Lderived;
     G__Lderived=(ShipStack*)0x1000;
     {
       FairGenericStack *G__Lpbase=(FairGenericStack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack),G__get_linked_tagnum(&G__G__ShipDataDictLN_FairGenericStack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TVirtualMCStack *G__Lpbase=(TVirtualMCStack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack),G__get_linked_tagnum(&G__G__ShipDataDictLN_TVirtualMCStack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack),G__get_linked_tagnum(&G__G__ShipDataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack))) {
     ShipMCTrack *G__Lderived;
     G__Lderived=(ShipMCTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack),G__get_linked_tagnum(&G__G__ShipDataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__ShipDataDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ShipDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ShipDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ShipDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ShipDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<TParticle*>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_dequelETParticlemUcOallocatorlETParticlemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("stack<TParticle*>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_stacklETParticlemUcOdequelETParticlemUcOallocatorlETParticlemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Bool_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,bool>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,bool,less<int> >",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Int_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Int_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_pairlEintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::pair<Int_t,Int_t>,Int_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<Int_t,Int_t>,Int_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<int,int>,int>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<int,int>,int,less<pair<int,int> > >",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__ShipDataDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ShipStack */
static void G__setup_memvarShipStack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack));
   { ShipStack *p; p=(ShipStack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_FairLogger),-1,-1,4,"fLogger=",0,"!   don't make it persistent, magic ROOT command");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_stacklETParticlemUcOdequelETParticlemUcOallocatorlETParticlemUgRsPgRsPgR),G__defined_typename("stack<TParticle*>"),-1,4,"fStack=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_TClonesArray),-1,-1,4,"fParticles=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_TClonesArray),-1,-1,4,"fTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgR),G__defined_typename("map<Int_t,Bool_t>"),-1,4,"fStoreMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgRcLcLiterator),-1,-1,4,"fStoreIter=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,4,"fIndexMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator),-1,-1,4,"fIndexIter=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR),G__defined_typename("map<std::pair<Int_t,Int_t>,Int_t>"),-1,4,"fPointsMap=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentTrack=",0,"! Index of current track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPrimaries=",0,"! Number of primary particles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNParticles=",0,"! Number of entries in fParticles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTracks=",0,"! Number of entries in fTracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIndex=",0,"! Used for merging");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStoreSecondaries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMinPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fEnergyCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStoreMothers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipMCTrack */
static void G__setup_memvarShipMCTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack));
   { ShipMCTrack *p; p=(ShipMCTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPdgCode=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMotherId=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fPx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fPy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fPz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fStartX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fStartY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fStartZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fStartT=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fW=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ShipDataDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__ShipDataDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncShipStack(void) {
   /* ShipStack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack));
   G__memfunc_setup("ShipStack",906,G__G__ShipDataDict_463_0_1, 105, G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '100' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PushTrack",917,(G__InterfaceMethod) NULL,121, -1, -1, 0, 18, 1, 1, 0, 
"i - 'Int_t' 0 - toBeDone i - 'Int_t' 0 - parentID "
"i - 'Int_t' 0 - pdgCode d - 'Double_t' 0 - px "
"d - 'Double_t' 0 - py d - 'Double_t' 0 - pz "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - vx "
"d - 'Double_t' 0 - vy d - 'Double_t' 0 - vz "
"d - 'Double_t' 0 - time d - 'Double_t' 0 - polx "
"d - 'Double_t' 0 - poly d - 'Double_t' 0 - polz "
"i 'TMCProcess' - 0 - proc i - 'Int_t' 1 - ntr "
"d - 'Double_t' 0 - weight i - 'Int_t' 0 - is", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PushTrack",917,(G__InterfaceMethod) NULL,121, -1, -1, 0, 19, 1, 1, 0, 
"i - 'Int_t' 0 - toBeDone i - 'Int_t' 0 - parentID "
"i - 'Int_t' 0 - pdgCode d - 'Double_t' 0 - px "
"d - 'Double_t' 0 - py d - 'Double_t' 0 - pz "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - vx "
"d - 'Double_t' 0 - vy d - 'Double_t' 0 - vz "
"d - 'Double_t' 0 - time d - 'Double_t' 0 - polx "
"d - 'Double_t' 0 - poly d - 'Double_t' 0 - polz "
"i 'TMCProcess' - 0 - proc i - 'Int_t' 1 - ntr "
"d - 'Double_t' 0 - weight i - 'Int_t' 0 - is "
"i - 'Int_t' 0 - secondParentId", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PopNextTrack",1219,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TParticle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - iTrack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PopPrimaryForTracking",2157,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TParticle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iPrim", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCurrentTrack",1540,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iTrack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNtrack",899,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNprimary",1138,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentTrack",1528,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TParticle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentTrackNumber",2145,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentParentTrackNumber",2763,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddParticle",1085,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TParticle' - 0 - part", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillTrackArray",1403,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UpdateTrackIndex",1616,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TRefArray' - 0 '0' detArray", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Register",837,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__ShipDataDict_463_0_17, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' iVerbose", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StoreSecondaries",1661,G__G__ShipDataDict_463_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' choice", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinPoints",1229,G__G__ShipDataDict_463_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergyCut",1218,G__G__ShipDataDict_463_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - eMin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreMothers",1263,G__G__ShipDataDict_463_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' choice", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,G__G__ShipDataDict_463_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i 'DetectorId' - 0 - iDet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,G__G__ShipDataDict_463_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'DetectorId' - 0 - iDet i - 'Int_t' 0 - iTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticle",1108,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TParticle), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetListOfParticles",1816,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SelectTracks",1224,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipStack",906,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack), -1, 0, 1, 1, 4, 0, "u 'ShipStack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipStack), -1, 1, 1, 1, 4, 0, "u 'ShipStack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ShipDataDict_463_0_29, 85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipStack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ShipDataDict_463_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipStack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ShipDataDict_463_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipStack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ShipDataDict_463_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipStack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ShipDataDict_463_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ShipDataDict_463_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipStack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ShipDataDict_463_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipStack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ShipDataDict_463_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipStack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ShipDataDict_463_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipStack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ShipStack", 1032, G__G__ShipDataDict_463_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipMCTrack(void) {
   /* ShipMCTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack));
   G__memfunc_setup("ShipMCTrack",1049,G__G__ShipDataDict_527_0_1, 105, G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipMCTrack",1049,G__G__ShipDataDict_527_0_2, 105, G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack), -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - pdgCode i - 'Int_t' 0 - motherID "
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"d - 'Double_t' 0 - pz d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y d - 'Double_t' 0 - z "
"d - 'Double_t' 0 - t i - 'Int_t' 0 - nPoints "
"d - 'Double_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipMCTrack",1049,G__G__ShipDataDict_527_0_3, 105, G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack), -1, 0, 1, 1, 1, 0, "u 'ShipMCTrack' - 11 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipMCTrack",1049,G__G__ShipDataDict_527_0_4, 105, G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack), -1, 0, 1, 1, 1, 0, "U 'TParticle' - 0 - particle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__G__ShipDataDict_527_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' iTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdgCode",950,G__G__ShipDataDict_527_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMotherId",1084,G__G__ShipDataDict_527_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPx",488,G__G__ShipDataDict_527_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPy",489,G__G__ShipDataDict_527_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPz",490,G__G__ShipDataDict_527_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartX",902,G__G__ShipDataDict_527_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartY",903,G__G__ShipDataDict_527_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartZ",904,G__G__ShipDataDict_527_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartT",898,G__G__ShipDataDict_527_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__G__ShipDataDict_527_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__G__ShipDataDict_527_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPt",484,G__G__ShipDataDict_527_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetP",368,G__G__ShipDataDict_527_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRapidity",1126,G__G__ShipDataDict_527_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__G__ShipDataDict_527_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__G__ShipDataDict_527_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 1 - momentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get4Momentum",1190,G__G__ShipDataDict_527_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 1 - momentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartVertex",1452,G__G__ShipDataDict_527_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPoints",1003,G__G__ShipDataDict_527_0_24, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i 'DetectorId' - 0 - detId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMotherId",1096,G__G__ShipDataDict_527_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNPoints",1015,G__G__ShipDataDict_527_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iDet i - 'Int_t' 0 - np", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ShipDataDict_527_0_27, 85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipMCTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ShipDataDict_527_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMCTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ShipDataDict_527_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipMCTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ShipDataDict_527_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipMCTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ShipDataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ShipDataDict_527_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ShipDataDict_527_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMCTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ShipDataDict_527_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipMCTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ShipDataDict_527_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMCTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ShipDataDict_527_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipMCTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ShipMCTrack", 1175, G__G__ShipDataDict_527_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ShipDataDict_527_0_40, (int) ('u'), G__get_linked_tagnum(&G__G__ShipDataDictLN_ShipMCTrack), -1, 1, 1, 1, 1, 0, "u 'ShipMCTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__ShipDataDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__ShipDataDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__ShipDataDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__ShipDataDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMCProcess = { "TMCProcess" , 101 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TParticle = { "TParticle" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TVirtualMCStack = { "TVirtualMCStack" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_FairLogger = { "FairLogger" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_FairGenericStack = { "FairGenericStack" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_DetectorId = { "DetectorId" , 101 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_pairlEintcOintgR = { "pair<int,int>" , 115 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator = { "map<int,int,less<int>,allocator<pair<const int,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_ShipStack = { "ShipStack" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_dequelETParticlemUcOallocatorlETParticlemUgRsPgR = { "deque<TParticle*,allocator<TParticle*> >" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_stacklETParticlemUcOdequelETParticlemUcOallocatorlETParticlemUgRsPgRsPgR = { "stack<TParticle*,deque<TParticle*,allocator<TParticle*> > >" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgR = { "map<int,bool,less<int>,allocator<pair<const int,bool> > >" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgRcLcLiterator = { "map<int,bool,less<int>,allocator<pair<const int,bool> > >::iterator" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR = { "map<pair<int,int>,int,less<pair<int,int> >,allocator<pair<const pair<int,int>,int> > >" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__G__ShipDataDictLN_ShipMCTrack = { "ShipMCTrack" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__ShipDataDict() {
  G__G__ShipDataDictLN_TClass.tagnum = -1 ;
  G__G__ShipDataDictLN_TBuffer.tagnum = -1 ;
  G__G__ShipDataDictLN_TMemberInspector.tagnum = -1 ;
  G__G__ShipDataDictLN_TObject.tagnum = -1 ;
  G__G__ShipDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__ShipDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TClonesArray.tagnum = -1 ;
  G__G__ShipDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__ShipDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMCProcess.tagnum = -1 ;
  G__G__ShipDataDictLN_TParticle.tagnum = -1 ;
  G__G__ShipDataDictLN_TVirtualMCStack.tagnum = -1 ;
  G__G__ShipDataDictLN_FairLogger.tagnum = -1 ;
  G__G__ShipDataDictLN_TRefArray.tagnum = -1 ;
  G__G__ShipDataDictLN_FairGenericStack.tagnum = -1 ;
  G__G__ShipDataDictLN_DetectorId.tagnum = -1 ;
  G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__ShipDataDictLN_pairlEintcOintgR.tagnum = -1 ;
  G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__G__ShipDataDictLN_ShipStack.tagnum = -1 ;
  G__G__ShipDataDictLN_dequelETParticlemUcOallocatorlETParticlemUgRsPgR.tagnum = -1 ;
  G__G__ShipDataDictLN_stacklETParticlemUcOdequelETParticlemUcOallocatorlETParticlemUgRsPgRsPgR.tagnum = -1 ;
  G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgR.tagnum = -1 ;
  G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__ShipDataDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__ShipDataDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__ShipDataDictLN_TVector3.tagnum = -1 ;
  G__G__ShipDataDictLN_TLorentzVector.tagnum = -1 ;
  G__G__ShipDataDictLN_ShipMCTrack.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__ShipDataDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMCProcess);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TParticle);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TVirtualMCStack);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_FairLogger);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TRefArray);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_FairGenericStack);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_DetectorId);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_pairlEintcOintgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_ShipStack),sizeof(ShipStack),-1,327424,(char*)NULL,G__setup_memvarShipStack,G__setup_memfuncShipStack);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_dequelETParticlemUcOallocatorlETParticlemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_stacklETParticlemUcOdequelETParticlemUcOallocatorlETParticlemUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_maplEintcOboolcOlesslEintgRcOallocatorlEpairlEconstsPintcOboolgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_maplEpairlEintcOintgRcOintcOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ShipDataDictLN_ShipMCTrack),sizeof(ShipMCTrack),-1,325376,(char*)NULL,G__setup_memvarShipMCTrack,G__setup_memfuncShipMCTrack);
}
extern "C" void G__cpp_setupG__ShipDataDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__ShipDataDict()");
  G__set_cpp_environmentG__ShipDataDict();
  G__cpp_setup_tagtableG__ShipDataDict();

  G__cpp_setup_inheritanceG__ShipDataDict();

  G__cpp_setup_typetableG__ShipDataDict();

  G__cpp_setup_memvarG__ShipDataDict();

  G__cpp_setup_memfuncG__ShipDataDict();
  G__cpp_setup_globalG__ShipDataDict();
  G__cpp_setup_funcG__ShipDataDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__ShipDataDict();
  return;
}
class G__cpp_setup_initG__ShipDataDict {
  public:
    G__cpp_setup_initG__ShipDataDict() { G__add_setup_func("G__ShipDataDict",(G__incsetup)(&G__cpp_setupG__ShipDataDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__ShipDataDict() { G__remove_setup_func("G__ShipDataDict"); }
};
G__cpp_setup_initG__ShipDataDict G__cpp_setup_initializerG__ShipDataDict;

