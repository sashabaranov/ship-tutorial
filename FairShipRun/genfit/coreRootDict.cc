//
// File generated by /opt/ocean/FairSoftInst/bin/rootcint at Thu Oct  8 06:27:09 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIinputdIFairShipRundIgenfitdIcoreRootDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "coreRootDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::AbsBField AbsBField;
      #else
      class AbsBField  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AbsBField() throw() {};
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::FieldManager FieldManager;
      #else
      class FieldManager  {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::AbsFitter AbsFitter;
      #else
      class AbsFitter  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AbsFitter() throw() {};
         unsigned int debugLvl_; //
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void genfitcLcLAbsFinitePlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_genfitcLcLAbsFinitePlane(void *p);
   static void deleteArray_genfitcLcLAbsFinitePlane(void *p);
   static void destruct_genfitcLcLAbsFinitePlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsFinitePlane*)
   {
      ::genfit::AbsFinitePlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::AbsFinitePlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsFinitePlane", ::genfit::AbsFinitePlane::Class_Version(), "/input/FairShip/genfit/core/include/AbsFinitePlane.h", 43,
                  typeid(::genfit::AbsFinitePlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::AbsFinitePlane::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsFinitePlane) );
      instance.SetDelete(&delete_genfitcLcLAbsFinitePlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsFinitePlane);
      instance.SetDestructor(&destruct_genfitcLcLAbsFinitePlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsFinitePlane*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsFinitePlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLDetPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLDetPlane(void *p = 0);
   static void *newArray_genfitcLcLDetPlane(Long_t size, void *p);
   static void delete_genfitcLcLDetPlane(void *p);
   static void deleteArray_genfitcLcLDetPlane(void *p);
   static void destruct_genfitcLcLDetPlane(void *p);
   static void streamer_genfitcLcLDetPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::DetPlane*)
   {
      ::genfit::DetPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::DetPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::DetPlane", ::genfit::DetPlane::Class_Version(), "/input/FairShip/genfit/core/include/DetPlane.h", 61,
                  typeid(::genfit::DetPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::DetPlane::Dictionary, isa_proxy, 1,
                  sizeof(::genfit::DetPlane) );
      instance.SetNew(&new_genfitcLcLDetPlane);
      instance.SetNewArray(&newArray_genfitcLcLDetPlane);
      instance.SetDelete(&delete_genfitcLcLDetPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLDetPlane);
      instance.SetDestructor(&destruct_genfitcLcLDetPlane);
      instance.SetStreamerFunc(&streamer_genfitcLcLDetPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::DetPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::DetPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLMaterialProperties_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLMaterialProperties(void *p = 0);
   static void *newArray_genfitcLcLMaterialProperties(Long_t size, void *p);
   static void delete_genfitcLcLMaterialProperties(void *p);
   static void deleteArray_genfitcLcLMaterialProperties(void *p);
   static void destruct_genfitcLcLMaterialProperties(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::MaterialProperties*)
   {
      ::genfit::MaterialProperties *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::MaterialProperties >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::MaterialProperties", ::genfit::MaterialProperties::Class_Version(), "/input/FairShip/genfit/core/include/MaterialProperties.h", 36,
                  typeid(::genfit::MaterialProperties), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::MaterialProperties::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::MaterialProperties) );
      instance.SetNew(&new_genfitcLcLMaterialProperties);
      instance.SetNewArray(&newArray_genfitcLcLMaterialProperties);
      instance.SetDelete(&delete_genfitcLcLMaterialProperties);
      instance.SetDeleteArray(&deleteArray_genfitcLcLMaterialProperties);
      instance.SetDestructor(&destruct_genfitcLcLMaterialProperties);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::MaterialProperties*)
   {
      return GenerateInitInstanceLocal((::genfit::MaterialProperties*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::MaterialProperties*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLStateOnPlane(void *p = 0);
   static void *newArray_genfitcLcLStateOnPlane(Long_t size, void *p);
   static void delete_genfitcLcLStateOnPlane(void *p);
   static void deleteArray_genfitcLcLStateOnPlane(void *p);
   static void destruct_genfitcLcLStateOnPlane(void *p);
   static void streamer_genfitcLcLStateOnPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::StateOnPlane*)
   {
      ::genfit::StateOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::StateOnPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::StateOnPlane", ::genfit::StateOnPlane::Class_Version(), "/input/FairShip/genfit/core/include/StateOnPlane.h", 45,
                  typeid(::genfit::StateOnPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::StateOnPlane::Dictionary, isa_proxy, 1,
                  sizeof(::genfit::StateOnPlane) );
      instance.SetNew(&new_genfitcLcLStateOnPlane);
      instance.SetNewArray(&newArray_genfitcLcLStateOnPlane);
      instance.SetDelete(&delete_genfitcLcLStateOnPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLStateOnPlane);
      instance.SetDestructor(&destruct_genfitcLcLStateOnPlane);
      instance.SetStreamerFunc(&streamer_genfitcLcLStateOnPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::StateOnPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::StateOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLMeasuredStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLMeasuredStateOnPlane(void *p = 0);
   static void *newArray_genfitcLcLMeasuredStateOnPlane(Long_t size, void *p);
   static void delete_genfitcLcLMeasuredStateOnPlane(void *p);
   static void deleteArray_genfitcLcLMeasuredStateOnPlane(void *p);
   static void destruct_genfitcLcLMeasuredStateOnPlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::MeasuredStateOnPlane*)
   {
      ::genfit::MeasuredStateOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::MeasuredStateOnPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::MeasuredStateOnPlane", ::genfit::MeasuredStateOnPlane::Class_Version(), "/input/FairShip/genfit/core/include/MeasuredStateOnPlane.h", 38,
                  typeid(::genfit::MeasuredStateOnPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::MeasuredStateOnPlane::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::MeasuredStateOnPlane) );
      instance.SetNew(&new_genfitcLcLMeasuredStateOnPlane);
      instance.SetNewArray(&newArray_genfitcLcLMeasuredStateOnPlane);
      instance.SetDelete(&delete_genfitcLcLMeasuredStateOnPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLMeasuredStateOnPlane);
      instance.SetDestructor(&destruct_genfitcLcLMeasuredStateOnPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::MeasuredStateOnPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::MeasuredStateOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLAbsMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_genfitcLcLAbsMeasurement(void *p);
   static void deleteArray_genfitcLcLAbsMeasurement(void *p);
   static void destruct_genfitcLcLAbsMeasurement(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsMeasurement*)
   {
      ::genfit::AbsMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::AbsMeasurement >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsMeasurement", ::genfit::AbsMeasurement::Class_Version(), "/input/FairShip/genfit/core/include/AbsMeasurement.h", 42,
                  typeid(::genfit::AbsMeasurement), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::AbsMeasurement::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsMeasurement) );
      instance.SetDelete(&delete_genfitcLcLAbsMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLAbsMeasurement);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLAbsTrackRep_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_genfitcLcLAbsTrackRep(void *p);
   static void deleteArray_genfitcLcLAbsTrackRep(void *p);
   static void destruct_genfitcLcLAbsTrackRep(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsTrackRep*)
   {
      ::genfit::AbsTrackRep *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::AbsTrackRep >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsTrackRep", ::genfit::AbsTrackRep::Class_Version(), "/input/FairShip/genfit/core/include/AbsTrackRep.h", 66,
                  typeid(::genfit::AbsTrackRep), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::AbsTrackRep::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsTrackRep) );
      instance.SetDelete(&delete_genfitcLcLAbsTrackRep);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsTrackRep);
      instance.SetDestructor(&destruct_genfitcLcLAbsTrackRep);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsTrackRep*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsTrackRep*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLAbsHMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_genfitcLcLAbsHMatrix(void *p);
   static void deleteArray_genfitcLcLAbsHMatrix(void *p);
   static void destruct_genfitcLcLAbsHMatrix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsHMatrix*)
   {
      ::genfit::AbsHMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::AbsHMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsHMatrix", ::genfit::AbsHMatrix::Class_Version(), "/input/FairShip/genfit/core/include/AbsHMatrix.h", 37,
                  typeid(::genfit::AbsHMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::AbsHMatrix::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsHMatrix) );
      instance.SetDelete(&delete_genfitcLcLAbsHMatrix);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsHMatrix);
      instance.SetDestructor(&destruct_genfitcLcLAbsHMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsHMatrix*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsHMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsHMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLMeasurementOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLMeasurementOnPlane(void *p = 0);
   static void *newArray_genfitcLcLMeasurementOnPlane(Long_t size, void *p);
   static void delete_genfitcLcLMeasurementOnPlane(void *p);
   static void deleteArray_genfitcLcLMeasurementOnPlane(void *p);
   static void destruct_genfitcLcLMeasurementOnPlane(void *p);
   static void streamer_genfitcLcLMeasurementOnPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::MeasurementOnPlane*)
   {
      ::genfit::MeasurementOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::MeasurementOnPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::MeasurementOnPlane", ::genfit::MeasurementOnPlane::Class_Version(), "/input/FairShip/genfit/core/include/MeasurementOnPlane.h", 44,
                  typeid(::genfit::MeasurementOnPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::MeasurementOnPlane::Dictionary, isa_proxy, 1,
                  sizeof(::genfit::MeasurementOnPlane) );
      instance.SetNew(&new_genfitcLcLMeasurementOnPlane);
      instance.SetNewArray(&newArray_genfitcLcLMeasurementOnPlane);
      instance.SetDelete(&delete_genfitcLcLMeasurementOnPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLMeasurementOnPlane);
      instance.SetDestructor(&destruct_genfitcLcLMeasurementOnPlane);
      instance.SetStreamerFunc(&streamer_genfitcLcLMeasurementOnPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::MeasurementOnPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::MeasurementOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::MeasurementOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLTrackPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLTrackPoint(void *p = 0);
   static void *newArray_genfitcLcLTrackPoint(Long_t size, void *p);
   static void delete_genfitcLcLTrackPoint(void *p);
   static void deleteArray_genfitcLcLTrackPoint(void *p);
   static void destruct_genfitcLcLTrackPoint(void *p);
   static void streamer_genfitcLcLTrackPoint(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::TrackPoint*)
   {
      ::genfit::TrackPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::TrackPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::TrackPoint", ::genfit::TrackPoint::Class_Version(), "/input/FairShip/genfit/core/include/TrackPoint.h", 50,
                  typeid(::genfit::TrackPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::TrackPoint::Dictionary, isa_proxy, 1,
                  sizeof(::genfit::TrackPoint) );
      instance.SetNew(&new_genfitcLcLTrackPoint);
      instance.SetNewArray(&newArray_genfitcLcLTrackPoint);
      instance.SetDelete(&delete_genfitcLcLTrackPoint);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrackPoint);
      instance.SetDestructor(&destruct_genfitcLcLTrackPoint);
      instance.SetStreamerFunc(&streamer_genfitcLcLTrackPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::TrackPoint*)
   {
      return GenerateInitInstanceLocal((::genfit::TrackPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLAbsFitterInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_genfitcLcLAbsFitterInfo(void *p);
   static void deleteArray_genfitcLcLAbsFitterInfo(void *p);
   static void destruct_genfitcLcLAbsFitterInfo(void *p);
   static void streamer_genfitcLcLAbsFitterInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsFitterInfo*)
   {
      ::genfit::AbsFitterInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::AbsFitterInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsFitterInfo", ::genfit::AbsFitterInfo::Class_Version(), "/input/FairShip/genfit/core/include/AbsFitterInfo.h", 41,
                  typeid(::genfit::AbsFitterInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::AbsFitterInfo::Dictionary, isa_proxy, 1,
                  sizeof(::genfit::AbsFitterInfo) );
      instance.SetDelete(&delete_genfitcLcLAbsFitterInfo);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsFitterInfo);
      instance.SetDestructor(&destruct_genfitcLcLAbsFitterInfo);
      instance.SetStreamerFunc(&streamer_genfitcLcLAbsFitterInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsFitterInfo*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsFitterInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLFitStatus_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLFitStatus(void *p = 0);
   static void *newArray_genfitcLcLFitStatus(Long_t size, void *p);
   static void delete_genfitcLcLFitStatus(void *p);
   static void deleteArray_genfitcLcLFitStatus(void *p);
   static void destruct_genfitcLcLFitStatus(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::FitStatus*)
   {
      ::genfit::FitStatus *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::FitStatus >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::FitStatus", ::genfit::FitStatus::Class_Version(), "/input/FairShip/genfit/core/include/FitStatus.h", 36,
                  typeid(::genfit::FitStatus), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::FitStatus::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::FitStatus) );
      instance.SetNew(&new_genfitcLcLFitStatus);
      instance.SetNewArray(&newArray_genfitcLcLFitStatus);
      instance.SetDelete(&delete_genfitcLcLFitStatus);
      instance.SetDeleteArray(&deleteArray_genfitcLcLFitStatus);
      instance.SetDestructor(&destruct_genfitcLcLFitStatus);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::FitStatus*)
   {
      return GenerateInitInstanceLocal((::genfit::FitStatus*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::FitStatus*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLTrackCandHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLTrackCandHit(void *p = 0);
   static void *newArray_genfitcLcLTrackCandHit(Long_t size, void *p);
   static void delete_genfitcLcLTrackCandHit(void *p);
   static void deleteArray_genfitcLcLTrackCandHit(void *p);
   static void destruct_genfitcLcLTrackCandHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::TrackCandHit*)
   {
      ::genfit::TrackCandHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::TrackCandHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::TrackCandHit", ::genfit::TrackCandHit::Class_Version(), "/input/FairShip/genfit/core/include/TrackCandHit.h", 34,
                  typeid(::genfit::TrackCandHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::TrackCandHit::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::TrackCandHit) );
      instance.SetNew(&new_genfitcLcLTrackCandHit);
      instance.SetNewArray(&newArray_genfitcLcLTrackCandHit);
      instance.SetDelete(&delete_genfitcLcLTrackCandHit);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrackCandHit);
      instance.SetDestructor(&destruct_genfitcLcLTrackCandHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::TrackCandHit*)
   {
      return GenerateInitInstanceLocal((::genfit::TrackCandHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLTrackCand_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLTrackCand(void *p = 0);
   static void *newArray_genfitcLcLTrackCand(Long_t size, void *p);
   static void delete_genfitcLcLTrackCand(void *p);
   static void deleteArray_genfitcLcLTrackCand(void *p);
   static void destruct_genfitcLcLTrackCand(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::TrackCand*)
   {
      ::genfit::TrackCand *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::TrackCand >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::TrackCand", ::genfit::TrackCand::Class_Version(), "/input/FairShip/genfit/core/include/TrackCand.h", 69,
                  typeid(::genfit::TrackCand), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::TrackCand::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::TrackCand) );
      instance.SetNew(&new_genfitcLcLTrackCand);
      instance.SetNewArray(&newArray_genfitcLcLTrackCand);
      instance.SetDelete(&delete_genfitcLcLTrackCand);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrackCand);
      instance.SetDestructor(&destruct_genfitcLcLTrackCand);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::TrackCand*)
   {
      return GenerateInitInstanceLocal((::genfit::TrackCand*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLThinScatterer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLThinScatterer(void *p = 0);
   static void *newArray_genfitcLcLThinScatterer(Long_t size, void *p);
   static void delete_genfitcLcLThinScatterer(void *p);
   static void deleteArray_genfitcLcLThinScatterer(void *p);
   static void destruct_genfitcLcLThinScatterer(void *p);
   static void streamer_genfitcLcLThinScatterer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::ThinScatterer*)
   {
      ::genfit::ThinScatterer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::ThinScatterer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::ThinScatterer", ::genfit::ThinScatterer::Class_Version(), "/input/FairShip/genfit/core/include/ThinScatterer.h", 38,
                  typeid(::genfit::ThinScatterer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::ThinScatterer::Dictionary, isa_proxy, 1,
                  sizeof(::genfit::ThinScatterer) );
      instance.SetNew(&new_genfitcLcLThinScatterer);
      instance.SetNewArray(&newArray_genfitcLcLThinScatterer);
      instance.SetDelete(&delete_genfitcLcLThinScatterer);
      instance.SetDeleteArray(&deleteArray_genfitcLcLThinScatterer);
      instance.SetDestructor(&destruct_genfitcLcLThinScatterer);
      instance.SetStreamerFunc(&streamer_genfitcLcLThinScatterer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::ThinScatterer*)
   {
      return GenerateInitInstanceLocal((::genfit::ThinScatterer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::ThinScatterer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLTrack(void *p = 0);
   static void *newArray_genfitcLcLTrack(Long_t size, void *p);
   static void delete_genfitcLcLTrack(void *p);
   static void deleteArray_genfitcLcLTrack(void *p);
   static void destruct_genfitcLcLTrack(void *p);
   static void streamer_genfitcLcLTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::Track*)
   {
      ::genfit::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::Track", ::genfit::Track::Class_Version(), "/input/FairShip/genfit/core/include/Track.h", 71,
                  typeid(::genfit::Track), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::Track::Dictionary, isa_proxy, 1,
                  sizeof(::genfit::Track) );
      instance.SetNew(&new_genfitcLcLTrack);
      instance.SetNewArray(&newArray_genfitcLcLTrack);
      instance.SetDelete(&delete_genfitcLcLTrack);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrack);
      instance.SetDestructor(&destruct_genfitcLcLTrack);
      instance.SetStreamerFunc(&streamer_genfitcLcLTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::Track*)
   {
      return GenerateInitInstanceLocal((::genfit::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLAbsBField_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLAbsBField_Dictionary();
   static void delete_genfitcLcLAbsBField(void *p);
   static void deleteArray_genfitcLcLAbsBField(void *p);
   static void destruct_genfitcLcLAbsBField(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsBField*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::AbsBField) == sizeof( ::ROOTShadow::Shadow::genfit::AbsBField));
      ::genfit::AbsBField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::AbsBField),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsBField", "/input/FairShip/genfit/core/include/AbsBField.h", 36,
                  typeid(::genfit::AbsBField), ::ROOT::DefineBehavior(ptr, ptr),
                  &genfitcLcLAbsBField_ShowMembers, &genfitcLcLAbsBField_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsBField) );
      instance.SetDelete(&delete_genfitcLcLAbsBField);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsBField);
      instance.SetDestructor(&destruct_genfitcLcLAbsBField);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsBField*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsBField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsBField*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLAbsBField_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsBField*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLFieldManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLFieldManager_Dictionary();

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::FieldManager*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::FieldManager) == sizeof( ::ROOTShadow::Shadow::genfit::FieldManager));
      ::genfit::FieldManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::FieldManager),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::FieldManager", "/input/FairShip/genfit/core/include/FieldManager.h", 53,
                  typeid(::genfit::FieldManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &genfitcLcLFieldManager_ShowMembers, &genfitcLcLFieldManager_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::FieldManager) );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::FieldManager*)
   {
      return GenerateInitInstanceLocal((::genfit::FieldManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::FieldManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLFieldManager_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::FieldManager*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLRectangularFinitePlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_genfitcLcLRectangularFinitePlane(void *p = 0);
   static void *newArray_genfitcLcLRectangularFinitePlane(Long_t size, void *p);
   static void delete_genfitcLcLRectangularFinitePlane(void *p);
   static void deleteArray_genfitcLcLRectangularFinitePlane(void *p);
   static void destruct_genfitcLcLRectangularFinitePlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::RectangularFinitePlane*)
   {
      ::genfit::RectangularFinitePlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genfit::RectangularFinitePlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::RectangularFinitePlane", ::genfit::RectangularFinitePlane::Class_Version(), "/input/FairShip/genfit/finitePlanes/include/RectangularFinitePlane.h", 34,
                  typeid(::genfit::RectangularFinitePlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genfit::RectangularFinitePlane::Dictionary, isa_proxy, 4,
                  sizeof(::genfit::RectangularFinitePlane) );
      instance.SetNew(&new_genfitcLcLRectangularFinitePlane);
      instance.SetNewArray(&newArray_genfitcLcLRectangularFinitePlane);
      instance.SetDelete(&delete_genfitcLcLRectangularFinitePlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLRectangularFinitePlane);
      instance.SetDestructor(&destruct_genfitcLcLRectangularFinitePlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::RectangularFinitePlane*)
   {
      return GenerateInitInstanceLocal((::genfit::RectangularFinitePlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void genfitcLcLAbsFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLAbsFitter_Dictionary();
   static void delete_genfitcLcLAbsFitter(void *p);
   static void deleteArray_genfitcLcLAbsFitter(void *p);
   static void destruct_genfitcLcLAbsFitter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsFitter*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::AbsFitter) == sizeof( ::ROOTShadow::Shadow::genfit::AbsFitter));
      ::genfit::AbsFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::AbsFitter),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsFitter", "/input/FairShip/genfit/core/include/AbsFitter.h", 35,
                  typeid(::genfit::AbsFitter), ::ROOT::DefineBehavior(ptr, ptr),
                  &genfitcLcLAbsFitter_ShowMembers, &genfitcLcLAbsFitter_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsFitter) );
      instance.SetDelete(&delete_genfitcLcLAbsFitter);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsFitter);
      instance.SetDestructor(&destruct_genfitcLcLAbsFitter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsFitter*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLAbsFitter_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFitter*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr AbsFinitePlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AbsFinitePlane::Class_Name()
{
   return "genfit::AbsFinitePlane";
}

//______________________________________________________________________________
const char *AbsFinitePlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AbsFinitePlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AbsFinitePlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AbsFinitePlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr DetPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *DetPlane::Class_Name()
{
   return "genfit::DetPlane";
}

//______________________________________________________________________________
const char *DetPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DetPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DetPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DetPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr MaterialProperties::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MaterialProperties::Class_Name()
{
   return "genfit::MaterialProperties";
}

//______________________________________________________________________________
const char *MaterialProperties::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MaterialProperties*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaterialProperties::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MaterialProperties*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaterialProperties::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MaterialProperties*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaterialProperties::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MaterialProperties*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr StateOnPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *StateOnPlane::Class_Name()
{
   return "genfit::StateOnPlane";
}

//______________________________________________________________________________
const char *StateOnPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int StateOnPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void StateOnPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *StateOnPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr MeasuredStateOnPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MeasuredStateOnPlane::Class_Name()
{
   return "genfit::MeasuredStateOnPlane";
}

//______________________________________________________________________________
const char *MeasuredStateOnPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MeasuredStateOnPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MeasuredStateOnPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MeasuredStateOnPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr AbsMeasurement::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AbsMeasurement::Class_Name()
{
   return "genfit::AbsMeasurement";
}

//______________________________________________________________________________
const char *AbsMeasurement::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AbsMeasurement::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AbsMeasurement::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AbsMeasurement::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr AbsTrackRep::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AbsTrackRep::Class_Name()
{
   return "genfit::AbsTrackRep";
}

//______________________________________________________________________________
const char *AbsTrackRep::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AbsTrackRep::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AbsTrackRep::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AbsTrackRep::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr AbsHMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AbsHMatrix::Class_Name()
{
   return "genfit::AbsHMatrix";
}

//______________________________________________________________________________
const char *AbsHMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsHMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AbsHMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsHMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AbsHMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsHMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AbsHMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsHMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr MeasurementOnPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MeasurementOnPlane::Class_Name()
{
   return "genfit::MeasurementOnPlane";
}

//______________________________________________________________________________
const char *MeasurementOnPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasurementOnPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MeasurementOnPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasurementOnPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MeasurementOnPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasurementOnPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MeasurementOnPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::MeasurementOnPlane*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr TrackPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackPoint::Class_Name()
{
   return "genfit::TrackPoint";
}

//______________________________________________________________________________
const char *TrackPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr AbsFitterInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AbsFitterInfo::Class_Name()
{
   return "genfit::AbsFitterInfo";
}

//______________________________________________________________________________
const char *AbsFitterInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AbsFitterInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AbsFitterInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AbsFitterInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr FitStatus::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FitStatus::Class_Name()
{
   return "genfit::FitStatus";
}

//______________________________________________________________________________
const char *FitStatus::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::FitStatus*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FitStatus::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::FitStatus*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FitStatus::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::FitStatus*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FitStatus::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::FitStatus*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr TrackCandHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackCandHit::Class_Name()
{
   return "genfit::TrackCandHit";
}

//______________________________________________________________________________
const char *TrackCandHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackCandHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackCandHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackCandHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr TrackCand::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackCand::Class_Name()
{
   return "genfit::TrackCand";
}

//______________________________________________________________________________
const char *TrackCand::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackCand::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackCand::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackCand::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr ThinScatterer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ThinScatterer::Class_Name()
{
   return "genfit::ThinScatterer";
}

//______________________________________________________________________________
const char *ThinScatterer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::ThinScatterer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ThinScatterer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::ThinScatterer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ThinScatterer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::ThinScatterer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ThinScatterer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::ThinScatterer*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr Track::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "genfit::Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::Track*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
atomic_TClass_ptr RectangularFinitePlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RectangularFinitePlane::Class_Name()
{
   return "genfit::RectangularFinitePlane";
}

//______________________________________________________________________________
const char *RectangularFinitePlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RectangularFinitePlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RectangularFinitePlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RectangularFinitePlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genfit
      namespace genfit {
//______________________________________________________________________________
void AbsFinitePlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::AbsFinitePlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::AbsFinitePlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::AbsFinitePlane::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void AbsFinitePlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::AbsFinitePlane.
      TClass *R__cl = ::genfit::AbsFinitePlane::IsA();
      if (R__cl || R__insp.IsA()) { }
}

} // namespace genfit
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsFinitePlane(void *p) {
      delete ((::genfit::AbsFinitePlane*)p);
   }
   static void deleteArray_genfitcLcLAbsFinitePlane(void *p) {
      delete [] ((::genfit::AbsFinitePlane*)p);
   }
   static void destruct_genfitcLcLAbsFinitePlane(void *p) {
      typedef ::genfit::AbsFinitePlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::AbsFinitePlane

      namespace genfit {
//______________________________________________________________________________
void AbsHMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::AbsHMatrix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::AbsHMatrix::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::AbsHMatrix::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void AbsHMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::AbsHMatrix.
      TClass *R__cl = ::genfit::AbsHMatrix::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsHMatrix(void *p) {
      delete ((::genfit::AbsHMatrix*)p);
   }
   static void deleteArray_genfitcLcLAbsHMatrix(void *p) {
      delete [] ((::genfit::AbsHMatrix*)p);
   }
   static void destruct_genfitcLcLAbsHMatrix(void *p) {
      typedef ::genfit::AbsHMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::AbsHMatrix

      namespace genfit {
//______________________________________________________________________________
void RectangularFinitePlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::RectangularFinitePlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::RectangularFinitePlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::RectangularFinitePlane::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void RectangularFinitePlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::RectangularFinitePlane.
      TClass *R__cl = ::genfit::RectangularFinitePlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uMin_", &uMin_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uMax_", &uMax_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vMin_", &vMin_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vMax_", &vMax_);
      //This works around a msvc bug and should be harmless on other platforms
      typedef genfit::AbsFinitePlane baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLRectangularFinitePlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::RectangularFinitePlane : new ::genfit::RectangularFinitePlane;
   }
   static void *newArray_genfitcLcLRectangularFinitePlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::RectangularFinitePlane[nElements] : new ::genfit::RectangularFinitePlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLRectangularFinitePlane(void *p) {
      delete ((::genfit::RectangularFinitePlane*)p);
   }
   static void deleteArray_genfitcLcLRectangularFinitePlane(void *p) {
      delete [] ((::genfit::RectangularFinitePlane*)p);
   }
   static void destruct_genfitcLcLRectangularFinitePlane(void *p) {
      typedef ::genfit::RectangularFinitePlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::RectangularFinitePlane

      namespace genfit {
//______________________________________________________________________________
void FitStatus::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::FitStatus.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::FitStatus::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::FitStatus::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void FitStatus::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::FitStatus.
      TClass *R__cl = ::genfit::FitStatus::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFitted_", &isFitted_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFitConvergedFully_", &isFitConvergedFully_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFitConvergedPartially_", &isFitConvergedPartially_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFailedPoints_", &nFailedPoints_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackHasChanged_", &trackHasChanged_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackIsPruned_", &trackIsPruned_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge_", &charge_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2_", &chi2_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndf_", &ndf_);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLFitStatus(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::FitStatus : new ::genfit::FitStatus;
   }
   static void *newArray_genfitcLcLFitStatus(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::FitStatus[nElements] : new ::genfit::FitStatus[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLFitStatus(void *p) {
      delete ((::genfit::FitStatus*)p);
   }
   static void deleteArray_genfitcLcLFitStatus(void *p) {
      delete [] ((::genfit::FitStatus*)p);
   }
   static void destruct_genfitcLcLFitStatus(void *p) {
      typedef ::genfit::FitStatus current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::FitStatus

      namespace genfit {
//______________________________________________________________________________
void MaterialProperties::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::MaterialProperties.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::MaterialProperties::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::MaterialProperties::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void MaterialProperties::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::MaterialProperties.
      TClass *R__cl = ::genfit::MaterialProperties::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "density_", &density_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z_", &Z_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A_", &A_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "radiationLength_", &radiationLength_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mEE_", &mEE_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLMaterialProperties(void *p) {
      return  p ? new(p) ::genfit::MaterialProperties : new ::genfit::MaterialProperties;
   }
   static void *newArray_genfitcLcLMaterialProperties(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::MaterialProperties[nElements] : new ::genfit::MaterialProperties[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLMaterialProperties(void *p) {
      delete ((::genfit::MaterialProperties*)p);
   }
   static void deleteArray_genfitcLcLMaterialProperties(void *p) {
      delete [] ((::genfit::MaterialProperties*)p);
   }
   static void destruct_genfitcLcLMaterialProperties(void *p) {
      typedef ::genfit::MaterialProperties current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::MaterialProperties

      namespace genfit {
//______________________________________________________________________________
void TrackCand::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::TrackCand.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::TrackCand::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::TrackCand::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void TrackCand::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::TrackCand.
      TClass *R__cl = ::genfit::TrackCand::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hits_", (void*)&hits_);
      R__insp.InspectMember("vector<TrackCandHit*>", (void*)&hits_, "hits_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcTrackId_", &mcTrackId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdg_", &pdg_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "state6D_", &state6D_);
      R__insp.InspectMember(state6D_, "state6D_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cov6D_", &cov6D_);
      R__insp.InspectMember(cov6D_, "cov6D_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "q_", &q_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLTrackCand(void *p) {
      return  p ? new(p) ::genfit::TrackCand : new ::genfit::TrackCand;
   }
   static void *newArray_genfitcLcLTrackCand(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::TrackCand[nElements] : new ::genfit::TrackCand[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrackCand(void *p) {
      delete ((::genfit::TrackCand*)p);
   }
   static void deleteArray_genfitcLcLTrackCand(void *p) {
      delete [] ((::genfit::TrackCand*)p);
   }
   static void destruct_genfitcLcLTrackCand(void *p) {
      typedef ::genfit::TrackCand current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::TrackCand

      namespace genfit {
//______________________________________________________________________________
void TrackCandHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::TrackCandHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::TrackCandHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::TrackCandHit::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void TrackCandHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::TrackCandHit.
      TClass *R__cl = ::genfit::TrackCandHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detId_", &detId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitId_", &hitId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeId_", &planeId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sortingParameter_", &sortingParameter_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLTrackCandHit(void *p) {
      return  p ? new(p) ::genfit::TrackCandHit : new ::genfit::TrackCandHit;
   }
   static void *newArray_genfitcLcLTrackCandHit(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::TrackCandHit[nElements] : new ::genfit::TrackCandHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrackCandHit(void *p) {
      delete ((::genfit::TrackCandHit*)p);
   }
   static void deleteArray_genfitcLcLTrackCandHit(void *p) {
      delete [] ((::genfit::TrackCandHit*)p);
   }
   static void destruct_genfitcLcLTrackCandHit(void *p) {
      typedef ::genfit::TrackCandHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::TrackCandHit

//______________________________________________________________________________
namespace ROOTDict {
   void genfitcLcLFieldManager_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::FieldManager.
      typedef ::ROOTShadow::Shadow::genfit::FieldManager ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::FieldManager*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOTDict {
} // end of namespace ROOTDict for class ::genfit::FieldManager

//______________________________________________________________________________
namespace ROOTDict {
   void genfitcLcLAbsFitter_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::AbsFitter.
      typedef ::ROOTShadow::Shadow::genfit::AbsFitter ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsFitter*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugLvl_", &sobj->debugLvl_);
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsFitter(void *p) {
      delete ((::genfit::AbsFitter*)p);
   }
   static void deleteArray_genfitcLcLAbsFitter(void *p) {
      delete [] ((::genfit::AbsFitter*)p);
   }
   static void destruct_genfitcLcLAbsFitter(void *p) {
      typedef ::genfit::AbsFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::AbsFitter

//______________________________________________________________________________
namespace ROOTDict {
   void genfitcLcLAbsBField_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::AbsBField.
      typedef ::ROOTShadow::Shadow::genfit::AbsBField ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genfit::AbsBField*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsBField(void *p) {
      delete ((::genfit::AbsBField*)p);
   }
   static void deleteArray_genfitcLcLAbsBField(void *p) {
      delete [] ((::genfit::AbsBField*)p);
   }
   static void destruct_genfitcLcLAbsBField(void *p) {
      typedef ::genfit::AbsBField current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::AbsBField

      namespace genfit {
//______________________________________________________________________________
void AbsTrackRep::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::AbsTrackRep.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::AbsTrackRep::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::AbsTrackRep::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void AbsTrackRep::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::AbsTrackRep.
      TClass *R__cl = ::genfit::AbsTrackRep::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgCode_", &pdgCode_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "propDir_", &propDir_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugLvl_", &debugLvl_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsTrackRep(void *p) {
      delete ((::genfit::AbsTrackRep*)p);
   }
   static void deleteArray_genfitcLcLAbsTrackRep(void *p) {
      delete [] ((::genfit::AbsTrackRep*)p);
   }
   static void destruct_genfitcLcLAbsTrackRep(void *p) {
      typedef ::genfit::AbsTrackRep current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::AbsTrackRep

      namespace genfit {
//______________________________________________________________________________
void MeasuredStateOnPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::MeasuredStateOnPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::MeasuredStateOnPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::MeasuredStateOnPlane::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void MeasuredStateOnPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::MeasuredStateOnPlane.
      TClass *R__cl = ::genfit::MeasuredStateOnPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cov_", &cov_);
      R__insp.InspectMember(cov_, "cov_.");
      //This works around a msvc bug and should be harmless on other platforms
      typedef genfit::StateOnPlane baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLMeasuredStateOnPlane(void *p) {
      return  p ? new(p) ::genfit::MeasuredStateOnPlane : new ::genfit::MeasuredStateOnPlane;
   }
   static void *newArray_genfitcLcLMeasuredStateOnPlane(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::MeasuredStateOnPlane[nElements] : new ::genfit::MeasuredStateOnPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLMeasuredStateOnPlane(void *p) {
      delete ((::genfit::MeasuredStateOnPlane*)p);
   }
   static void deleteArray_genfitcLcLMeasuredStateOnPlane(void *p) {
      delete [] ((::genfit::MeasuredStateOnPlane*)p);
   }
   static void destruct_genfitcLcLMeasuredStateOnPlane(void *p) {
      typedef ::genfit::MeasuredStateOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::MeasuredStateOnPlane

      namespace genfit {
//______________________________________________________________________________
void AbsMeasurement::Streamer(TBuffer &R__b)
{
   // Stream an object of class genfit::AbsMeasurement.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genfit::AbsMeasurement::Class(),this);
   } else {
      R__b.WriteClassBuffer(genfit::AbsMeasurement::Class(),this);
   }
}

} // namespace genfit
//______________________________________________________________________________
      namespace genfit {
void AbsMeasurement::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::AbsMeasurement.
      TClass *R__cl = ::genfit::AbsMeasurement::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawHitCoords_", &rawHitCoords_);
      R__insp.InspectMember(rawHitCoords_, "rawHitCoords_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawHitCov_", &rawHitCov_);
      R__insp.InspectMember(rawHitCov_, "rawHitCov_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detId_", &detId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitId_", &hitId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trackPoint_", &trackPoint_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsMeasurement(void *p) {
      delete ((::genfit::AbsMeasurement*)p);
   }
   static void deleteArray_genfitcLcLAbsMeasurement(void *p) {
      delete [] ((::genfit::AbsMeasurement*)p);
   }
   static void destruct_genfitcLcLAbsMeasurement(void *p) {
      typedef ::genfit::AbsMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genfit::AbsMeasurement

//______________________________________________________________________________
      namespace genfit {
void AbsFitterInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::AbsFitterInfo.
      TClass *R__cl = ::genfit::AbsFitterInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trackPoint_", &trackPoint_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rep_", &rep_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sharedPlane_", (void*)&sharedPlane_);
      R__insp.InspectMember("genfit::SharedPlanePtr", (void*)&sharedPlane_, "sharedPlane_.", true);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsFitterInfo(void *p) {
      delete ((::genfit::AbsFitterInfo*)p);
   }
   static void deleteArray_genfitcLcLAbsFitterInfo(void *p) {
      delete [] ((::genfit::AbsFitterInfo*)p);
   }
   static void destruct_genfitcLcLAbsFitterInfo(void *p) {
      typedef ::genfit::AbsFitterInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_genfitcLcLAbsFitterInfo(TBuffer &buf, void *obj) {
      ((::genfit::AbsFitterInfo*)obj)->::genfit::AbsFitterInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genfit::AbsFitterInfo

//______________________________________________________________________________
      namespace genfit {
void DetPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::DetPlane.
      TClass *R__cl = ::genfit::DetPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "o_", &o_);
      R__insp.InspectMember(o_, "o_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "u_", &u_);
      R__insp.InspectMember(u_, "u_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_", &v_);
      R__insp.InspectMember(v_, "v_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*finitePlane_", &finitePlane_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLDetPlane(void *p) {
      return  p ? new(p) ::genfit::DetPlane : new ::genfit::DetPlane;
   }
   static void *newArray_genfitcLcLDetPlane(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::DetPlane[nElements] : new ::genfit::DetPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLDetPlane(void *p) {
      delete ((::genfit::DetPlane*)p);
   }
   static void deleteArray_genfitcLcLDetPlane(void *p) {
      delete [] ((::genfit::DetPlane*)p);
   }
   static void destruct_genfitcLcLDetPlane(void *p) {
      typedef ::genfit::DetPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_genfitcLcLDetPlane(TBuffer &buf, void *obj) {
      ((::genfit::DetPlane*)obj)->::genfit::DetPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genfit::DetPlane

//______________________________________________________________________________
      namespace genfit {
void MeasurementOnPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::MeasurementOnPlane.
      TClass *R__cl = ::genfit::MeasurementOnPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMatrix_", &hMatrix_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weight_", &weight_);
      //This works around a msvc bug and should be harmless on other platforms
      typedef genfit::MeasuredStateOnPlane baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLMeasurementOnPlane(void *p) {
      return  p ? new(p) ::genfit::MeasurementOnPlane : new ::genfit::MeasurementOnPlane;
   }
   static void *newArray_genfitcLcLMeasurementOnPlane(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::MeasurementOnPlane[nElements] : new ::genfit::MeasurementOnPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLMeasurementOnPlane(void *p) {
      delete ((::genfit::MeasurementOnPlane*)p);
   }
   static void deleteArray_genfitcLcLMeasurementOnPlane(void *p) {
      delete [] ((::genfit::MeasurementOnPlane*)p);
   }
   static void destruct_genfitcLcLMeasurementOnPlane(void *p) {
      typedef ::genfit::MeasurementOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_genfitcLcLMeasurementOnPlane(TBuffer &buf, void *obj) {
      ((::genfit::MeasurementOnPlane*)obj)->::genfit::MeasurementOnPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genfit::MeasurementOnPlane

//______________________________________________________________________________
      namespace genfit {
void StateOnPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::StateOnPlane.
      TClass *R__cl = ::genfit::StateOnPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "state_", &state_);
      R__insp.InspectMember(state_, "state_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "auxInfo_", &auxInfo_);
      R__insp.InspectMember(auxInfo_, "auxInfo_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sharedPlane_", (void*)&sharedPlane_);
      R__insp.InspectMember("genfit::SharedPlanePtr", (void*)&sharedPlane_, "sharedPlane_.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rep_", &rep_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLStateOnPlane(void *p) {
      return  p ? new(p) ::genfit::StateOnPlane : new ::genfit::StateOnPlane;
   }
   static void *newArray_genfitcLcLStateOnPlane(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::StateOnPlane[nElements] : new ::genfit::StateOnPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLStateOnPlane(void *p) {
      delete ((::genfit::StateOnPlane*)p);
   }
   static void deleteArray_genfitcLcLStateOnPlane(void *p) {
      delete [] ((::genfit::StateOnPlane*)p);
   }
   static void destruct_genfitcLcLStateOnPlane(void *p) {
      typedef ::genfit::StateOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_genfitcLcLStateOnPlane(TBuffer &buf, void *obj) {
      ((::genfit::StateOnPlane*)obj)->::genfit::StateOnPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genfit::StateOnPlane

//______________________________________________________________________________
      namespace genfit {
void ThinScatterer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::ThinScatterer.
      TClass *R__cl = ::genfit::ThinScatterer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sharedPlane_", (void*)&sharedPlane_);
      R__insp.InspectMember("genfit::SharedPlanePtr", (void*)&sharedPlane_, "sharedPlane_.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "material_", &material_);
      R__insp.InspectMember(material_, "material_.");
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLThinScatterer(void *p) {
      return  p ? new(p) ::genfit::ThinScatterer : new ::genfit::ThinScatterer;
   }
   static void *newArray_genfitcLcLThinScatterer(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::ThinScatterer[nElements] : new ::genfit::ThinScatterer[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLThinScatterer(void *p) {
      delete ((::genfit::ThinScatterer*)p);
   }
   static void deleteArray_genfitcLcLThinScatterer(void *p) {
      delete [] ((::genfit::ThinScatterer*)p);
   }
   static void destruct_genfitcLcLThinScatterer(void *p) {
      typedef ::genfit::ThinScatterer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_genfitcLcLThinScatterer(TBuffer &buf, void *obj) {
      ((::genfit::ThinScatterer*)obj)->::genfit::ThinScatterer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genfit::ThinScatterer

//______________________________________________________________________________
      namespace genfit {
void Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::Track.
      TClass *R__cl = ::genfit::Track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackReps_", (void*)&trackReps_);
      R__insp.InspectMember("vector<AbsTrackRep*>", (void*)&trackReps_, "trackReps_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cardinalRep_", &cardinalRep_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackPoints_", (void*)&trackPoints_);
      R__insp.InspectMember("vector<genfit::TrackPoint*,allocator<genfit::TrackPoint*> >", (void*)&trackPoints_, "trackPoints_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackPointsWithMeasurement_", (void*)&trackPointsWithMeasurement_);
      R__insp.InspectMember("vector<genfit::TrackPoint*,allocator<genfit::TrackPoint*> >", (void*)&trackPointsWithMeasurement_, "trackPointsWithMeasurement_.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitStatuses_", (void*)&fitStatuses_);
      R__insp.InspectMember("map<const AbsTrackRep*,FitStatus*>", (void*)&fitStatuses_, "fitStatuses_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcTrackId_", &mcTrackId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stateSeed_", &stateSeed_);
      R__insp.InspectMember(stateSeed_, "stateSeed_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "covSeed_", &covSeed_);
      R__insp.InspectMember(covSeed_, "covSeed_.");
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLTrack(void *p) {
      return  p ? new(p) ::genfit::Track : new ::genfit::Track;
   }
   static void *newArray_genfitcLcLTrack(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::Track[nElements] : new ::genfit::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrack(void *p) {
      delete ((::genfit::Track*)p);
   }
   static void deleteArray_genfitcLcLTrack(void *p) {
      delete [] ((::genfit::Track*)p);
   }
   static void destruct_genfitcLcLTrack(void *p) {
      typedef ::genfit::Track current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_genfitcLcLTrack(TBuffer &buf, void *obj) {
      ((::genfit::Track*)obj)->::genfit::Track::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genfit::Track

//______________________________________________________________________________
      namespace genfit {
void TrackPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genfit::TrackPoint.
      TClass *R__cl = ::genfit::TrackPoint::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sortingParameter_", &sortingParameter_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*track_", &track_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawMeasurements_", (void*)&rawMeasurements_);
      R__insp.InspectMember("vector<genfit::AbsMeasurement*,allocator<genfit::AbsMeasurement*> >", (void*)&rawMeasurements_, "rawMeasurements_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitterInfos_", (void*)&fitterInfos_);
      R__insp.InspectMember("map<const AbsTrackRep*,AbsFitterInfo*>", (void*)&fitterInfos_, "fitterInfos_.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vFitterInfos_", (void*)&vFitterInfos_);
      R__insp.InspectMember("vector<genfit::AbsFitterInfo*,allocator<genfit::AbsFitterInfo*> >", (void*)&vFitterInfos_, "vFitterInfos_.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*thinScatterer_", &thinScatterer_);
      TObject::ShowMembers(R__insp);
}

} // namespace genfit
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_genfitcLcLTrackPoint(void *p) {
      return  p ? new(p) ::genfit::TrackPoint : new ::genfit::TrackPoint;
   }
   static void *newArray_genfitcLcLTrackPoint(Long_t nElements, void *p) {
      return p ? new(p) ::genfit::TrackPoint[nElements] : new ::genfit::TrackPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrackPoint(void *p) {
      delete ((::genfit::TrackPoint*)p);
   }
   static void deleteArray_genfitcLcLTrackPoint(void *p) {
      delete [] ((::genfit::TrackPoint*)p);
   }
   static void destruct_genfitcLcLTrackPoint(void *p) {
      typedef ::genfit::TrackPoint current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_genfitcLcLTrackPoint(TBuffer &buf, void *obj) {
      ((::genfit::TrackPoint*)obj)->::genfit::TrackPoint::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genfit::TrackPoint

namespace ROOTDict {
   void maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR_Dictionary();
   static void *new_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p = 0);
   static void *newArray_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(Long_t size, void *p);
   static void delete_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p);
   static void deleteArray_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p);
   static void destruct_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<const genfit::AbsTrackRep*,genfit::FitStatus*>*)
   {
      map<const genfit::AbsTrackRep*,genfit::FitStatus*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<const genfit::AbsTrackRep*,genfit::FitStatus*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<const genfit::AbsTrackRep*,genfit::FitStatus*>", -2, "prec_stl/map", 63,
                  typeid(map<const genfit::AbsTrackRep*,genfit::FitStatus*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<const genfit::AbsTrackRep*,genfit::FitStatus*>) );
      instance.SetNew(&new_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR);
      instance.SetNewArray(&newArray_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR);
      instance.SetDelete(&delete_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR);
      instance.SetDeleteArray(&deleteArray_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR);
      instance.SetDestructor(&destruct_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<const genfit::AbsTrackRep*,genfit::FitStatus*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<const genfit::AbsTrackRep*,genfit::FitStatus*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<const genfit::AbsTrackRep*,genfit::FitStatus*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<const genfit::AbsTrackRep*,genfit::FitStatus*> : new map<const genfit::AbsTrackRep*,genfit::FitStatus*>;
   }
   static void *newArray_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<const genfit::AbsTrackRep*,genfit::FitStatus*>[nElements] : new map<const genfit::AbsTrackRep*,genfit::FitStatus*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p) {
      delete ((map<const genfit::AbsTrackRep*,genfit::FitStatus*>*)p);
   }
   static void deleteArray_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p) {
      delete [] ((map<const genfit::AbsTrackRep*,genfit::FitStatus*>*)p);
   }
   static void destruct_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUgR(void *p) {
      typedef map<const genfit::AbsTrackRep*,genfit::FitStatus*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<const genfit::AbsTrackRep*,genfit::FitStatus*>

namespace ROOTDict {
   void vectorlEgenfitcLcLAbsMeasurementmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLAbsMeasurementmUgR_Dictionary();
   static void *new_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLAbsMeasurementmUgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p);
   static void destruct_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::AbsMeasurement*>*)
   {
      vector<genfit::AbsMeasurement*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::AbsMeasurement*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::AbsMeasurement*>", -2, "prec_stl/vector", 49,
                  typeid(vector<genfit::AbsMeasurement*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLAbsMeasurementmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::AbsMeasurement*>) );
      instance.SetNew(&new_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<genfit::AbsMeasurement*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::AbsMeasurement*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLAbsMeasurementmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<genfit::AbsMeasurement*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsMeasurement*> : new vector<genfit::AbsMeasurement*>;
   }
   static void *newArray_vectorlEgenfitcLcLAbsMeasurementmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsMeasurement*>[nElements] : new vector<genfit::AbsMeasurement*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      delete ((vector<genfit::AbsMeasurement*>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      delete [] ((vector<genfit::AbsMeasurement*>*)p);
   }
   static void destruct_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      typedef vector<genfit::AbsMeasurement*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<genfit::AbsMeasurement*>

namespace ROOTDict {
   void vectorlEgenfitcLcLAbsTrackRepmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLAbsTrackRepmUgR_Dictionary();
   static void *new_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLAbsTrackRepmUgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p);
   static void destruct_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::AbsTrackRep*>*)
   {
      vector<genfit::AbsTrackRep*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::AbsTrackRep*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::AbsTrackRep*>", -2, "prec_stl/vector", 49,
                  typeid(vector<genfit::AbsTrackRep*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLAbsTrackRepmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::AbsTrackRep*>) );
      instance.SetNew(&new_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<genfit::AbsTrackRep*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::AbsTrackRep*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLAbsTrackRepmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<genfit::AbsTrackRep*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsTrackRep*> : new vector<genfit::AbsTrackRep*>;
   }
   static void *newArray_vectorlEgenfitcLcLAbsTrackRepmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsTrackRep*>[nElements] : new vector<genfit::AbsTrackRep*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      delete ((vector<genfit::AbsTrackRep*>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      delete [] ((vector<genfit::AbsTrackRep*>*)p);
   }
   static void destruct_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      typedef vector<genfit::AbsTrackRep*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<genfit::AbsTrackRep*>

namespace ROOTDict {
   void vectorlEgenfitcLcLTrackCandHitmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLTrackCandHitmUgR_Dictionary();
   static void *new_vectorlEgenfitcLcLTrackCandHitmUgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLTrackCandHitmUgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLTrackCandHitmUgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLTrackCandHitmUgR(void *p);
   static void destruct_vectorlEgenfitcLcLTrackCandHitmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::TrackCandHit*>*)
   {
      vector<genfit::TrackCandHit*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::TrackCandHit*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::TrackCandHit*>", -2, "prec_stl/vector", 49,
                  typeid(vector<genfit::TrackCandHit*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLTrackCandHitmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::TrackCandHit*>) );
      instance.SetNew(&new_vectorlEgenfitcLcLTrackCandHitmUgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLTrackCandHitmUgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLTrackCandHitmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLTrackCandHitmUgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLTrackCandHitmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<genfit::TrackCandHit*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::TrackCandHit*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLTrackCandHitmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<genfit::TrackCandHit*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLTrackCandHitmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackCandHit*> : new vector<genfit::TrackCandHit*>;
   }
   static void *newArray_vectorlEgenfitcLcLTrackCandHitmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackCandHit*>[nElements] : new vector<genfit::TrackCandHit*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLTrackCandHitmUgR(void *p) {
      delete ((vector<genfit::TrackCandHit*>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLTrackCandHitmUgR(void *p) {
      delete [] ((vector<genfit::TrackCandHit*>*)p);
   }
   static void destruct_vectorlEgenfitcLcLTrackCandHitmUgR(void *p) {
      typedef vector<genfit::TrackCandHit*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<genfit::TrackCandHit*>

namespace ROOTDict {
   void vectorlEgenfitcLcLTrackPointmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLTrackPointmUgR_Dictionary();
   static void *new_vectorlEgenfitcLcLTrackPointmUgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLTrackPointmUgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLTrackPointmUgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLTrackPointmUgR(void *p);
   static void destruct_vectorlEgenfitcLcLTrackPointmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::TrackPoint*>*)
   {
      vector<genfit::TrackPoint*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::TrackPoint*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::TrackPoint*>", -2, "prec_stl/vector", 49,
                  typeid(vector<genfit::TrackPoint*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLTrackPointmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::TrackPoint*>) );
      instance.SetNew(&new_vectorlEgenfitcLcLTrackPointmUgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLTrackPointmUgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLTrackPointmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLTrackPointmUgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLTrackPointmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<genfit::TrackPoint*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::TrackPoint*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLTrackPointmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<genfit::TrackPoint*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLTrackPointmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackPoint*> : new vector<genfit::TrackPoint*>;
   }
   static void *newArray_vectorlEgenfitcLcLTrackPointmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackPoint*>[nElements] : new vector<genfit::TrackPoint*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLTrackPointmUgR(void *p) {
      delete ((vector<genfit::TrackPoint*>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLTrackPointmUgR(void *p) {
      delete [] ((vector<genfit::TrackPoint*>*)p);
   }
   static void destruct_vectorlEgenfitcLcLTrackPointmUgR(void *p) {
      typedef vector<genfit::TrackPoint*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<genfit::TrackPoint*>

/********************************************************
* /input/FairShipRun/genfit/coreRootDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablecoreRootDict();

extern "C" void G__set_cpp_environmentcoreRootDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/AbsFinitePlane.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/AbsFitterInfo.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/AbsHMatrix.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/AbsTrackRep.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/DetPlane.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/FitStatus.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/MaterialProperties.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/MeasuredStateOnPlane.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/MeasurementFactory.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/MeasurementOnPlane.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/MeasurementProducer.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/StateOnPlane.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/AbsMeasurement.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/ThinScatterer.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/Track.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/TrackCand.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/TrackCandHit.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/TrackPoint.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/FieldManager.h");
  G__add_compiledheader("/input/FairShip/genfit/finitePlanes/include/RectangularFinitePlane.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/AbsFitter.h");
  G__add_compiledheader("/input/FairShip/genfit/core/include/AbsBField.h");
  G__cpp_reset_tagtablecoreRootDict();
}
#include <new>
extern "C" int G__cpp_dllrevcoreRootDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* genfit::AbsFinitePlane */
static int G__coreRootDict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFinitePlane*) G__getstructoffset())->isInActive((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsFinitePlane*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const genfit::AbsFinitePlane*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const genfit::AbsFinitePlane*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::AbsFinitePlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsFinitePlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::AbsFinitePlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::AbsFinitePlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsFinitePlane*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFinitePlane*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFinitePlane*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFinitePlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsFinitePlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsFinitePlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsFinitePlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_169_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsFinitePlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsFinitePlane G__TgenfitcLcLAbsFinitePlane;
static int G__coreRootDict_169_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsFinitePlane*) (soff+(sizeof(genfit::AbsFinitePlane)*i)))->~G__TgenfitcLcLAbsFinitePlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsFinitePlane*) (soff))->~G__TgenfitcLcLAbsFinitePlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::DetPlane */
static int G__coreRootDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::DetPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::DetPlane((genfit::AbsFinitePlane*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genfit::DetPlane((genfit::AbsFinitePlane*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::DetPlane[n];
       } else {
         p = new((void*) gvp) genfit::DetPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::DetPlane;
       } else {
         p = new((void*) gvp) genfit::DetPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::DetPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::DetPlane(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (genfit::AbsFinitePlane*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) genfit::DetPlane(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (genfit::AbsFinitePlane*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::DetPlane(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) genfit::DetPlane(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::DetPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::DetPlane(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (genfit::AbsFinitePlane*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genfit::DetPlane(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (genfit::AbsFinitePlane*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::DetPlane(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) genfit::DetPlane(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::DetPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::DetPlane(*(genfit::DetPlane*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genfit::DetPlane(*(genfit::DetPlane*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::DetPlane& obj = ((genfit::DetPlane*) G__getstructoffset())->operator=(*((genfit::DetPlane*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->swap(*(genfit::DetPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const genfit::DetPlane*) G__getstructoffset())->getO();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const genfit::DetPlane*) G__getstructoffset())->getU();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const genfit::DetPlane*) G__getstructoffset())->getV();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->set(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setO(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setO((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setU(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setU((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setV(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setV((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setUV(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setON(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setFinitePlane((genfit::AbsFinitePlane*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::DetPlane*) G__getstructoffset())->getNormal();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setNormal(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setNormal((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->setNormal(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const genfit::DetPlane*) G__getstructoffset())->project(*(TVector3*) libp->para[0].ref);
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const genfit::DetPlane*) G__getstructoffset())->LabToPlane(*(TVector3*) libp->para[0].ref);
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::DetPlane*) G__getstructoffset())->toLab(*(TVector2*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::DetPlane*) G__getstructoffset())->dist(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const genfit::DetPlane*) G__getstructoffset())->straightLineToPlane(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::DetPlane*) G__getstructoffset())->straightLineToPlane(
*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]), *(double*) G__Doubleref(&libp->para[5])
, *(double*) G__Doubleref(&libp->para[6]), *(double*) G__Doubleref(&libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::DetPlane*) G__getstructoffset())->distance(*(TVector3*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::DetPlane*) G__getstructoffset())->distance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::DetPlane*) G__getstructoffset())->isInActive(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::DetPlane*) G__getstructoffset())->isInActive(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]), *(double*) G__Doubleref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::DetPlane*) G__getstructoffset())->isInActive((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::DetPlane*) G__getstructoffset())->isInActive(*(TVector2*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::DetPlane*) G__getstructoffset())->isFinite());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->rotate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::DetPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::DetPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::DetPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::DetPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::DetPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::DetPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::DetPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::DetPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_222_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::DetPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::DetPlane G__TgenfitcLcLDetPlane;
static int G__coreRootDict_222_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::DetPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::DetPlane*) (soff+(sizeof(genfit::DetPlane)*i)))->~G__TgenfitcLcLDetPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::DetPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::DetPlane*) (soff))->~G__TgenfitcLcLDetPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::MaterialProperties */
static int G__coreRootDict_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MaterialProperties* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MaterialProperties[n];
     } else {
       p = new((void*) gvp) genfit::MaterialProperties[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MaterialProperties;
     } else {
       p = new((void*) gvp) genfit::MaterialProperties;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MaterialProperties* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::MaterialProperties(
*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]));
   } else {
     p = new((void*) gvp) genfit::MaterialProperties(
*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::MaterialProperties*) G__getstructoffset())->getDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::MaterialProperties*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::MaterialProperties*) G__getstructoffset())->getA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::MaterialProperties*) G__getstructoffset())->getRadLen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::MaterialProperties*) G__getstructoffset())->getMEE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::MaterialProperties*) G__getstructoffset())->getMaterialProperties(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MaterialProperties*) G__getstructoffset())->setMaterialProperties(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::MaterialProperties::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MaterialProperties::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::MaterialProperties::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::MaterialProperties::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MaterialProperties*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MaterialProperties::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::MaterialProperties::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MaterialProperties::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_224_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::MaterialProperties::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__coreRootDict_224_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::MaterialProperties* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::MaterialProperties(*(genfit::MaterialProperties*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::MaterialProperties G__TgenfitcLcLMaterialProperties;
static int G__coreRootDict_224_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::MaterialProperties*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::MaterialProperties*) (soff+(sizeof(genfit::MaterialProperties)*i)))->~G__TgenfitcLcLMaterialProperties();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::MaterialProperties*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::MaterialProperties*) (soff))->~G__TgenfitcLcLMaterialProperties();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__coreRootDict_224_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MaterialProperties* dest = (genfit::MaterialProperties*) G__getstructoffset();
   *dest = *(genfit::MaterialProperties*) libp->para[0].ref;
   const genfit::MaterialProperties& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::StateOnPlane */
static int G__coreRootDict_264_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::StateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::StateOnPlane((genfit::AbsTrackRep*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genfit::StateOnPlane((genfit::AbsTrackRep*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::StateOnPlane[n];
       } else {
         p = new((void*) gvp) genfit::StateOnPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::StateOnPlane;
       } else {
         p = new((void*) gvp) genfit::StateOnPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::StateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::StateOnPlane(
*(TVectorD*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) genfit::StateOnPlane(
*(TVectorD*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::StateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::StateOnPlane(
*(TVectorD*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref
, (genfit::AbsTrackRep*) G__int(libp->para[2]), *(TVectorD*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) genfit::StateOnPlane(
*(TVectorD*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref
, (genfit::AbsTrackRep*) G__int(libp->para[2]), *(TVectorD*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::StateOnPlane& obj = ((genfit::StateOnPlane*) G__getstructoffset())->operator=(*((genfit::StateOnPlane*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->swap(*(genfit::StateOnPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD& obj = ((const genfit::StateOnPlane*) G__getstructoffset())->getState();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD& obj = ((genfit::StateOnPlane*) G__getstructoffset())->getState();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD& obj = ((const genfit::StateOnPlane*) G__getstructoffset())->getAuxInfo();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD& obj = ((genfit::StateOnPlane*) G__getstructoffset())->getAuxInfo();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::SharedPlanePtr& obj = ((const genfit::StateOnPlane*) G__getstructoffset())->getPlane();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::StateOnPlane*) G__getstructoffset())->getRep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setState(*(TVectorD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setPlane(*(genfit::SharedPlanePtr*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setStatePlane(*(TVectorD*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setAuxInfo(*(TVectorD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setRep((genfit::AbsTrackRep*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPlane(*(genfit::SharedPlanePtr*) libp->para[0].ref, (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPlane(*(genfit::SharedPlanePtr*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPlane(*(genfit::SharedPlanePtr*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToLine(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToLine(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToLine(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPoint(*(TVector3*) libp->para[0].ref, (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPoint(*(TVector3*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPoint(*(TVector3*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPoint(*(TVector3*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPoint(*(TVector3*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToPoint(*(TVector3*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToCylinder((double) G__double(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToCylinder((double) G__double(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToCylinder((double) G__double(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToCylinder((double) G__double(libp->para[0]), *(TVector3*) libp->para[1].ref));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToCylinder((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToSphere((double) G__double(libp->para[0]), *(TVector3*) libp->para[1].ref
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToSphere((double) G__double(libp->para[0]), *(TVector3*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToSphere((double) G__double(libp->para[0]), *(TVector3*) libp->para[1].ref));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToSphere((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateBy((double) G__double(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateBy((double) G__double(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateBy((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToMeasurement((genfit::AbsMeasurement*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToMeasurement((genfit::AbsMeasurement*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((genfit::StateOnPlane*) G__getstructoffset())->extrapolateToMeasurement((genfit::AbsMeasurement*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::StateOnPlane*) G__getstructoffset())->getPos();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::StateOnPlane*) G__getstructoffset())->getMom();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::StateOnPlane*) G__getstructoffset())->getDir();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::StateOnPlane*) G__getstructoffset())->getPosMom(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::StateOnPlane*) G__getstructoffset())->getPosDir(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD* pobj;
         const TVectorD xobj = ((const genfit::StateOnPlane*) G__getstructoffset())->get6DState();
         pobj = new TVectorD(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::StateOnPlane*) G__getstructoffset())->getMomMag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::StateOnPlane*) G__getstructoffset())->getPDG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::StateOnPlane*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::StateOnPlane*) G__getstructoffset())->getQop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::StateOnPlane*) G__getstructoffset())->getMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setPosMom(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setPosMom(*(TVectorD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setChargeSign((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->setQop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::StateOnPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::StateOnPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::StateOnPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::StateOnPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::StateOnPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::StateOnPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::StateOnPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::StateOnPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_264_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::StateOnPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__coreRootDict_264_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::StateOnPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::StateOnPlane(*(genfit::StateOnPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::StateOnPlane G__TgenfitcLcLStateOnPlane;
static int G__coreRootDict_264_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::StateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::StateOnPlane*) (soff+(sizeof(genfit::StateOnPlane)*i)))->~G__TgenfitcLcLStateOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::StateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::StateOnPlane*) (soff))->~G__TgenfitcLcLStateOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::MeasuredStateOnPlane */
static int G__coreRootDict_265_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasuredStateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MeasuredStateOnPlane((genfit::AbsTrackRep*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genfit::MeasuredStateOnPlane((genfit::AbsTrackRep*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::MeasuredStateOnPlane[n];
       } else {
         p = new((void*) gvp) genfit::MeasuredStateOnPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::MeasuredStateOnPlane;
       } else {
         p = new((void*) gvp) genfit::MeasuredStateOnPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasuredStateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::MeasuredStateOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *(genfit::SharedPlanePtr*) libp->para[2].ref, (genfit::AbsTrackRep*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) genfit::MeasuredStateOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *(genfit::SharedPlanePtr*) libp->para[2].ref, (genfit::AbsTrackRep*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasuredStateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::MeasuredStateOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *(genfit::SharedPlanePtr*) libp->para[2].ref, (genfit::AbsTrackRep*) G__int(libp->para[3])
, *(TVectorD*) libp->para[4].ref);
   } else {
     p = new((void*) gvp) genfit::MeasuredStateOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *(genfit::SharedPlanePtr*) libp->para[2].ref, (genfit::AbsTrackRep*) G__int(libp->para[3])
, *(TVectorD*) libp->para[4].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasuredStateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::MeasuredStateOnPlane(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genfit::MeasuredStateOnPlane(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasuredStateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::MeasuredStateOnPlane(*(genfit::StateOnPlane*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) genfit::MeasuredStateOnPlane(*(genfit::StateOnPlane*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::MeasuredStateOnPlane& obj = ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->operator=(*((genfit::MeasuredStateOnPlane*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->swap(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixDSym& obj = ((const genfit::MeasuredStateOnPlane*) G__getstructoffset())->getCov();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixDSym& obj = ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->getCov();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->blowUpCov((double) G__double(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->blowUpCov((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->setStateCov(*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->setStateCovPlane(*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *(genfit::SharedPlanePtr*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->setCov(*(TMatrixDSym*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixDSym* pobj;
         const TMatrixDSym xobj = ((const genfit::MeasuredStateOnPlane*) G__getstructoffset())->get6DCov();
         pobj = new TMatrixDSym(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::MeasuredStateOnPlane*) G__getstructoffset())->getPosMomCov(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::MeasuredStateOnPlane*) G__getstructoffset())->get6DStateCov(*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::MeasuredStateOnPlane*) G__getstructoffset())->getMomVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->setPosMomErr(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->setPosMomCov(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->setPosMomCov(*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::MeasuredStateOnPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MeasuredStateOnPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::MeasuredStateOnPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::MeasuredStateOnPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasuredStateOnPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MeasuredStateOnPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::MeasuredStateOnPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MeasuredStateOnPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_265_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::MeasuredStateOnPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::MeasuredStateOnPlane G__TgenfitcLcLMeasuredStateOnPlane;
static int G__coreRootDict_265_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::MeasuredStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::MeasuredStateOnPlane*) (soff+(sizeof(genfit::MeasuredStateOnPlane)*i)))->~G__TgenfitcLcLMeasuredStateOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::MeasuredStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::MeasuredStateOnPlane*) (soff))->~G__TgenfitcLcLMeasuredStateOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsMeasurement */
static int G__coreRootDict_266_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsMeasurement*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsMeasurement*) G__getstructoffset())->getTrackPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsMeasurement*) G__getstructoffset())->setTrackPoint((genfit::TrackPoint*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD& obj = ((const genfit::AbsMeasurement*) G__getstructoffset())->getRawHitCoords();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixDSym& obj = ((const genfit::AbsMeasurement*) G__getstructoffset())->getRawHitCov();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::AbsMeasurement*) G__getstructoffset())->getDetId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::AbsMeasurement*) G__getstructoffset())->getHitId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::AbsMeasurement*) G__getstructoffset())->getDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsMeasurement*) G__getstructoffset())->setDetId((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsMeasurement*) G__getstructoffset())->setHitId((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::SharedPlanePtr* pobj;
         const genfit::SharedPlanePtr xobj = ((const genfit::AbsMeasurement*) G__getstructoffset())->constructPlane(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new genfit::SharedPlanePtr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<genfit::MeasurementOnPlane*>* pobj;
         const vector<genfit::MeasurementOnPlane*> xobj = ((const genfit::AbsMeasurement*) G__getstructoffset())->constructMeasurementsOnPlane(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new vector<genfit::MeasurementOnPlane*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsMeasurement*) G__getstructoffset())->constructHMatrix((genfit::AbsTrackRep*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::AbsMeasurement::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsMeasurement::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::AbsMeasurement::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::AbsMeasurement::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsMeasurement*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsMeasurement::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsMeasurement::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsMeasurement::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_266_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsMeasurement::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsMeasurement G__TgenfitcLcLAbsMeasurement;
static int G__coreRootDict_266_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsMeasurement*) (soff+(sizeof(genfit::AbsMeasurement)*i)))->~G__TgenfitcLcLAbsMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsMeasurement*) (soff))->~G__TgenfitcLcLAbsMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsTrackRep */
static int G__coreRootDict_267_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsTrackRep*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPlane(*(genfit::StateOnPlane*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPlane(*(genfit::StateOnPlane*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPlane(*(genfit::StateOnPlane*) libp->para[0].ref, *(genfit::SharedPlanePtr*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(
*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref
, *(TVector3*) libp->para[4].ref, *(TVector3*) libp->para[5].ref
, (bool) G__int(libp->para[6]), (bool) G__int(libp->para[7])));
      break;
   case 7:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(
*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref
, *(TVector3*) libp->para[4].ref, *(TVector3*) libp->para[5].ref
, (bool) G__int(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref
, *(TVector3*) libp->para[4].ref, *(TVector3*) libp->para[5].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref, (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref, (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToCylinder(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref
, (bool) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToCylinder(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToCylinder(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToCylinder(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToCylinder(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToSphere(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref, (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToSphere(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref, (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToSphere(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToSphere(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateBy(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateBy(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateBy(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToMeasurement(*(genfit::StateOnPlane*) libp->para[0].ref, (genfit::AbsMeasurement*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToMeasurement(*(genfit::StateOnPlane*) libp->para[0].ref, (genfit::AbsMeasurement*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToMeasurement(*(genfit::StateOnPlane*) libp->para[0].ref, (genfit::AbsMeasurement*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::AbsTrackRep*) G__getstructoffset())->getDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->getPos(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->getMom(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->getDir(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->getPosMom(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->getPosDir(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD* pobj;
         const TVectorD xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->get6DState(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new TVectorD(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixDSym* pobj;
         const TMatrixDSym xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->get6DCov(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref);
         pobj = new TMatrixDSym(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->getPosMomCov(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(TMatrixDSym*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->get6DStateCov(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref, *(TVectorD*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getMomMag(*(genfit::StateOnPlane*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getMomVar(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::AbsTrackRep*) G__getstructoffset())->getPDG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getPDGCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getCharge(*(genfit::StateOnPlane*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getQop(*(genfit::StateOnPlane*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getMass(*(genfit::StateOnPlane*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const genfit::AbsTrackRep*) G__getstructoffset())->getPropDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->getForwardJacobianAndNoise(*(TMatrixD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *(TVectorD*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->getBackwardJacobianAndNoise(*(TMatrixD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *(TVectorD*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<genfit::MatStep>* pobj;
         const vector<genfit::MatStep> xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->getSteps();
         pobj = new vector<genfit::MatStep>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getRadiationLenght());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->getTOF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->calcJacobianNumerically(*(genfit::StateOnPlane*) libp->para[0].ref, *((const genfit::SharedPlanePtr*) G__int(libp->para[1]))
, *(TMatrixD*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genfit::AbsTrackRep*) G__getstructoffset())->switchPDGSign());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->setPosMom(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->setPosMom(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVectorD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->setPosMomErr(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref
, *(TVector3*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->setPosMomCov(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(TMatrixDSym*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->setPosMomCov(*(genfit::MeasuredStateOnPlane*) libp->para[0].ref, *(TVectorD*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->setChargeSign(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsTrackRep*) G__getstructoffset())->setQop(*(genfit::StateOnPlane*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsTrackRep*) G__getstructoffset())->setPropDir((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsTrackRep*) G__getstructoffset())->switchPropDir();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genfit::AbsTrackRep*) G__getstructoffset())->isSameType((genfit::AbsTrackRep*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genfit::AbsTrackRep*) G__getstructoffset())->isSame((genfit::AbsTrackRep*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::AbsTrackRep*) G__getstructoffset())->setDebugLvl((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::AbsTrackRep*) G__getstructoffset())->setDebugLvl();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::AbsTrackRep::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsTrackRep::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::AbsTrackRep::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::AbsTrackRep::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsTrackRep*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsTrackRep::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsTrackRep::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsTrackRep::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_267_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsTrackRep::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsTrackRep G__TgenfitcLcLAbsTrackRep;
static int G__coreRootDict_267_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsTrackRep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsTrackRep*) (soff+(sizeof(genfit::AbsTrackRep)*i)))->~G__TgenfitcLcLAbsTrackRep();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsTrackRep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsTrackRep*) (soff))->~G__TgenfitcLcLAbsTrackRep();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsHMatrix */
static int G__coreRootDict_272_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixD& obj = ((const genfit::AbsHMatrix*) G__getstructoffset())->getMatrix();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD* pobj;
         const TVectorD xobj = ((const genfit::AbsHMatrix*) G__getstructoffset())->Hv(*(TVectorD*) libp->para[0].ref);
         pobj = new TVectorD(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixD* pobj;
         const TMatrixD xobj = ((const genfit::AbsHMatrix*) G__getstructoffset())->MHt(*(TMatrixDSym*) libp->para[0].ref);
         pobj = new TMatrixD(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixD* pobj;
         const TMatrixD xobj = ((const genfit::AbsHMatrix*) G__getstructoffset())->MHt(*(TMatrixD*) libp->para[0].ref);
         pobj = new TMatrixD(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsHMatrix*) G__getstructoffset())->HMHt(*(TMatrixDSym*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsHMatrix*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsHMatrix*) G__getstructoffset())->operator==(*(genfit::AbsHMatrix*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsHMatrix*) G__getstructoffset())->operator!=(*(genfit::AbsHMatrix*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsHMatrix*) G__getstructoffset())->isEqual(*(genfit::AbsHMatrix*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::AbsHMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsHMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::AbsHMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::AbsHMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsHMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsHMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsHMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsHMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_272_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsHMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsHMatrix G__TgenfitcLcLAbsHMatrix;
static int G__coreRootDict_272_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsHMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsHMatrix*) (soff+(sizeof(genfit::AbsHMatrix)*i)))->~G__TgenfitcLcLAbsHMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsHMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsHMatrix*) (soff))->~G__TgenfitcLcLAbsHMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::MeasurementOnPlane */
static int G__coreRootDict_273_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasurementOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MeasurementOnPlane((genfit::AbsTrackRep*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genfit::MeasurementOnPlane((genfit::AbsTrackRep*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::MeasurementOnPlane[n];
       } else {
         p = new((void*) gvp) genfit::MeasurementOnPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::MeasurementOnPlane;
       } else {
         p = new((void*) gvp) genfit::MeasurementOnPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasurementOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MeasurementOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *((genfit::SharedPlanePtr*) G__int(libp->para[2])), (genfit::AbsTrackRep*) G__int(libp->para[3])
, (genfit::AbsHMatrix*) G__int(libp->para[4]), (double) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) genfit::MeasurementOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *((genfit::SharedPlanePtr*) G__int(libp->para[2])), (genfit::AbsTrackRep*) G__int(libp->para[3])
, (genfit::AbsHMatrix*) G__int(libp->para[4]), (double) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MeasurementOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *((genfit::SharedPlanePtr*) G__int(libp->para[2])), (genfit::AbsTrackRep*) G__int(libp->para[3])
, (genfit::AbsHMatrix*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) genfit::MeasurementOnPlane(
*(TVectorD*) libp->para[0].ref, *(TMatrixDSym*) libp->para[1].ref
, *((genfit::SharedPlanePtr*) G__int(libp->para[2])), (genfit::AbsTrackRep*) G__int(libp->para[3])
, (genfit::AbsHMatrix*) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasurementOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::MeasurementOnPlane(*(genfit::MeasurementOnPlane*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genfit::MeasurementOnPlane(*(genfit::MeasurementOnPlane*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::MeasurementOnPlane& obj = ((genfit::MeasurementOnPlane*) G__getstructoffset())->operator=(*((genfit::MeasurementOnPlane*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasurementOnPlane*) G__getstructoffset())->swap(*(genfit::MeasurementOnPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::MeasurementOnPlane*) G__getstructoffset())->getHMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::MeasurementOnPlane*) G__getstructoffset())->getWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TMatrixDSym* pobj;
         TMatrixDSym xobj = ((genfit::MeasurementOnPlane*) G__getstructoffset())->getWeightedCov();
         pobj = new TMatrixDSym(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasurementOnPlane*) G__getstructoffset())->setHMatrix((genfit::AbsHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasurementOnPlane*) G__getstructoffset())->setWeight((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::MeasurementOnPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MeasurementOnPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::MeasurementOnPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::MeasurementOnPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::MeasurementOnPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MeasurementOnPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::MeasurementOnPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::MeasurementOnPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_273_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::MeasurementOnPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::MeasurementOnPlane G__TgenfitcLcLMeasurementOnPlane;
static int G__coreRootDict_273_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::MeasurementOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::MeasurementOnPlane*) (soff+(sizeof(genfit::MeasurementOnPlane)*i)))->~G__TgenfitcLcLMeasurementOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::MeasurementOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::MeasurementOnPlane*) (soff))->~G__TgenfitcLcLMeasurementOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::TrackPoint */
static int G__coreRootDict_274_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackPoint[n];
     } else {
       p = new((void*) gvp) genfit::TrackPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackPoint;
     } else {
       p = new((void*) gvp) genfit::TrackPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::TrackPoint((genfit::Track*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genfit::TrackPoint((genfit::Track*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::TrackPoint(*(vector<genfit::AbsMeasurement*>*) libp->para[0].ref, (genfit::Track*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) genfit::TrackPoint(*(vector<genfit::AbsMeasurement*>*) libp->para[0].ref, (genfit::Track*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::TrackPoint((genfit::AbsMeasurement*) G__int(libp->para[0]), (genfit::Track*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) genfit::TrackPoint((genfit::AbsMeasurement*) G__int(libp->para[0]), (genfit::Track*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::TrackPoint(*(genfit::TrackPoint*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genfit::TrackPoint(*(genfit::TrackPoint*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::TrackPoint& obj = ((genfit::TrackPoint*) G__getstructoffset())->operator=(*((genfit::TrackPoint*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->swap(*(genfit::TrackPoint*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackPoint(
*(genfit::TrackPoint*) libp->para[0].ref, *(map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*>*) libp->para[1].ref
, (vector<const genfit::AbsTrackRep*>*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genfit::TrackPoint(
*(genfit::TrackPoint*) libp->para[0].ref, *(map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*>*) libp->para[1].ref
, (vector<const genfit::AbsTrackRep*>*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackPoint(*(genfit::TrackPoint*) libp->para[0].ref, *(map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*>*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) genfit::TrackPoint(*(genfit::TrackPoint*) libp->para[0].ref, *(map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*>*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::TrackPoint*) G__getstructoffset())->getSortingParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->setTrack((genfit::Track*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<genfit::AbsMeasurement*>& obj = ((const genfit::TrackPoint*) G__getstructoffset())->getRawMeasurements();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getRawMeasurement((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getRawMeasurement());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getNumRawMeasurements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::TrackPoint*) G__getstructoffset())->hasRawMeasurements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<genfit::AbsFitterInfo*>* pobj;
         const vector<genfit::AbsFitterInfo*> xobj = ((const genfit::TrackPoint*) G__getstructoffset())->getFitterInfos();
         pobj = new vector<genfit::AbsFitterInfo*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getFitterInfo((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getFitterInfo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getKalmanFitterInfo((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const genfit::TrackPoint*) G__getstructoffset())->getKalmanFitterInfo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::TrackPoint*) G__getstructoffset())->hasFitterInfo((genfit::AbsTrackRep*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genfit::TrackPoint*) G__getstructoffset())->getMaterialInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genfit::TrackPoint*) G__getstructoffset())->hasThinScatterer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->setSortingParameter((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->addRawMeasurement((genfit::AbsMeasurement*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->deleteRawMeasurements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->setFitterInfo((genfit::AbsFitterInfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->deleteFitterInfo((genfit::AbsTrackRep*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->setScatterer((genfit::ThinScatterer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->fixupRepsForReading();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::TrackPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::TrackPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::TrackPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::TrackPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_274_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::TrackPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::TrackPoint G__TgenfitcLcLTrackPoint;
static int G__coreRootDict_274_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::TrackPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::TrackPoint*) (soff+(sizeof(genfit::TrackPoint)*i)))->~G__TgenfitcLcLTrackPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::TrackPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::TrackPoint*) (soff))->~G__TgenfitcLcLTrackPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsFitterInfo */
static int G__coreRootDict_275_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->getTrackPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->getRep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->setTrackPoint((genfit::TrackPoint*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->setRep((genfit::AbsTrackRep*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasMeasurements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasReferenceState());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasForwardPrediction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasBackwardPrediction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasPrediction((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasForwardUpdate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasBackwardUpdate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->hasUpdate((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->deleteForwardInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->deleteBackwardInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->deleteReferenceInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->deleteMeasurementInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::SharedPlanePtr& obj = ((const genfit::AbsFitterInfo*) G__getstructoffset())->getPlane();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const genfit::MeasuredStateOnPlane& obj = ((const genfit::AbsFitterInfo*) G__getstructoffset())->getFittedState((bool) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 0:
      {
         const genfit::MeasuredStateOnPlane& obj = ((const genfit::AbsFitterInfo*) G__getstructoffset())->getFittedState();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const genfit::MeasurementOnPlane* pobj;
         const genfit::MeasurementOnPlane xobj = ((const genfit::AbsFitterInfo*) G__getstructoffset())->getResidual((unsigned int) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
         pobj = new genfit::MeasurementOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const genfit::MeasurementOnPlane* pobj;
         const genfit::MeasurementOnPlane xobj = ((const genfit::AbsFitterInfo*) G__getstructoffset())->getResidual((unsigned int) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new genfit::MeasurementOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const genfit::MeasurementOnPlane* pobj;
         const genfit::MeasurementOnPlane xobj = ((const genfit::AbsFitterInfo*) G__getstructoffset())->getResidual((unsigned int) G__int(libp->para[0]));
         pobj = new genfit::MeasurementOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const genfit::MeasurementOnPlane* pobj;
         const genfit::MeasurementOnPlane xobj = ((const genfit::AbsFitterInfo*) G__getstructoffset())->getResidual();
         pobj = new genfit::MeasurementOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->setPlane(*(genfit::SharedPlanePtr*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::AbsFitterInfo*) G__getstructoffset())->checkConsistency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::AbsFitterInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsFitterInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::AbsFitterInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::AbsFitterInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::AbsFitterInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsFitterInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsFitterInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::AbsFitterInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_275_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::AbsFitterInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsFitterInfo G__TgenfitcLcLAbsFitterInfo;
static int G__coreRootDict_275_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsFitterInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsFitterInfo*) (soff+(sizeof(genfit::AbsFitterInfo)*i)))->~G__TgenfitcLcLAbsFitterInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsFitterInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsFitterInfo*) (soff))->~G__TgenfitcLcLAbsFitterInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::FitStatus */
static int G__coreRootDict_277_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::FitStatus* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::FitStatus[n];
     } else {
       p = new((void*) gvp) genfit::FitStatus[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::FitStatus;
     } else {
       p = new((void*) gvp) genfit::FitStatus;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::FitStatus*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::FitStatus*) G__getstructoffset())->isFitted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const genfit::FitStatus*) G__getstructoffset())->isFitConverged((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const genfit::FitStatus*) G__getstructoffset())->isFitConverged());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::FitStatus*) G__getstructoffset())->isFitConvergedFully());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::FitStatus*) G__getstructoffset())->isFitConvergedPartially());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::FitStatus*) G__getstructoffset())->getNFailedPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::FitStatus*) G__getstructoffset())->hasTrackChanged());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::FitStatus*) G__getstructoffset())->isTrackPruned());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::FitStatus*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::FitStatus*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::FitStatus*) G__getstructoffset())->getNdf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::FitStatus*) G__getstructoffset())->getPVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::FitStatus*) G__getstructoffset())->setIsFitted((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::FitStatus*) G__getstructoffset())->setIsFitted();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::FitStatus*) G__getstructoffset())->setIsFitConvergedFully((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::FitStatus*) G__getstructoffset())->setIsFitConvergedFully();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::FitStatus*) G__getstructoffset())->setIsFitConvergedPartially((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::FitStatus*) G__getstructoffset())->setIsFitConvergedPartially();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FitStatus*) G__getstructoffset())->setNFailedPoints((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::FitStatus*) G__getstructoffset())->setHasTrackChanged((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::FitStatus*) G__getstructoffset())->setHasTrackChanged();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::FitStatus*) G__getstructoffset())->setIsTrackPruned((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::FitStatus*) G__getstructoffset())->setIsTrackPruned();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FitStatus*) G__getstructoffset())->setCharge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FitStatus*) G__getstructoffset())->setChi2(*(double*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FitStatus*) G__getstructoffset())->setNdf(*(double*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const genfit::FitStatus*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const genfit::FitStatus*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::FitStatus::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::FitStatus::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::FitStatus::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::FitStatus::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::FitStatus*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FitStatus*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FitStatus*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FitStatus*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::FitStatus::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::FitStatus::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::FitStatus::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_277_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::FitStatus::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__coreRootDict_277_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::FitStatus* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::FitStatus(*(genfit::FitStatus*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::FitStatus G__TgenfitcLcLFitStatus;
static int G__coreRootDict_277_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::FitStatus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::FitStatus*) (soff+(sizeof(genfit::FitStatus)*i)))->~G__TgenfitcLcLFitStatus();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::FitStatus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::FitStatus*) (soff))->~G__TgenfitcLcLFitStatus();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__coreRootDict_277_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::FitStatus* dest = (genfit::FitStatus*) G__getstructoffset();
   *dest = *(genfit::FitStatus*) libp->para[0].ref;
   const genfit::FitStatus& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::TrackCandHit */
static int G__coreRootDict_287_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackCandHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCandHit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) genfit::TrackCandHit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCandHit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genfit::TrackCandHit(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCandHit((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genfit::TrackCandHit((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCandHit((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genfit::TrackCandHit((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::TrackCandHit[n];
       } else {
         p = new((void*) gvp) genfit::TrackCandHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genfit::TrackCandHit;
       } else {
         p = new((void*) gvp) genfit::TrackCandHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::TrackCandHit*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::TrackCandHit*) G__getstructoffset())->getDetId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::TrackCandHit*) G__getstructoffset())->getHitId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::TrackCandHit*) G__getstructoffset())->getPlaneId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::TrackCandHit*) G__getstructoffset())->getSortingParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCandHit*) G__getstructoffset())->setSortingParameter((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::TrackCandHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackCandHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::TrackCandHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::TrackCandHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCandHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackCandHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::TrackCandHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackCandHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_287_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::TrackCandHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::TrackCandHit G__TgenfitcLcLTrackCandHit;
static int G__coreRootDict_287_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::TrackCandHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::TrackCandHit*) (soff+(sizeof(genfit::TrackCandHit)*i)))->~G__TgenfitcLcLTrackCandHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::TrackCandHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::TrackCandHit*) (soff))->~G__TgenfitcLcLTrackCandHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::TrackCand */
static int G__coreRootDict_366_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackCand* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCand[n];
     } else {
       p = new((void*) gvp) genfit::TrackCand[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCand;
     } else {
       p = new((void*) gvp) genfit::TrackCand;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackCand* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::TrackCand(*(genfit::TrackCand*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genfit::TrackCand(*(genfit::TrackCand*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::TrackCand& obj = ((genfit::TrackCand*) G__getstructoffset())->operator=(*((genfit::TrackCand*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->swap(*(genfit::TrackCand*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) genfit::TrackCand::compareTrackCandHits((genfit::TrackCandHit*) G__int(libp->para[0]), (genfit::TrackCandHit*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::TrackCand*) G__getstructoffset())->getHit((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::TrackCand*) G__getstructoffset())->getHit((int) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::TrackCand*) G__getstructoffset())->getHit((int) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::TrackCand*) G__getstructoffset())->getHitWithPlane((int) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1])
, *(int*) G__Intref(&libp->para[2]), *(int*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::TrackCand*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const genfit::TrackCand*) G__getstructoffset())->getHitIDs((int) G__int(libp->para[0]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const genfit::TrackCand*) G__getstructoffset())->getHitIDs();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const genfit::TrackCand*) G__getstructoffset())->getDetIDs();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double>* pobj;
         const vector<double> xobj = ((const genfit::TrackCand*) G__getstructoffset())->getSortingParameters();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const set<int>* pobj;
         const set<int> xobj = ((const genfit::TrackCand*) G__getstructoffset())->getUniqueDetIDs();
         pobj = new set<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::TrackCand*) G__getstructoffset())->getMcTrackId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::TrackCand*) G__getstructoffset())->getPosSeed();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::TrackCand*) G__getstructoffset())->getMomSeed();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->setCovSeed(*(TMatrixDSym*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixDSym& obj = ((const genfit::TrackCand*) G__getstructoffset())->getCovSeed();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD& obj = ((const genfit::TrackCand*) G__getstructoffset())->getStateSeed();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::TrackCand*) G__getstructoffset())->getChargeSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::TrackCand*) G__getstructoffset())->getPdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::TrackCand*) G__getstructoffset())->hitInTrack((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((genfit::TrackCand*) G__getstructoffset())->addHit((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((genfit::TrackCand*) G__getstructoffset())->addHit((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::TrackCand*) G__getstructoffset())->addHit((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->addHit((genfit::TrackCandHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->setMcTrackId((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->setPdgCode((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->append(*(genfit::TrackCand*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->sortHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->sortHits(*(vector<unsigned int>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->set6DSeed(*(TVectorD*) libp->para[0].ref, (const double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->set6DSeedAndPdgCode(*(TVectorD*) libp->para[0].ref, (const int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->setPosMomSeed(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (const double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->setPosMomSeedAndPdgCode(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (const int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::TrackCand::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackCand::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::TrackCand::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::TrackCand::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::TrackCand*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackCand::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::TrackCand::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::TrackCand::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_366_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::TrackCand::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::TrackCand G__TgenfitcLcLTrackCand;
static int G__coreRootDict_366_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::TrackCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::TrackCand*) (soff+(sizeof(genfit::TrackCand)*i)))->~G__TgenfitcLcLTrackCand();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::TrackCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::TrackCand*) (soff))->~G__TgenfitcLcLTrackCand();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::ThinScatterer */
static int G__coreRootDict_604_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::ThinScatterer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::ThinScatterer[n];
     } else {
       p = new((void*) gvp) genfit::ThinScatterer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::ThinScatterer;
     } else {
       p = new((void*) gvp) genfit::ThinScatterer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::ThinScatterer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::ThinScatterer(*(genfit::SharedPlanePtr*) libp->para[0].ref, *(genfit::MaterialProperties*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) genfit::ThinScatterer(*(genfit::SharedPlanePtr*) libp->para[0].ref, *(genfit::MaterialProperties*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::SharedPlanePtr* pobj;
         const genfit::SharedPlanePtr xobj = ((const genfit::ThinScatterer*) G__getstructoffset())->getPlane();
         pobj = new genfit::SharedPlanePtr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::MaterialProperties& obj = ((const genfit::ThinScatterer*) G__getstructoffset())->getMaterial();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::ThinScatterer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::ThinScatterer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::ThinScatterer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::ThinScatterer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::ThinScatterer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::ThinScatterer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::ThinScatterer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::ThinScatterer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_604_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::ThinScatterer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__coreRootDict_604_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::ThinScatterer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::ThinScatterer(*(genfit::ThinScatterer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::ThinScatterer G__TgenfitcLcLThinScatterer;
static int G__coreRootDict_604_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::ThinScatterer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::ThinScatterer*) (soff+(sizeof(genfit::ThinScatterer)*i)))->~G__TgenfitcLcLThinScatterer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::ThinScatterer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::ThinScatterer*) (soff))->~G__TgenfitcLcLThinScatterer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__coreRootDict_604_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::ThinScatterer* dest = (genfit::ThinScatterer*) G__getstructoffset();
   *dest = *(genfit::ThinScatterer*) libp->para[0].ref;
   const genfit::ThinScatterer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::Track */
static int G__coreRootDict_605_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::Track[n];
     } else {
       p = new((void*) gvp) genfit::Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::Track;
     } else {
       p = new((void*) gvp) genfit::Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::Track(
*(genfit::TrackCand*) libp->para[0].ref, *(genfit::MeasurementFactory<genfit::AbsMeasurement>*) libp->para[1].ref
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genfit::Track(
*(genfit::TrackCand*) libp->para[0].ref, *(genfit::MeasurementFactory<genfit::AbsMeasurement>*) libp->para[1].ref
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::Track(*(genfit::TrackCand*) libp->para[0].ref, *(genfit::MeasurementFactory<genfit::AbsMeasurement>*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) genfit::Track(*(genfit::TrackCand*) libp->para[0].ref, *(genfit::MeasurementFactory<genfit::AbsMeasurement>*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::Track((genfit::AbsTrackRep*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) genfit::Track((genfit::AbsTrackRep*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::Track(
(genfit::AbsTrackRep*) G__int(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) genfit::Track(
(genfit::AbsTrackRep*) G__int(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::Track(
(genfit::AbsTrackRep*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) genfit::Track(
(genfit::AbsTrackRep*) G__int(libp->para[0]), *(TVectorD*) libp->para[1].ref
, *(TMatrixDSym*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::Track(*(genfit::Track*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genfit::Track(*(genfit::Track*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genfit::Track& obj = ((genfit::Track*) G__getstructoffset())->operator=(*((genfit::Track*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->swap(*(genfit::Track*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getPoint((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<genfit::TrackPoint*>& obj = ((const genfit::Track*) G__getstructoffset())->getPoints();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::Track*) G__getstructoffset())->getNumPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getPointWithMeasurement((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<genfit::TrackPoint*>& obj = ((const genfit::Track*) G__getstructoffset())->getPointsWithMeasurement();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::Track*) G__getstructoffset())->getNumPointsWithMeasurement());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getPointWithMeasurementAndFitterInfo((int) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const genfit::MeasuredStateOnPlane& obj = ((const genfit::Track*) G__getstructoffset())->getFittedState((int) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 2:
      {
         const genfit::MeasuredStateOnPlane& obj = ((const genfit::Track*) G__getstructoffset())->getFittedState((int) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 1:
      {
         const genfit::MeasuredStateOnPlane& obj = ((const genfit::Track*) G__getstructoffset())->getFittedState((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 0:
      {
         const genfit::MeasuredStateOnPlane& obj = ((const genfit::Track*) G__getstructoffset())->getFittedState();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getTrackRep((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::Track*) G__getstructoffset())->getNumReps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::Track*) G__getstructoffset())->getIdForRep((genfit::AbsTrackRep*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getCardinalRep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const genfit::Track*) G__getstructoffset())->getCardinalRepId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genfit::Track*) G__getstructoffset())->getMcTrackId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const genfit::Track*) G__getstructoffset())->hasFitStatus((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const genfit::Track*) G__getstructoffset())->hasFitStatus());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getFitStatus((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getFitStatus());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const genfit::Track*) G__getstructoffset())->hasKalmanFitStatus((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const genfit::Track*) G__getstructoffset())->hasKalmanFitStatus());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getKalmanFitStatus((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->getKalmanFitStatus());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->setFitStatus((genfit::FitStatus*) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVectorD& obj = ((const genfit::Track*) G__getstructoffset())->getStateSeed();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->setStateSeed(*(TVectorD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->setStateSeed(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixDSym& obj = ((const genfit::Track*) G__getstructoffset())->getCovSeed();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->setCovSeed(*(TMatrixDSym*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->setMcTrackId((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genfit::Track*) G__getstructoffset())->insertPoint((genfit::TrackPoint*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->insertPoint((genfit::TrackPoint*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genfit::Track*) G__getstructoffset())->insertPoints(*((vector<genfit::TrackPoint*>*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->insertPoints(*((vector<genfit::TrackPoint*>*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->deletePoint((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genfit::Track*) G__getstructoffset())->insertMeasurement((genfit::AbsMeasurement*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->insertMeasurement((genfit::AbsMeasurement*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genfit::Track*) G__getstructoffset())->mergeTrack((genfit::Track*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->mergeTrack((genfit::Track*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->addTrackRep((genfit::AbsTrackRep*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->deleteTrackRep((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->setCardinalRep((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->determineCardinalRep();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genfit::Track*) G__getstructoffset())->sort());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((genfit::Track*) G__getstructoffset())->udpateSeed((int) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((genfit::Track*) G__getstructoffset())->udpateSeed((int) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((genfit::Track*) G__getstructoffset())->udpateSeed((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((genfit::Track*) G__getstructoffset())->udpateSeed());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->reverseTrackPoints();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->reverseMomSeed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::Track*) G__getstructoffset())->switchPDGSigns((genfit::AbsTrackRep*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->switchPDGSigns();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->reverseTrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genfit::Track*) G__getstructoffset())->deleteForwardInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::Track*) G__getstructoffset())->deleteForwardInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->deleteForwardInfo((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->deleteForwardInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genfit::Track*) G__getstructoffset())->deleteBackwardInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::Track*) G__getstructoffset())->deleteBackwardInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->deleteBackwardInfo((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->deleteBackwardInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genfit::Track*) G__getstructoffset())->deleteReferenceInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::Track*) G__getstructoffset())->deleteReferenceInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->deleteReferenceInfo((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->deleteReferenceInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genfit::Track*) G__getstructoffset())->deleteMeasurementInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::Track*) G__getstructoffset())->deleteMeasurementInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->deleteMeasurementInfo((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->deleteMeasurementInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genfit::Track*) G__getstructoffset())->deleteFitterInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (genfit::AbsTrackRep*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::Track*) G__getstructoffset())->deleteFitterInfo((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->deleteFitterInfo((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->deleteFitterInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTrackLen((genfit::AbsTrackRep*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTrackLen((genfit::AbsTrackRep*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTrackLen((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTrackLen());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTOF((genfit::AbsTrackRep*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTOF((genfit::AbsTrackRep*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTOF((genfit::AbsTrackRep*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const genfit::Track*) G__getstructoffset())->getTOF());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genfit::Track*) G__getstructoffset())->constructTrackCand());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genfit::Track*) G__getstructoffset())->fixWeights((genfit::AbsTrackRep*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::Track*) G__getstructoffset())->fixWeights((genfit::AbsTrackRep*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::Track*) G__getstructoffset())->fixWeights((genfit::AbsTrackRep*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->fixWeights();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::Track*) G__getstructoffset())->prune((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::Track*) G__getstructoffset())->prune();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genfit::Track*) G__getstructoffset())->checkConsistency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_605_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::Track G__TgenfitcLcLTrack;
static int G__coreRootDict_605_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::Track*) (soff+(sizeof(genfit::Track)*i)))->~G__TgenfitcLcLTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::Track*) (soff))->~G__TgenfitcLcLTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsBField */
static int G__coreRootDict_661_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::AbsBField*) G__getstructoffset())->get(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_661_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genfit::AbsBField*) G__getstructoffset())->get(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]), *(double*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsBField G__TgenfitcLcLAbsBField;
static int G__coreRootDict_661_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsBField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsBField*) (soff+(sizeof(genfit::AbsBField)*i)))->~G__TgenfitcLcLAbsBField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsBField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsBField*) (soff))->~G__TgenfitcLcLAbsBField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__coreRootDict_661_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsBField* dest = (genfit::AbsBField*) G__getstructoffset();
   *dest = *(genfit::AbsBField*) libp->para[0].ref;
   const genfit::AbsBField& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::FieldManager */
static int G__coreRootDict_672_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genfit::FieldManager*) G__getstructoffset())->getField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((genfit::FieldManager*) G__getstructoffset())->getFieldVal(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FieldManager*) G__getstructoffset())->getFieldVal(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]), *(double*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FieldManager*) G__getstructoffset())->init((genfit::AbsBField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genfit::FieldManager*) G__getstructoffset())->isInitialized());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::FieldManager*) G__getstructoffset())->checkInitialized();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::FieldManager::checkInstanciated();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genfit::FieldManager*) G__getstructoffset())->useCache((bool) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::FieldManager*) G__getstructoffset())->useCache((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::FieldManager*) G__getstructoffset())->useCache();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_672_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::FieldManager::getInstance());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__coreRootDict_672_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::FieldManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::FieldManager(*(genfit::FieldManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__coreRootDict_672_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::FieldManager* dest = (genfit::FieldManager*) G__getstructoffset();
   *dest = *(genfit::FieldManager*) libp->para[0].ref;
   const genfit::FieldManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::RectangularFinitePlane */
static int G__coreRootDict_673_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::RectangularFinitePlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::RectangularFinitePlane(
*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
   } else {
     p = new((void*) gvp) genfit::RectangularFinitePlane(
*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::RectangularFinitePlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::RectangularFinitePlane[n];
     } else {
       p = new((void*) gvp) genfit::RectangularFinitePlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::RectangularFinitePlane;
     } else {
       p = new((void*) gvp) genfit::RectangularFinitePlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genfit::RectangularFinitePlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::RectangularFinitePlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genfit::RectangularFinitePlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genfit::RectangularFinitePlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genfit::RectangularFinitePlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::RectangularFinitePlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::RectangularFinitePlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genfit::RectangularFinitePlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_673_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genfit::RectangularFinitePlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__coreRootDict_673_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::RectangularFinitePlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::RectangularFinitePlane(*(genfit::RectangularFinitePlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::RectangularFinitePlane G__TgenfitcLcLRectangularFinitePlane;
static int G__coreRootDict_673_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::RectangularFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::RectangularFinitePlane*) (soff+(sizeof(genfit::RectangularFinitePlane)*i)))->~G__TgenfitcLcLRectangularFinitePlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::RectangularFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::RectangularFinitePlane*) (soff))->~G__TgenfitcLcLRectangularFinitePlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsFitter */
static int G__coreRootDict_674_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genfit::AbsFitter*) G__getstructoffset())->processTrackWithRep((genfit::Track*) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genfit::AbsFitter*) G__getstructoffset())->processTrackWithRep((genfit::Track*) G__int(libp->para[0]), (genfit::AbsTrackRep*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_674_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genfit::AbsFitter*) G__getstructoffset())->processTrack((genfit::Track*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genfit::AbsFitter*) G__getstructoffset())->processTrack((genfit::Track*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__coreRootDict_674_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genfit::AbsFitter*) G__getstructoffset())->setDebugLvl((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genfit::AbsFitter*) G__getstructoffset())->setDebugLvl();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsFitter G__TgenfitcLcLAbsFitter;
static int G__coreRootDict_674_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsFitter*) (soff+(sizeof(genfit::AbsFitter)*i)))->~G__TgenfitcLcLAbsFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsFitter*) (soff))->~G__TgenfitcLcLAbsFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__coreRootDict_674_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsFitter* dest = (genfit::AbsFitter*) G__getstructoffset();
   *dest = *(genfit::AbsFitter*) libp->para[0].ref;
   const genfit::AbsFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* genfit::AbsFinitePlane */

/* genfit::DetPlane */

/* genfit::MaterialProperties */

/* genfit::StateOnPlane */

/* genfit::MeasuredStateOnPlane */

/* genfit::AbsMeasurement */

/* genfit::AbsTrackRep */

/* genfit::AbsHMatrix */

/* genfit::MeasurementOnPlane */

/* genfit::TrackPoint */

/* genfit::AbsFitterInfo */

/* genfit::FitStatus */

/* genfit::TrackCandHit */

/* genfit::TrackCand */

/* genfit::ThinScatterer */

/* genfit::Track */

/* genfit::AbsBField */

/* genfit::FieldManager */

/* genfit::RectangularFinitePlane */

/* genfit::AbsFitter */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunccoreRootDict {
 public:
  G__Sizep2memfunccoreRootDict(): p(&G__Sizep2memfunccoreRootDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunccoreRootDict::*p)();
};

size_t G__get_sizep2memfunccoreRootDict()
{
  G__Sizep2memfunccoreRootDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancecoreRootDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane))) {
     genfit::DetPlane *G__Lderived;
     G__Lderived=(genfit::DetPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties))) {
     genfit::MaterialProperties *G__Lderived;
     G__Lderived=(genfit::MaterialProperties*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane))) {
     genfit::StateOnPlane *G__Lderived;
     G__Lderived=(genfit::StateOnPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane))) {
     genfit::MeasuredStateOnPlane *G__Lderived;
     G__Lderived=(genfit::MeasuredStateOnPlane*)0x1000;
     {
       genfit::StateOnPlane *G__Lpbase=(genfit::StateOnPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane),G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsMeasurement))) {
     genfit::AbsMeasurement *G__Lderived;
     G__Lderived=(genfit::AbsMeasurement*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsMeasurement),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep))) {
     genfit::AbsTrackRep *G__Lderived;
     G__Lderived=(genfit::AbsTrackRep*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix))) {
     genfit::AbsHMatrix *G__Lderived;
     G__Lderived=(genfit::AbsHMatrix*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane))) {
     genfit::MeasurementOnPlane *G__Lderived;
     G__Lderived=(genfit::MeasurementOnPlane*)0x1000;
     {
       genfit::MeasuredStateOnPlane *G__Lpbase=(genfit::MeasuredStateOnPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane),G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genfit::StateOnPlane *G__Lpbase=(genfit::StateOnPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane),G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint))) {
     genfit::TrackPoint *G__Lderived;
     G__Lderived=(genfit::TrackPoint*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitterInfo))) {
     genfit::AbsFitterInfo *G__Lderived;
     G__Lderived=(genfit::AbsFitterInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitterInfo),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit))) {
     genfit::TrackCandHit *G__Lderived;
     G__Lderived=(genfit::TrackCandHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand))) {
     genfit::TrackCand *G__Lderived;
     G__Lderived=(genfit::TrackCand*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer))) {
     genfit::ThinScatterer *G__Lderived;
     G__Lderived=(genfit::ThinScatterer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack))) {
     genfit::Track *G__Lderived;
     G__Lderived=(genfit::Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack),G__get_linked_tagnum(&G__coreRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane))) {
     genfit::RectangularFinitePlane *G__Lderived;
     G__Lderived=(genfit::RectangularFinitePlane*)0x1000;
     {
       genfit::AbsFinitePlane *G__Lpbase=(genfit::AbsFinitePlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane),G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFinitePlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablecoreRootDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorD",117,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixDSym",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::MatStep>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMatrixD>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMatrixT<double> >",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrackCandHit*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::TrackCandHit*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::MeasurementOnPlane*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::AbsMeasurement*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*>",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsTrackRepmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsTrackRepmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*,less<const genfit::AbsTrackRep*> >",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsTrackRepmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsTrackRepmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const genfit::AbsTrackRep*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::AbsFitterInfo*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<AbsMeasurement*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR),0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const AbsTrackRep*,AbsFitterInfo*>",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsFitterInfomUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsFitterInfomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const genfit::AbsTrackRep*,genfit::AbsFitterInfo*>",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsFitterInfomUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsFitterInfomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const genfit::AbsTrackRep*,genfit::AbsFitterInfo*,less<const genfit::AbsTrackRep*> >",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsFitterInfomUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsFitterInfomUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<AbsFitterInfo*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR),0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,AbsMeasurementProducer<genfit::AbsMeasurement>*>",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,genfit::AbsMeasurementProducer<genfit::AbsMeasurement>*>",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,genfit::AbsMeasurementProducer<genfit::AbsMeasurement>*,less<int> >",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::TrackPoint*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<AbsTrackRep*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::AbsTrackRep*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrackPoint*>",117,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR),0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const AbsTrackRep*,FitStatus*>",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLFitStatusmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const genfit::AbsTrackRep*,genfit::FitStatus*>",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLFitStatusmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const genfit::AbsTrackRep*,genfit::FitStatus*,less<const genfit::AbsTrackRep*> >",117,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLFitStatusmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* genfit::AbsFinitePlane */
static void G__setup_memvargenfitcLcLAbsFinitePlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFinitePlane));
   { genfit::AbsFinitePlane *p; p=(genfit::AbsFinitePlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::DetPlane */
static void G__setup_memvargenfitcLcLDetPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane));
   { genfit::DetPlane *p; p=(genfit::DetPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVector3),-1,-1,4,"o_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVector3),-1,-1,4,"u_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVector3),-1,-1,4,"v_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFinitePlane),-1,-1,4,"finitePlane_=",0,"! Shut ROOT up, this class has a custom streamer.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::MaterialProperties */
static void G__setup_memvargenfitcLcLMaterialProperties(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties));
   { genfit::MaterialProperties *p; p=(genfit::MaterialProperties*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"density_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"Z_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"A_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"radiationLength_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"mEE_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::StateOnPlane */
static void G__setup_memvargenfitcLcLStateOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane));
   { genfit::StateOnPlane *p; p=(genfit::StateOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"state_=",0,"state vector");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"auxInfo_=",0,"auxiliary information (e.g. charge, flight direction etc.)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLSharedPlanePtr),-1,-1,2,"sharedPlane_=",0,"! Shared ownership.  '!' in order to silence ROOT, custom streamer writes and reads this.");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep),-1,-1,4,"rep_=",0,"! No ownership");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::MeasuredStateOnPlane */
static void G__setup_memvargenfitcLcLMeasuredStateOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane));
   { genfit::MeasuredStateOnPlane *p; p=(genfit::MeasuredStateOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,2,"cov_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsMeasurement */
static void G__setup_memvargenfitcLcLAbsMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsMeasurement));
   { genfit::AbsMeasurement *p; p=(genfit::AbsMeasurement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"rawHitCoords_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,2,"rawHitCov_=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"detId_=",0,"detId id is -1 per default");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"hitId_=",0,"hitId id is -1 per default");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint),-1,-1,2,"trackPoint_=",0,"! No ownership");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsTrackRep */
static void G__setup_memvargenfitcLcLAbsTrackRep(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep));
   { genfit::AbsTrackRep *p; p=(genfit::AbsTrackRep*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"pdgCode_=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"propDir_=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"debugLvl_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsHMatrix */
static void G__setup_memvargenfitcLcLAbsHMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix));
   { genfit::AbsHMatrix *p; p=(genfit::AbsHMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::MeasurementOnPlane */
static void G__setup_memvargenfitcLcLMeasurementOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane));
   { genfit::MeasurementOnPlane *p; p=(genfit::MeasurementOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix),-1,-1,2,"hMatrix_=",0,"! Ownership. Projection matrix");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"weight_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::TrackPoint */
static void G__setup_memvargenfitcLcLTrackPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   { genfit::TrackPoint *p; p=(genfit::TrackPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"sortingParameter_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack),-1,-1,4,"track_=",0,"! No ownership");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR),-1,-1,4,"rawMeasurements_=",0,"Ownership");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsFitterInfomUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsFitterInfomUgRsPgRsPgR),G__defined_typename("map<const AbsTrackRep*,AbsFitterInfo*>"),-1,4,"fitterInfos_=",0,"! Ownership over FitterInfos");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR),-1,-1,4,"vFitterInfos_=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer),-1,-1,4,"thinScatterer_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsFitterInfo */
static void G__setup_memvargenfitcLcLAbsFitterInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitterInfo));
   { genfit::AbsFitterInfo *p; p=(genfit::AbsFitterInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint),-1,-1,2,"trackPoint_=",0,"! No ownership");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep),-1,-1,2,"rep_=",0,"! No ownership");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLSharedPlanePtr),-1,-1,2,"sharedPlane_=",0,"! Shared ownership.  '!' shuts up ROOT.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::FitStatus */
static void G__setup_memvargenfitcLcLFitStatus(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus));
   { genfit::FitStatus *p; p=(genfit::FitStatus*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"isFitted_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"isFitConvergedFully_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"isFitConvergedPartially_=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"nFailedPoints_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"trackHasChanged_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"trackIsPruned_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"charge_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"chi2_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"ndf_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::TrackCandHit */
static void G__setup_memvargenfitcLcLTrackCandHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit));
   { genfit::TrackCandHit *p; p=(genfit::TrackCandHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"detId_=",0,"detId id is -1 per default");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"hitId_=",0,"hitId id is -1 per default");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"planeId_=",0,"planeId id is -1 per default");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"sortingParameter_=",0,"sorting parameter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::TrackCand */
static void G__setup_memvargenfitcLcLTrackCand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand));
   { genfit::TrackCand *p; p=(genfit::TrackCand*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR),G__defined_typename("vector<TrackCandHit*>"),-1,4,"hits_=",0,"->");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"mcTrackId_=",0,"*< if MC simulation, store the mc track id here */");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"pdg_=",0,"*< particle data groupe's id for a particle*/");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"state6D_=",0,"*< global 6D position plus momentum state */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,4,"cov6D_=",0,"*< global 6D position plus momentum state */");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"q_=",0,"*< the charge of the particle in units of elementary charge */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::ThinScatterer */
static void G__setup_memvargenfitcLcLThinScatterer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer));
   { genfit::ThinScatterer *p; p=(genfit::ThinScatterer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLSharedPlanePtr),-1,-1,4,"sharedPlane_=",0,"! Material boundary.  '!' shuts up ROOT.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties),-1,-1,4,"material_=",0,"Material properties");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::Track */
static void G__setup_memvargenfitcLcLTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   { genfit::Track *p; p=(genfit::Track*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR),G__defined_typename("vector<AbsTrackRep*>"),-1,4,"trackReps_=",0,"Ownership");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"cardinalRep_=",0,"THE selected rep, default = 0;");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR),-1,-1,4,"trackPoints_=",0,"Ownership");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR),-1,-1,4,"trackPointsWithMeasurement_=",0,"! helper");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLFitStatusmUgRsPgRsPgR),G__defined_typename("map<const AbsTrackRep*,FitStatus*>"),-1,4,"fitStatuses_=",0,"Ownership over FitStatus*");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"mcTrackId_=",0,"*< if MC simulation, store the mc track id here */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,4,"stateSeed_=",0,"6D: position, momentum");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,4,"covSeed_=",0,"6D");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsBField */
static void G__setup_memvargenfitcLcLAbsBField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsBField));
   { genfit::AbsBField *p; p=(genfit::AbsBField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::FieldManager */
static void G__setup_memvargenfitcLcLFieldManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager));
   { genfit::FieldManager *p; p=(genfit::FieldManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager),-1,-2,4,"instance_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsBField),-1,-2,4,"field_=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-2,4,"useCache_=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-2,4,"n_buckets_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLfieldCache),-1,-2,4,"cache_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::RectangularFinitePlane */
static void G__setup_memvargenfitcLcLRectangularFinitePlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane));
   { genfit::RectangularFinitePlane *p; p=(genfit::RectangularFinitePlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"uMin_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"uMax_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"vMin_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"vMax_=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__coreRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsFitter */
static void G__setup_memvargenfitcLcLAbsFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitter));
   { genfit::AbsFitter *p; p=(genfit::AbsFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"debugLvl_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarcoreRootDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncgenfitcLcLAbsFinitePlane(void) {
   /* genfit::AbsFinitePlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFinitePlane));
   G__memfunc_setup("isInActive",1007,G__coreRootDict_169_0_2, 103, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - u d - - 0 - v", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("clone",529,G__coreRootDict_169_0_3, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFinitePlane), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,G__coreRootDict_169_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFinitePlane), -1, 1, 1, 1, 2, 0, "u 'genfit::AbsFinitePlane' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_169_0_7, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::AbsFinitePlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_169_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsFinitePlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_169_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::AbsFinitePlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_169_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::AbsFinitePlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__coreRootDict_169_0_11, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__coreRootDict_169_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__coreRootDict_169_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_169_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_169_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsFinitePlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_169_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsFinitePlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_169_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsFinitePlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_169_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsFinitePlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AbsFinitePlane", 1507, G__coreRootDict_169_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLDetPlane(void) {
   /* genfit::DetPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane));
   G__memfunc_setup("DetPlane",781,G__coreRootDict_222_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane), -1, 0, 1, 1, 1, 0, "U 'genfit::AbsFinitePlane' - 0 'NULL' finite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DetPlane",781,G__coreRootDict_222_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane), -1, 0, 4, 1, 1, 0, 
"u 'TVector3' - 11 - o u 'TVector3' - 11 - u "
"u 'TVector3' - 11 - v U 'genfit::AbsFinitePlane' - 0 'NULL' finite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DetPlane",781,G__coreRootDict_222_0_3, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane), -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 11 - o u 'TVector3' - 11 - n "
"U 'genfit::AbsFinitePlane' - 0 'NULL' finite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DetPlane",781,G__coreRootDict_222_0_4, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::DetPlane' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__coreRootDict_222_0_5, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLDetPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::DetPlane' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__coreRootDict_222_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::DetPlane' - 1 - other", "nothrow", (void*) NULL, 0);
   G__memfunc_setup("getO",399,G__coreRootDict_222_0_7, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getU",405,G__coreRootDict_222_0_8, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getV",406,G__coreRootDict_222_0_9, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__coreRootDict_222_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 11 - o u 'TVector3' - 11 - u "
"u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setO",411,G__coreRootDict_222_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setO",411,G__coreRootDict_222_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setU",417,G__coreRootDict_222_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setU",417,G__coreRootDict_222_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setV",418,G__coreRootDict_222_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setV",418,G__coreRootDict_222_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUV",503,G__coreRootDict_222_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - u u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setON",489,G__coreRootDict_222_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - o u 'TVector3' - 11 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFinitePlane",1435,G__coreRootDict_222_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsFinitePlane' - 0 - finite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNormal",937,G__coreRootDict_222_0_20, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNormal",949,G__coreRootDict_222_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNormal",949,G__coreRootDict_222_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNormal",949,G__coreRootDict_222_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 11 - theta d - - 11 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("project",759,G__coreRootDict_222_0_24, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector2), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LabToPlane",962,G__coreRootDict_222_0_25, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector2), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("toLab",498,G__coreRootDict_222_0_26, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector2' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dist",436,G__coreRootDict_222_0_27, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("straightLineToPlane",1953,G__coreRootDict_222_0_28, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector2), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - point u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("straightLineToPlane",1953,G__coreRootDict_222_0_29, 121, -1, -1, 0, 8, 1, 1, 8, 
"d - - 11 - posX d - - 11 - posY "
"d - - 11 - posZ d - - 11 - dirX "
"d - - 11 - dirY d - - 11 - dirZ "
"d - - 1 - u d - - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("distance",843,G__coreRootDict_222_0_31, 100, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance",843,G__coreRootDict_222_0_32, 100, -1, -1, 0, 3, 1, 1, 8, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInActive",1007,G__coreRootDict_222_0_33, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - point u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInActive",1007,G__coreRootDict_222_0_34, 103, -1, -1, 0, 6, 1, 1, 8, 
"d - - 11 - posX d - - 11 - posY "
"d - - 11 - posZ d - - 11 - dirX "
"d - - 11 - dirY d - - 11 - dirZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInActive",1007,G__coreRootDict_222_0_35, 103, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - u d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInActive",1007,G__coreRootDict_222_0_36, 103, -1, -1, 0, 1, 1, 1, 8, "u 'TVector2' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFinite",827,G__coreRootDict_222_0_37, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__coreRootDict_222_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__coreRootDict_222_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sane",423,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_222_0_41, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::DetPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_222_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::DetPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_222_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::DetPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_222_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::DetPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_222_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_222_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::DetPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_222_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::DetPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_222_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::DetPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_222_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::DetPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DetPlane", 907, G__coreRootDict_222_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLMaterialProperties(void) {
   /* genfit::MaterialProperties */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties));
   G__memfunc_setup("MaterialProperties",1884,G__coreRootDict_224_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaterialProperties",1884,G__coreRootDict_224_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties), -1, 0, 5, 1, 1, 0, 
"d - - 11 - density d - - 11 - Z "
"d - - 11 - A d - - 11 - radiationLength "
"d - - 11 - mEE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDensity",1056,G__coreRootDict_224_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__coreRootDict_224_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getA",385,G__coreRootDict_224_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRadLen",886,G__coreRootDict_224_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMEE",535,G__coreRootDict_224_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaterialProperties",2204,G__coreRootDict_224_0_8, 121, -1, -1, 0, 5, 1, 1, 8, 
"d - - 1 - density d - - 1 - Z "
"d - - 1 - A d - - 1 - radiationLength "
"d - - 1 - mEE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaterialProperties",2216,G__coreRootDict_224_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 11 - density d - - 11 - Z "
"d - - 11 - A d - - 11 - radiationLength "
"d - - 11 - mEE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__coreRootDict_224_0_11, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::MaterialProperties::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_224_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MaterialProperties::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_224_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::MaterialProperties::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_224_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::MaterialProperties::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_224_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_224_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MaterialProperties::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_224_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::MaterialProperties::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_224_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MaterialProperties::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_224_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::MaterialProperties::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MaterialProperties", 1884, G__coreRootDict_224_0_23, (int) ('i'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties), -1, 0, 1, 1, 1, 0, "u 'genfit::MaterialProperties' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MaterialProperties", 2010, G__coreRootDict_224_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__coreRootDict_224_0_25, (int) ('u'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties), -1, 1, 1, 1, 1, 0, "u 'genfit::MaterialProperties' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLStateOnPlane(void) {
   /* genfit::StateOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane));
   G__memfunc_setup("StateOnPlane",1198,G__coreRootDict_264_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane), -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StateOnPlane",1198,G__coreRootDict_264_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane), -1, 0, 3, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'genfit::SharedPlanePtr' - 11 - plane "
"U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StateOnPlane",1198,G__coreRootDict_264_0_3, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane), -1, 0, 4, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'genfit::SharedPlanePtr' - 11 - plane "
"U 'genfit::AbsTrackRep' - 10 - rep u 'TVectorT<double>' 'TVectorD' 11 - auxInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__coreRootDict_264_0_4, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::StateOnPlane' - 0 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__coreRootDict_264_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::StateOnPlane' - 1 - other", "nothrow", (void*) NULL, 0);
   G__memfunc_setup("getState",833,G__coreRootDict_264_0_6, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getState",833,G__coreRootDict_264_0_7, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAuxInfo",1018,G__coreRootDict_264_0_8, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAuxInfo",1018,G__coreRootDict_264_0_9, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlane",816,G__coreRootDict_264_0_10, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLSharedPlanePtr), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRep",615,G__coreRootDict_264_0_11, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setState",845,G__coreRootDict_264_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVectorT<double>' 'TVectorD' 11 - state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlane",828,G__coreRootDict_264_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::SharedPlanePtr' - 11 - plane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatePlane",1341,G__coreRootDict_264_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'genfit::SharedPlanePtr' - 11 - plane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAuxInfo",1030,G__coreRootDict_264_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVectorT<double>' 'TVectorD' 11 - auxInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRep",627,G__coreRootDict_264_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateToPlane",1884,G__coreRootDict_264_0_17, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'genfit::SharedPlanePtr' - 11 - plane g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateToLine",1780,G__coreRootDict_264_0_18, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'TVector3' - 11 - linePoint u 'TVector3' - 11 - lineDirection "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateToPoint",1910,G__coreRootDict_264_0_19, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 11 - point g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateToPoint",1910,G__coreRootDict_264_0_20, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'TVector3' - 11 - point u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - G "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateToCylinder",2214,G__coreRootDict_264_0_21, 100, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - radius u 'TVector3' - 11 'TVector3(0.,0.,0.)' linePoint "
"u 'TVector3' - 11 'TVector3(0.,0.,1.)' lineDirection g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateToSphere",2003,G__coreRootDict_264_0_22, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - radius u 'TVector3' - 11 'TVector3(0.,0.,0.)' point "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateBy",1380,G__coreRootDict_264_0_23, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - step g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extrapolateToMeasurement",2546,G__coreRootDict_264_0_24, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'genfit::AbsMeasurement' - 10 - measurement g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPos",626,G__coreRootDict_264_0_25, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMom",617,G__coreRootDict_264_0_26, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDir",607,G__coreRootDict_264_0_27, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosMom",923,G__coreRootDict_264_0_28, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 1 - pos u 'TVector3' - 1 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosDir",913,G__coreRootDict_264_0_29, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 1 - pos u 'TVector3' - 1 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get6DState",955,G__coreRootDict_264_0_30, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomMag",894,G__coreRootDict_264_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPDG",539,G__coreRootDict_264_0_32, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__coreRootDict_264_0_33, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQop",624,G__coreRootDict_264_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMass",724,G__coreRootDict_264_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMom",935,G__coreRootDict_264_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - pos u 'TVector3' - 11 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMom",935,G__coreRootDict_264_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVectorT<double>' 'TVectorD' 11 - state6", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeSign",1319,G__coreRootDict_264_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQop",636,G__coreRootDict_264_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - qop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__coreRootDict_264_0_41, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::StateOnPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_264_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::StateOnPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_264_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::StateOnPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_264_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::StateOnPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_264_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_264_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::StateOnPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_264_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::StateOnPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_264_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::StateOnPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_264_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::StateOnPlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("StateOnPlane", 1198, G__coreRootDict_264_0_53, (int) ('i'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLStateOnPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::StateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~StateOnPlane", 1324, G__coreRootDict_264_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLMeasuredStateOnPlane(void) {
   /* genfit::MeasuredStateOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane));
   G__memfunc_setup("MeasuredStateOnPlane",2020,G__coreRootDict_265_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeasuredStateOnPlane",2020,G__coreRootDict_265_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 4, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov "
"u 'genfit::SharedPlanePtr' - 11 - plane U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeasuredStateOnPlane",2020,G__coreRootDict_265_0_3, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 5, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov "
"u 'genfit::SharedPlanePtr' - 11 - plane U 'genfit::AbsTrackRep' - 10 - rep "
"u 'TVectorT<double>' 'TVectorD' 11 - auxInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeasuredStateOnPlane",2020,G__coreRootDict_265_0_4, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::MeasuredStateOnPlane' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeasuredStateOnPlane",2020,G__coreRootDict_265_0_5, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 2, 1, 1, 0, 
"u 'genfit::StateOnPlane' - 11 - state u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__coreRootDict_265_0_6, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::MeasuredStateOnPlane' - 0 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__coreRootDict_265_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::MeasuredStateOnPlane' - 1 - other", "nothrow", (void*) NULL, 0);
   G__memfunc_setup("getCov",616,G__coreRootDict_265_0_8, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCov",616,G__coreRootDict_265_0_9, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("blowUpCov",929,G__coreRootDict_265_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - blowUpFac g - - 0 'true' resetOffDiagonals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStateCov",1141,G__coreRootDict_265_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStateCovPlane",1637,G__coreRootDict_265_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov "
"u 'genfit::SharedPlanePtr' - 11 - plane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCov",628,G__coreRootDict_265_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get6DCov",738,G__coreRootDict_265_0_14, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosMomCov",1219,G__coreRootDict_265_0_15, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TVector3' - 1 - pos u 'TVector3' - 1 - mom "
"u 'TMatrixTSym<double>' 'TMatrixDSym' 1 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get6DStateCov",1251,G__coreRootDict_265_0_16, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TVectorT<double>' 'TVectorD' 1 - stateVec u 'TMatrixTSym<double>' 'TMatrixDSym' 1 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomVar",914,G__coreRootDict_265_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMomErr",1232,G__coreRootDict_265_0_18, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TVector3' - 11 - pos u 'TVector3' - 11 - mom "
"u 'TVector3' - 11 - posErr u 'TVector3' - 11 - momErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMomCov",1231,G__coreRootDict_265_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 11 - pos u 'TVector3' - 11 - mom "
"u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov6x6", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMomCov",1231,G__coreRootDict_265_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state6 u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov6x6", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__coreRootDict_265_0_22, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::MeasuredStateOnPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_265_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MeasuredStateOnPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_265_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::MeasuredStateOnPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_265_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::MeasuredStateOnPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_265_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_265_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MeasuredStateOnPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_265_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::MeasuredStateOnPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_265_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MeasuredStateOnPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_265_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::MeasuredStateOnPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MeasuredStateOnPlane", 2146, G__coreRootDict_265_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsMeasurement(void) {
   /* genfit::AbsMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsMeasurement));
   G__memfunc_setup("clone",529,G__coreRootDict_266_0_4, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsMeasurement), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getTrackPoint",1343,G__coreRootDict_266_0_5, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackPoint",1355,G__coreRootDict_266_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::TrackPoint' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawHitCoords",1529,G__coreRootDict_266_0_7, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawHitCov",1207,G__coreRootDict_266_0_8, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDetId",778,G__coreRootDict_266_0_9, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitId",786,G__coreRootDict_266_0_10, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDim",602,G__coreRootDict_266_0_11, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDetId",790,G__coreRootDict_266_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - detId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitId",798,G__coreRootDict_266_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - hitId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("constructPlane",1493,G__coreRootDict_266_0_14, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLSharedPlanePtr), -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("constructMeasurementsOnPlane",2955,G__coreRootDict_266_0_15, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgR), G__defined_typename("vector<genfit::MeasurementOnPlane*>"), 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 2);
   G__memfunc_setup("constructHMatrix",1698,G__coreRootDict_266_0_16, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix), -1, 0, 1, 1, 1, 9, "U 'genfit::AbsTrackRep' - 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsMeasurement), -1, 1, 1, 1, 4, 0, "u 'genfit::AbsMeasurement' - 11 - -", "default cannot work because TVector and TMatrix = operators don't do resizing", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_266_0_20, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::AbsMeasurement::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_266_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsMeasurement::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_266_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::AbsMeasurement::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_266_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::AbsMeasurement::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_266_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_266_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsMeasurement::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_266_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsMeasurement::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_266_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsMeasurement::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_266_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsMeasurement::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AbsMeasurement", 1562, G__coreRootDict_266_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsTrackRep(void) {
   /* genfit::AbsTrackRep */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep));
   G__memfunc_setup("clone",529,G__coreRootDict_267_0_3, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateToPlane",1884,G__coreRootDict_267_0_4, 100, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state u 'genfit::SharedPlanePtr' - 11 - plane "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateToLine",1780,G__coreRootDict_267_0_5, 100, -1, -1, 0, 5, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state u 'TVector3' - 11 - linePoint "
"u 'TVector3' - 11 - lineDirection g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateToLine",1780,G__coreRootDict_267_0_6, 100, -1, -1, 0, 8, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state u 'TVector3' - 11 - point1 "
"u 'TVector3' - 11 - point2 u 'TVector3' - 1 - poca "
"u 'TVector3' - 1 - dirInPoca u 'TVector3' - 1 - poca_onwire "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("extrapolateToPoint",1910,G__coreRootDict_267_0_7, 100, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state u 'TVector3' - 11 - point "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateToPoint",1910,G__coreRootDict_267_0_8, 100, -1, -1, 0, 5, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state u 'TVector3' - 11 - point "
"u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - G g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateToCylinder",2214,G__coreRootDict_267_0_9, 100, -1, -1, 0, 6, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state d - - 0 - radius "
"u 'TVector3' - 11 'TVector3(0.,0.,0.)' linePoint u 'TVector3' - 11 'TVector3(0.,0.,1.)' lineDirection "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateToSphere",2003,G__coreRootDict_267_0_10, 100, -1, -1, 0, 5, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state d - - 0 - radius "
"u 'TVector3' - 11 'TVector3(0.,0.,0.)' point g - - 0 'false' stopAtBoundary "
"g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateBy",1380,G__coreRootDict_267_0_11, 100, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state d - - 0 - step "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("extrapolateToMeasurement",2546,G__coreRootDict_267_0_12, 100, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state U 'genfit::AbsMeasurement' - 10 - measurement "
"g - - 0 'false' stopAtBoundary g - - 0 'false' calcJacobianNoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDim",602,G__coreRootDict_267_0_13, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getPos",626,G__coreRootDict_267_0_14, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getMom",617,G__coreRootDict_267_0_15, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getDir",607,G__coreRootDict_267_0_16, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosMom",923,G__coreRootDict_267_0_17, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - state u 'TVector3' - 1 - pos "
"u 'TVector3' - 1 - mom", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getPosDir",913,G__coreRootDict_267_0_18, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - state u 'TVector3' - 1 - pos "
"u 'TVector3' - 1 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get6DState",955,G__coreRootDict_267_0_19, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get6DCov",738,G__coreRootDict_267_0_20, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 0, 1, 1, 1, 8, "u 'genfit::MeasuredStateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getPosMomCov",1219,G__coreRootDict_267_0_21, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::MeasuredStateOnPlane' - 11 - state u 'TVector3' - 1 - pos "
"u 'TVector3' - 1 - mom u 'TMatrixTSym<double>' 'TMatrixDSym' 1 - cov", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("get6DStateCov",1251,G__coreRootDict_267_0_22, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'genfit::MeasuredStateOnPlane' - 11 - state u 'TVectorT<double>' 'TVectorD' 1 - stateVec "
"u 'TMatrixTSym<double>' 'TMatrixDSym' 1 - cov", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMomMag",894,G__coreRootDict_267_0_23, 100, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getMomVar",914,G__coreRootDict_267_0_24, 100, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::MeasuredStateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getPDG",539,G__coreRootDict_267_0_25, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPDGCharge",1125,G__coreRootDict_267_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__coreRootDict_267_0_27, 100, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getQop",624,G__coreRootDict_267_0_28, 100, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getMass",724,G__coreRootDict_267_0_29, 100, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPropDir",1024,G__coreRootDict_267_0_30, 99, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getForwardJacobianAndNoise",2621,G__coreRootDict_267_0_31, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TMatrixT<double>' 'TMatrixD' 1 - jacobian u 'TMatrixTSym<double>' 'TMatrixDSym' 1 - noise "
"u 'TVectorT<double>' 'TVectorD' 1 - deltaState", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getBackwardJacobianAndNoise",2695,G__coreRootDict_267_0_32, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TMatrixT<double>' 'TMatrixD' 1 - jacobian u 'TMatrixTSym<double>' 'TMatrixDSym' 1 - noise "
"u 'TVectorT<double>' 'TVectorD' 1 - deltaState", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getSteps",847,G__coreRootDict_267_0_33, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgR), G__defined_typename("vector<genfit::MatStep>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 2);
   G__memfunc_setup("getRadiationLenght",1853,G__coreRootDict_267_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getTOF",553,G__coreRootDict_267_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("calcJacobianNumerically",2351,G__coreRootDict_267_0_36, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - origState u 'genfit::SharedPlanePtr' - 10 - destPlane "
"u 'TMatrixT<double>' 'TMatrixD' 1 - jacobian", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("switchPDGSign",1278,G__coreRootDict_267_0_37, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMom",935,G__coreRootDict_267_0_38, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state u 'TVector3' - 11 - pos "
"u 'TVector3' - 11 - mom", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setPosMom",935,G__coreRootDict_267_0_39, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state u 'TVectorT<double>' 'TVectorD' 11 - state6", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setPosMomErr",1232,G__coreRootDict_267_0_40, 121, -1, -1, 0, 5, 1, 1, 8, 
"u 'genfit::MeasuredStateOnPlane' - 1 - state u 'TVector3' - 11 - pos "
"u 'TVector3' - 11 - mom u 'TVector3' - 11 - posErr "
"u 'TVector3' - 11 - momErr", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setPosMomCov",1231,G__coreRootDict_267_0_41, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::MeasuredStateOnPlane' - 1 - state u 'TVector3' - 11 - pos "
"u 'TVector3' - 11 - mom u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov6x6", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setPosMomCov",1231,G__coreRootDict_267_0_42, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'genfit::MeasuredStateOnPlane' - 1 - state u 'TVectorT<double>' 'TVectorD' 11 - state6 "
"u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov6x6", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setChargeSign",1319,G__coreRootDict_267_0_43, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state d - - 0 - charge", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setQop",636,G__coreRootDict_267_0_44, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 1 - state d - - 0 - qop", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setPropDir",1036,G__coreRootDict_267_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("switchPropDir",1362,G__coreRootDict_267_0_46, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSameType",1028,G__coreRootDict_267_0_47, 103, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 - other", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("isSame",610,G__coreRootDict_267_0_48, 103, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 - other", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setDebugLvl",1121,G__coreRootDict_267_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 '1' lvl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep), -1, 1, 1, 1, 2, 0, "u 'genfit::AbsTrackRep' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_267_0_53, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::AbsTrackRep::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_267_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsTrackRep::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_267_0_55, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::AbsTrackRep::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_267_0_56, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::AbsTrackRep::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_267_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_267_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsTrackRep::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_267_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsTrackRep::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_267_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsTrackRep::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_267_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsTrackRep::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AbsTrackRep", 1200, G__coreRootDict_267_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsHMatrix(void) {
   /* genfit::AbsHMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix));
   G__memfunc_setup("getMatrix",949,G__coreRootDict_272_0_2, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Hv",190,G__coreRootDict_272_0_3, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 0, 1, 1, 1, 8, "u 'TVectorT<double>' 'TVectorD' 11 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHt",265,G__coreRootDict_272_0_4, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 1, 1, 1, 8, "u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - M", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHt",265,G__coreRootDict_272_0_5, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 0, 1, 1, 1, 8, "u 'TMatrixT<double>' 'TMatrixD' 11 - M", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HMHt",337,G__coreRootDict_272_0_6, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TMatrixTSym<double>' 'TMatrixDSym' 1 - M", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clone",529,G__coreRootDict_272_0_7, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator==",998,G__coreRootDict_272_0_8, 103, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::AbsHMatrix' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__coreRootDict_272_0_9, 103, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::AbsHMatrix' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__coreRootDict_272_0_10, 103, -1, -1, 0, 1, 1, 1, 8, "u 'genfit::AbsHMatrix' - 11 - other", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix), -1, 1, 1, 1, 2, 0, "u 'genfit::AbsHMatrix' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_272_0_14, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::AbsHMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_272_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsHMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_272_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::AbsHMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_272_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::AbsHMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_272_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_272_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsHMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_272_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsHMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_272_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsHMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_272_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsHMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AbsHMatrix", 1105, G__coreRootDict_272_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLMeasurementOnPlane(void) {
   /* genfit::MeasurementOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane));
   G__memfunc_setup("MeasurementOnPlane",1843,G__coreRootDict_273_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane), -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeasurementOnPlane",1843,G__coreRootDict_273_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane), -1, 0, 6, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov "
"u 'genfit::SharedPlanePtr' - 0 - plane U 'genfit::AbsTrackRep' - 10 - rep "
"U 'genfit::AbsHMatrix' - 10 - hMatrix d - - 0 '1.' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeasurementOnPlane",1843,G__coreRootDict_273_0_3, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::MeasurementOnPlane' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__coreRootDict_273_0_4, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::MeasurementOnPlane' - 0 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__coreRootDict_273_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::MeasurementOnPlane' - 1 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHMatrix",1021,G__coreRootDict_273_0_6, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsHMatrix), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWeight",936,G__coreRootDict_273_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWeightedCov",1433,G__coreRootDict_273_0_8, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHMatrix",1033,G__coreRootDict_273_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsHMatrix' - 10 - hMatrix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeight",948,G__coreRootDict_273_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__coreRootDict_273_0_12, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::MeasurementOnPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_273_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MeasurementOnPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_273_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::MeasurementOnPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_273_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::MeasurementOnPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_273_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_273_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MeasurementOnPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_273_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::MeasurementOnPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_273_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::MeasurementOnPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_273_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::MeasurementOnPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MeasurementOnPlane", 1969, G__coreRootDict_273_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrackPoint(void) {
   /* genfit::TrackPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint));
   G__memfunc_setup("TrackPoint",1023,G__coreRootDict_274_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackPoint",1023,G__coreRootDict_274_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 1, 1, 1, 0, "U 'genfit::Track' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackPoint",1023,G__coreRootDict_274_0_3, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 2, 1, 1, 0, 
"u 'vector<genfit::AbsMeasurement*,allocator<genfit::AbsMeasurement*> >' 'vector<genfit::AbsMeasurement*>' 11 - rawMeasurements U 'genfit::Track' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackPoint",1023,G__coreRootDict_274_0_4, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 2, 1, 1, 0, 
"U 'genfit::AbsMeasurement' - 0 - rawMeasurement U 'genfit::Track' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackPoint",1023,G__coreRootDict_274_0_5, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 1, 1, 1, 0, "u 'genfit::TrackPoint' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__coreRootDict_274_0_6, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 1, 1, 1, 1, 0, "u 'genfit::TrackPoint' - 0 - -", "assignment operator", (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__coreRootDict_274_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::TrackPoint' - 1 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackPoint",1023,G__coreRootDict_274_0_8, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 3, 1, 1, 0, 
"u 'genfit::TrackPoint' - 11 - rhs u 'map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*,less<const genfit::AbsTrackRep*>,allocator<pair<const genfit::AbsTrackRep* const,genfit::AbsTrackRep*> > >' 'map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*>' 11 - map "
"U 'vector<const genfit::AbsTrackRep*,allocator<const genfit::AbsTrackRep*> >' 'vector<const genfit::AbsTrackRep*>' 10 'NULL' repsToIgnore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSortingParameter",1991,G__coreRootDict_274_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__coreRootDict_274_0_10, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__coreRootDict_274_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::Track' - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawMeasurements",1891,G__coreRootDict_274_0_12, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR), G__defined_typename("vector<genfit::AbsMeasurement*>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawMeasurement",1776,G__coreRootDict_274_0_13, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsMeasurement), -1, 0, 1, 1, 1, 8, "i - - 0 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumRawMeasurements",2195,G__coreRootDict_274_0_14, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasRawMeasurements",1887,G__coreRootDict_274_0_15, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitterInfos",1453,G__coreRootDict_274_0_16, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR), G__defined_typename("vector<genfit::AbsFitterInfo*>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitterInfo",1338,G__coreRootDict_274_0_17, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitterInfo), -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFitterInfo",1934,G__coreRootDict_274_0_18, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLKalmanFitterInfo), -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasFitterInfo",1334,G__coreRootDict_274_0_19, 103, -1, -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaterialInfo",1531,G__coreRootDict_274_0_20, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasThinScatterer",1660,G__coreRootDict_274_0_21, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSortingParameter",2003,G__coreRootDict_274_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - sortingParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRawMeasurement",1753,G__coreRootDict_274_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsMeasurement' - 0 - rawMeasurement", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteRawMeasurements",2198,G__coreRootDict_274_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitterInfo",1350,G__coreRootDict_274_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsFitterInfo' - 0 - fitterInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteFitterInfo",1645,G__coreRootDict_274_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScatterer",1273,G__coreRootDict_274_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::ThinScatterer' - 0 - scatterer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fixupRepsForReading",1959,G__coreRootDict_274_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_274_0_30, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::TrackPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_274_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_274_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::TrackPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_274_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::TrackPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_274_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_274_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_274_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::TrackPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_274_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_274_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::TrackPoint::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TrackPoint", 1149, G__coreRootDict_274_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsFitterInfo(void) {
   /* genfit::AbsFitterInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitterInfo));
   G__memfunc_setup("clone",529,G__coreRootDict_275_0_3, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitterInfo), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getTrackPoint",1343,G__coreRootDict_275_0_4, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRep",615,G__coreRootDict_275_0_5, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackPoint",1355,G__coreRootDict_275_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::TrackPoint' - 10 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRep",627,G__coreRootDict_275_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hasMeasurements",1589,G__coreRootDict_275_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("hasReferenceState",1740,G__coreRootDict_275_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("hasForwardPrediction",2082,G__coreRootDict_275_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("hasBackwardPrediction",2156,G__coreRootDict_275_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("hasPrediction",1357,G__coreRootDict_275_0_12, 103, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - direction", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hasForwardUpdate",1652,G__coreRootDict_275_0_13, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("hasBackwardUpdate",1726,G__coreRootDict_275_0_14, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("hasUpdate",927,G__coreRootDict_275_0_15, 103, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - direction", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("deleteForwardInfo",1748,G__coreRootDict_275_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("deleteBackwardInfo",1822,G__coreRootDict_275_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("deleteReferenceInfo",1934,G__coreRootDict_275_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("deleteMeasurementInfo",2181,G__coreRootDict_275_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getPlane",816,G__coreRootDict_275_0_20, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLSharedPlanePtr), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFittedState",1441,G__coreRootDict_275_0_21, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 1, 1, 1, 1, 9, "g - - 0 'true' biased", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getResidual",1145,G__coreRootDict_275_0_22, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane), -1, 0, 3, 1, 1, 8, 
"h - - 0 '0' iMeasurement g - - 0 'true' biased "
"g - - 0 'false' onlyMeasurementErrors", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setPlane",828,G__coreRootDict_275_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::SharedPlanePtr' - 11 - plane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkConsistency",1680,G__coreRootDict_275_0_25, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitterInfo), -1, 1, 1, 1, 4, 0, "u 'genfit::AbsFitterInfo' - 11 - -", "assignment operator", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_275_0_28, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::AbsFitterInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_275_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsFitterInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_275_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::AbsFitterInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_275_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::AbsFitterInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_275_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_275_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsFitterInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_275_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsFitterInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_275_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::AbsFitterInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_275_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::AbsFitterInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AbsFitterInfo", 1422, G__coreRootDict_275_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLFitStatus(void) {
   /* genfit::FitStatus */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus));
   G__memfunc_setup("FitStatus",935,G__coreRootDict_277_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clone",529,G__coreRootDict_277_0_2, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isFitted",828,G__coreRootDict_277_0_3, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFitConverged",1436,G__coreRootDict_277_0_4, 103, -1, -1, 0, 1, 1, 1, 8, "g - - 0 'true' inAllPoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFitConvergedFully",1960,G__coreRootDict_277_0_5, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFitConvergedPartially",2382,G__coreRootDict_277_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFailedPoints",1616,G__coreRootDict_277_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasTrackChanged",1499,G__coreRootDict_277_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrackPruned",1343,G__coreRootDict_277_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__coreRootDict_277_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__coreRootDict_277_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNdf",600,G__coreRootDict_277_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPVal",691,G__coreRootDict_277_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setIsFitted",1128,G__coreRootDict_277_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' fitted", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsFitConvergedFully",2260,G__coreRootDict_277_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' fitConverged", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsFitConvergedPartially",2682,G__coreRootDict_277_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' fitConverged", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNFailedPoints",1628,G__coreRootDict_277_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nFailedPoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHasTrackChanged",1799,G__coreRootDict_277_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' trackChanged", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsTrackPruned",1643,G__coreRootDict_277_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' pruned", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__coreRootDict_277_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2",658,G__coreRootDict_277_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 11 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNdf",612,G__coreRootDict_277_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 11 - ndf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__coreRootDict_277_0_23, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__coreRootDict_277_0_24, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::FitStatus::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_277_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::FitStatus::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_277_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::FitStatus::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_277_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::FitStatus::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__coreRootDict_277_0_28, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__coreRootDict_277_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__coreRootDict_277_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_277_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_277_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::FitStatus::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_277_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::FitStatus::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_277_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::FitStatus::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_277_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::FitStatus::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FitStatus", 935, G__coreRootDict_277_0_36, (int) ('i'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus), -1, 0, 1, 1, 1, 0, "u 'genfit::FitStatus' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FitStatus", 1061, G__coreRootDict_277_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__coreRootDict_277_0_38, (int) ('u'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus), -1, 1, 1, 1, 1, 0, "u 'genfit::FitStatus' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrackCandHit(void) {
   /* genfit::TrackCandHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit));
   G__memfunc_setup("TrackCandHit",1168,G__coreRootDict_287_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit), -1, 0, 4, 1, 1, 0, 
"i - - 0 '-1' detId i - - 0 '-1' hitId "
"i - - 0 '-1' planeId d - - 0 '0.' sortingParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clone",529,G__coreRootDict_287_0_2, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getDetId",778,G__coreRootDict_287_0_3, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitId",786,G__coreRootDict_287_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlaneId",989,G__coreRootDict_287_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSortingParameter",1991,G__coreRootDict_287_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSortingParameter",2003,G__coreRootDict_287_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - sortingParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TrackCandHit",1168,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit), -1, 0, 1, 1, 2, 0, "u 'genfit::TrackCandHit' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit), -1, 1, 1, 1, 2, 0, "u 'genfit::TrackCandHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_287_0_11, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::TrackCandHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_287_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackCandHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_287_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::TrackCandHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_287_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::TrackCandHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_287_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_287_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackCandHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_287_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::TrackCandHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_287_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackCandHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_287_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::TrackCandHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TrackCandHit", 1294, G__coreRootDict_287_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrackCand(void) {
   /* genfit::TrackCand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand));
   G__memfunc_setup("TrackCand",875,G__coreRootDict_366_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackCand",875,G__coreRootDict_366_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand), -1, 0, 1, 1, 1, 0, "u 'genfit::TrackCand' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__coreRootDict_366_0_3, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand), -1, 1, 1, 1, 1, 0, "u 'genfit::TrackCand' - 0 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__coreRootDict_366_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::TrackCand' - 1 - other", "nothrow", (void*) NULL, 0);
   G__memfunc_setup("compareTrackCandHits",2026,G__coreRootDict_366_0_5, 103, -1, -1, 0, 2, 3, 1, 0, 
"U 'genfit::TrackCandHit' - 10 - lhs U 'genfit::TrackCandHit' - 10 - rhs", "operator< defined in TrackCandHit.h", (void*) G__func2void( (bool (*)(const genfit::TrackCandHit*, const genfit::TrackCandHit*))(&genfit::TrackCand::compareTrackCandHits) ), 0);
   G__memfunc_setup("getHit",613,G__coreRootDict_366_0_6, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCandHit), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHit",613,G__coreRootDict_366_0_7, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - i i - - 1 - detId "
"i - - 1 - hitId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHit",613,G__coreRootDict_366_0_8, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - - 0 - i i - - 1 - detId "
"i - - 1 - hitId d - - 1 - sortingParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitWithPlane",1521,G__coreRootDict_366_0_9, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - - 0 - i i - - 1 - detId "
"i - - 1 - hitId i - - 1 - planeId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__coreRootDict_366_0_10, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitIDs",869,G__coreRootDict_366_0_11, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 1, 1, 1, 8, "i - - 0 '-2' detId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDetIDs",861,G__coreRootDict_366_0_12, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSortingParameters",2106,G__coreRootDict_366_0_13, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUniqueDetIDs",1492,G__coreRootDict_366_0_14, 117, G__get_linked_tagnum(&G__coreRootDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR), G__defined_typename("set<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMcTrackId",1170,G__coreRootDict_366_0_15, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosSeed",1011,G__coreRootDict_366_0_16, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomSeed",1002,G__coreRootDict_366_0_17, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCovSeed",1013,G__coreRootDict_366_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - cov6D", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCovSeed",1001,G__coreRootDict_366_0_19, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStateSeed",1218,G__coreRootDict_366_0_20, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeSeed",1291,G__coreRootDict_366_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPdgCode",982,G__coreRootDict_366_0_22, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hitInTrack",1009,G__coreRootDict_366_0_23, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - detId i - - 0 - hitId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHit",590,G__coreRootDict_366_0_24, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - detId i - - 0 - hitId "
"i - - 0 '-1' planeId d - - 0 '0' sortingParameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHit",590,G__coreRootDict_366_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::TrackCandHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMcTrackId",1182,G__coreRootDict_366_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPdgCode",994,G__coreRootDict_366_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - pdgCode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__coreRootDict_366_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::TrackCand' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortHits",864,G__coreRootDict_366_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortHits",864,G__coreRootDict_366_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<unsigned int,allocator<unsigned int> >' 'vector<unsigned int>' 11 - indices", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__coreRootDict_366_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("set6DSeed",839,G__coreRootDict_366_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state6D d - - 10 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set6DSeedAndPdgCode",1776,G__coreRootDict_366_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVectorT<double>' 'TVectorD' 11 - state6D i - - 10 - pdgCode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMomSeed",1320,G__coreRootDict_366_0_35, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 11 - pos u 'TVector3' - 11 - mom "
"d - - 10 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosMomSeedAndPdgCode",2257,G__coreRootDict_366_0_36, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 11 - pos u 'TVector3' - 11 - mom "
"i - - 10 - pdgCode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_366_0_37, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::TrackCand::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_366_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackCand::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_366_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::TrackCand::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_366_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::TrackCand::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_366_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_366_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackCand::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_366_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::TrackCand::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_366_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::TrackCand::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_366_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::TrackCand::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TrackCand", 1001, G__coreRootDict_366_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLThinScatterer(void) {
   /* genfit::ThinScatterer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer));
   G__memfunc_setup("ThinScatterer",1344,G__coreRootDict_604_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ThinScatterer",1344,G__coreRootDict_604_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer), -1, 0, 2, 1, 1, 0, 
"u 'genfit::SharedPlanePtr' - 11 - sharedPlane u 'genfit::MaterialProperties' - 11 - material", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlane",816,G__coreRootDict_604_0_3, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLSharedPlanePtr), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaterial",1135,G__coreRootDict_604_0_4, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMaterialProperties), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__coreRootDict_604_0_6, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::ThinScatterer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_604_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::ThinScatterer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_604_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::ThinScatterer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_604_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::ThinScatterer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_604_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_604_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::ThinScatterer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_604_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::ThinScatterer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_604_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::ThinScatterer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_604_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::ThinScatterer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ThinScatterer", 1344, G__coreRootDict_604_0_18, (int) ('i'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer), -1, 0, 1, 1, 1, 0, "u 'genfit::ThinScatterer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ThinScatterer", 1470, G__coreRootDict_604_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__coreRootDict_604_0_20, (int) ('u'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLThinScatterer), -1, 1, 1, 1, 1, 0, "u 'genfit::ThinScatterer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrack(void) {
   /* genfit::Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack));
   G__memfunc_setup("Track",501,G__coreRootDict_605_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__coreRootDict_605_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 0, 3, 1, 1, 0, 
"u 'genfit::TrackCand' - 11 - trackCand u 'genfit::MeasurementFactory<genfit::AbsMeasurement>' - 11 - factory "
"U 'genfit::AbsTrackRep' - 0 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__coreRootDict_605_0_3, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 0, 2, 1, 1, 0, 
"U 'genfit::AbsTrackRep' - 0 - trackRep u 'TVectorT<double>' 'TVectorD' 11 - stateSeed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__coreRootDict_605_0_4, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 0, 3, 1, 1, 0, 
"U 'genfit::AbsTrackRep' - 0 - trackRep u 'TVector3' - 11 - posSeed "
"u 'TVector3' - 11 - momSeed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__coreRootDict_605_0_5, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 0, 3, 1, 1, 0, 
"U 'genfit::AbsTrackRep' - 0 - trackRep u 'TVectorT<double>' 'TVectorD' 11 - stateSeed "
"u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - covSeed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__coreRootDict_605_0_6, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 0, 1, 1, 1, 0, "u 'genfit::Track' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__coreRootDict_605_0_7, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrack), -1, 1, 1, 1, 1, 0, "u 'genfit::Track' - 0 - -", "assignment operator", (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__coreRootDict_605_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genfit::Track' - 1 - other", "nothrow", (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getPoint",842,G__coreRootDict_605_0_10, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 1, 1, 1, 8, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoints",957,G__coreRootDict_605_0_11, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR), G__defined_typename("vector<genfit::TrackPoint*>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumPoints",1261,G__coreRootDict_605_0_12, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPointWithMeasurement",2412,G__coreRootDict_605_0_13, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 1, 1, 1, 8, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPointsWithMeasurement",2527,G__coreRootDict_605_0_14, 117, G__get_linked_tagnum(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR), G__defined_typename("vector<genfit::TrackPoint*>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumPointsWithMeasurement",2831,G__coreRootDict_605_0_15, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPointWithMeasurementAndFitterInfo",3705,G__coreRootDict_605_0_16, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackPoint), -1, 0, 2, 1, 1, 8, 
"i - - 0 - id U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFittedState",1441,G__coreRootDict_605_0_17, 117, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane), -1, 1, 3, 1, 1, 9, 
"i - - 0 '0' id U 'genfit::AbsTrackRep' - 10 'NULL' rep "
"g - - 0 'true' biased", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackRep",1116,G__coreRootDict_605_0_18, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep), -1, 0, 1, 1, 1, 8, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumReps",1034,G__coreRootDict_605_0_19, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdForRep",1083,G__coreRootDict_605_0_20, 105, -1, -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCardinalRep",1413,G__coreRootDict_605_0_21, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsTrackRep), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCardinalRepId",1586,G__coreRootDict_605_0_22, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMcTrackId",1170,G__coreRootDict_605_0_23, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasFitStatus",1251,G__coreRootDict_605_0_24, 103, -1, -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitStatus",1255,G__coreRootDict_605_0_25, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFitStatus), -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasKalmanFitStatus",1847,G__coreRootDict_605_0_26, 103, -1, -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFitStatus",1851,G__coreRootDict_605_0_27, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLKalmanFitStatus), -1, 0, 1, 1, 1, 8, "U 'genfit::AbsTrackRep' - 10 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitStatus",1267,G__coreRootDict_605_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'genfit::FitStatus' - 0 - fitStatus U 'genfit::AbsTrackRep' - 10 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStateSeed",1218,G__coreRootDict_605_0_29, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVectorTlEdoublegR), G__defined_typename("TVectorD"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStateSeed",1230,G__coreRootDict_605_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVectorT<double>' 'TVectorD' 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStateSeed",1230,G__coreRootDict_605_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - pos u 'TVector3' - 11 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCovSeed",1001,G__coreRootDict_605_0_32, 117, G__get_linked_tagnum(&G__coreRootDictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCovSeed",1013,G__coreRootDict_605_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixTSym<double>' 'TMatrixDSym' 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMcTrackId",1182,G__coreRootDict_605_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insertPoint",1183,G__coreRootDict_605_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'genfit::TrackPoint' - 0 - point i - - 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insertPoints",1298,G__coreRootDict_605_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<genfit::TrackPoint*,allocator<genfit::TrackPoint*> >' 'vector<genfit::TrackPoint*>' 0 - points i - - 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deletePoint",1149,G__coreRootDict_605_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insertMeasurement",1819,G__coreRootDict_605_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'genfit::AbsMeasurement' - 0 - measurement i - - 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeTrack",1029,G__coreRootDict_605_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'genfit::Track' - 10 - other i - - 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrackRep",1093,G__coreRootDict_605_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 0 - trackRep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteTrackRep",1423,G__coreRootDict_605_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCardinalRep",1425,G__coreRootDict_605_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("determineCardinalRep",2050,G__coreRootDict_605_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sort",456,G__coreRootDict_605_0_44, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("udpateSeed",1028,G__coreRootDict_605_0_45, 103, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '0' id U 'genfit::AbsTrackRep' - 0 'NULL' rep "
"g - - 0 'true' biased", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverseTrackPoints",1902,G__coreRootDict_605_0_46, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverseMomSeed",1446,G__coreRootDict_605_0_47, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("switchPDGSigns",1393,G__coreRootDict_605_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsTrackRep' - 0 'NULL' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reverseTrack",1265,G__coreRootDict_605_0_49, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteForwardInfo",1748,G__coreRootDict_605_0_50, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '0' startId i - - 0 '-1' endId "
"U 'genfit::AbsTrackRep' - 10 'NULL' rep", "delete in range [startId, endId]. If rep == NULL, delete for ALL reps, otherwise only for rep.", (void*) NULL, 0);
   G__memfunc_setup("deleteBackwardInfo",1822,G__coreRootDict_605_0_51, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '0' startId i - - 0 '-1' endId "
"U 'genfit::AbsTrackRep' - 10 'NULL' rep", "delete in range [startId, endId]. If rep == NULL, delete for ALL reps, otherwise only for rep.", (void*) NULL, 0);
   G__memfunc_setup("deleteReferenceInfo",1934,G__coreRootDict_605_0_52, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '0' startId i - - 0 '-1' endId "
"U 'genfit::AbsTrackRep' - 10 'NULL' rep", "delete in range [startId, endId]. If rep == NULL, delete for ALL reps, otherwise only for rep.", (void*) NULL, 0);
   G__memfunc_setup("deleteMeasurementInfo",2181,G__coreRootDict_605_0_53, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '0' startId i - - 0 '-1' endId "
"U 'genfit::AbsTrackRep' - 10 'NULL' rep", "delete in range [startId, endId]. If rep == NULL, delete for ALL reps, otherwise only for rep.", (void*) NULL, 0);
   G__memfunc_setup("deleteFitterInfo",1645,G__coreRootDict_605_0_54, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '0' startId i - - 0 '-1' endId "
"U 'genfit::AbsTrackRep' - 10 'NULL' rep", "delete in range [startId, endId]. If rep == NULL, delete for ALL reps, otherwise only for rep.", (void*) NULL, 0);
   G__memfunc_setup("getTrackLen",1108,G__coreRootDict_605_0_55, 100, -1, -1, 0, 3, 1, 1, 8, 
"U 'genfit::AbsTrackRep' - 0 'NULL' rep i - - 0 '0' startId "
"i - - 0 '-1' endId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOF",553,G__coreRootDict_605_0_56, 100, -1, -1, 0, 3, 1, 1, 8, 
"U 'genfit::AbsTrackRep' - 0 'NULL' rep i - - 0 '0' startId "
"i - - 0 '-1' endId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("constructTrackCand",1872,G__coreRootDict_605_0_57, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLTrackCand), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fixWeights",1058,G__coreRootDict_605_0_58, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'genfit::AbsTrackRep' - 0 'NULL' rep i - - 0 '0' startId "
"i - - 0 '-1' endId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prune",554,G__coreRootDict_605_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"CFLWRMIU\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkConsistency",1680,G__coreRootDict_605_0_61, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trackHasChanged",1499,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillPointsWithMeasurement",2630,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__coreRootDict_605_0_64, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_605_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_605_0_66, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_605_0_67, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_605_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_605_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_605_0_73, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_605_0_74, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_605_0_75, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::Track::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__coreRootDict_605_0_76, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsBField(void) {
   /* genfit::AbsBField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsBField));
   G__memfunc_setup("get",320,G__coreRootDict_661_0_2, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - position", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("get",320,G__coreRootDict_661_0_3, 121, -1, -1, 0, 6, 1, 1, 8, 
"d - - 11 - posX d - - 11 - posY "
"d - - 11 - posZ d - - 1 - Bx "
"d - - 1 - By d - - 1 - Bz", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~AbsBField", 954, G__coreRootDict_661_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__coreRootDict_661_0_5, (int) ('u'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsBField), -1, 1, 1, 1, 1, 0, "u 'genfit::AbsBField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLFieldManager(void) {
   /* genfit::FieldManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager));
   G__memfunc_setup("getField",804,G__coreRootDict_672_0_1, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsBField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFieldVal",1095,G__coreRootDict_672_0_2, 117, G__get_linked_tagnum(&G__coreRootDictLN_TVector3), -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFieldVal",1095,G__coreRootDict_672_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - - 11 - posX d - - 11 - posY "
"d - - 11 - posZ d - - 1 - Bx "
"d - - 1 - By d - - 1 - Bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__coreRootDict_672_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genfit::AbsBField' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInitialized",1362,G__coreRootDict_672_0_5, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkInitialized",1652,G__coreRootDict_672_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkInstanciated",1749,G__coreRootDict_672_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::FieldManager::checkInstanciated) ), 0);
   G__memfunc_setup("useCache",801,G__coreRootDict_672_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - - 0 'true' opt h - - 0 '8' nBuckets", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInstance",1141,G__coreRootDict_672_0_9, 85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (genfit::FieldManager* (*)())(&genfit::FieldManager::getInstance) ), 0);
   G__memfunc_setup("FieldManager",1183,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("FieldManager", 1183, G__coreRootDict_672_0_11, (int) ('i'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager), -1, 0, 1, 1, 1, 0, "u 'genfit::FieldManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__coreRootDict_672_0_12, (int) ('u'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLFieldManager), -1, 1, 1, 1, 1, 0, "u 'genfit::FieldManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLRectangularFinitePlane(void) {
   /* genfit::RectangularFinitePlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane));
   G__memfunc_setup("RectangularFinitePlane",2247,G__coreRootDict_673_0_1, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane), -1, 0, 4, 1, 1, 0, 
"d - - 11 - - d - - 11 - - "
"d - - 11 - - d - - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RectangularFinitePlane",2247,G__coreRootDict_673_0_2, 105, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInActive",1007,(G__InterfaceMethod) NULL,103, -1, -1, 0, 2, 1, 1, 8, 
"d - - 0 - u d - - 0 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clone",529,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__coreRootDict_673_0_6, 85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genfit::RectangularFinitePlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__coreRootDict_673_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::RectangularFinitePlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__coreRootDict_673_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genfit::RectangularFinitePlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__coreRootDict_673_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genfit::RectangularFinitePlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__coreRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__coreRootDict_673_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__coreRootDict_673_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::RectangularFinitePlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__coreRootDict_673_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::RectangularFinitePlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__coreRootDict_673_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genfit::RectangularFinitePlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__coreRootDict_673_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genfit::RectangularFinitePlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RectangularFinitePlane", 2247, G__coreRootDict_673_0_18, (int) ('i'), 
G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane), -1, 0, 1, 1, 1, 0, "u 'genfit::RectangularFinitePlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RectangularFinitePlane", 2373, G__coreRootDict_673_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsFitter(void) {
   /* genfit::AbsFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitter));
   G__memfunc_setup("processTrackWithRep",1975,G__coreRootDict_674_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'genfit::Track' - 0 - - U 'genfit::AbsTrackRep' - 10 - - "
"g - - 0 'false' resortHits", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("processTrack",1268,G__coreRootDict_674_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'genfit::Track' - 0 - - g - - 0 'true' resortHits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugLvl",1121,G__coreRootDict_674_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 '1' lvl", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~AbsFitter", 1026, G__coreRootDict_674_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__coreRootDict_674_0_6, (int) ('u'), G__get_linked_tagnum(&G__coreRootDictLN_genfitcLcLAbsFitter), -1, 1, 1, 1, 1, 0, "u 'genfit::AbsFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunccoreRootDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalcoreRootDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funccoreRootDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__coreRootDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfit = { "genfit" , 110 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLAbsFinitePlane = { "genfit::AbsFinitePlane" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLDetPlane = { "genfit::DetPlane" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLSharedPlanePtr = { "genfit::SharedPlanePtr" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLMaterialProperties = { "genfit::MaterialProperties" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLStateOnPlane = { "genfit::StateOnPlane" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane = { "genfit::MeasuredStateOnPlane" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLAbsMeasurement = { "genfit::AbsMeasurement" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLAbsTrackRep = { "genfit::AbsTrackRep" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgR = { "vector<genfit::MatStep,allocator<genfit::MatStep> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::MatStep,allocator<genfit::MatStep> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLAbsHMatrix = { "genfit::AbsHMatrix" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLMeasurementOnPlane = { "genfit::MeasurementOnPlane" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLTrackPoint = { "genfit::TrackPoint" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLAbsFitterInfo = { "genfit::AbsFitterInfo" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLFitStatus = { "genfit::FitStatus" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgR = { "vector<TMatrixT<double>,allocator<TMatrixT<double> > >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMatrixT<double>,allocator<TMatrixT<double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLTrackCandHit = { "genfit::TrackCandHit" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR = { "set<int,less<int>,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLTrackCand = { "genfit::TrackCand" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR = { "vector<genfit::TrackCandHit*,allocator<genfit::TrackCandHit*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::TrackCandHit*,allocator<genfit::TrackCandHit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgR = { "vector<genfit::MeasurementOnPlane*,allocator<genfit::MeasurementOnPlane*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::MeasurementOnPlane*,allocator<genfit::MeasurementOnPlane*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLThinScatterer = { "genfit::ThinScatterer" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLTrack = { "genfit::Track" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLKalmanFitterInfo = { "genfit::KalmanFitterInfo" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR = { "vector<genfit::AbsMeasurement*,allocator<genfit::AbsMeasurement*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::AbsMeasurement*,allocator<genfit::AbsMeasurement*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsTrackRepmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsTrackRepmUgRsPgRsPgR = { "map<const genfit::AbsTrackRep*,genfit::AbsTrackRep*,less<const genfit::AbsTrackRep*>,allocator<pair<const genfit::AbsTrackRep* const,genfit::AbsTrackRep*> > >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgR = { "vector<const genfit::AbsTrackRep*,allocator<const genfit::AbsTrackRep*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const genfit::AbsTrackRep*,allocator<const genfit::AbsTrackRep*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR = { "vector<genfit::AbsFitterInfo*,allocator<genfit::AbsFitterInfo*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::AbsFitterInfo*,allocator<genfit::AbsFitterInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsFitterInfomUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsFitterInfomUgRsPgRsPgR = { "map<const genfit::AbsTrackRep*,genfit::AbsFitterInfo*,less<const genfit::AbsTrackRep*>,allocator<pair<const genfit::AbsTrackRep* const,genfit::AbsFitterInfo*> > >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLKalmanFitStatus = { "genfit::KalmanFitStatus" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLMeasurementFactorylEgenfitcLcLAbsMeasurementgR = { "genfit::MeasurementFactory<genfit::AbsMeasurement>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_maplEintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUgRsPgRsPgR = { "map<int,genfit::AbsMeasurementProducer<genfit::AbsMeasurement>*,less<int>,allocator<pair<const int,genfit::AbsMeasurementProducer<genfit::AbsMeasurement>*> > >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR = { "vector<genfit::TrackPoint*,allocator<genfit::TrackPoint*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::TrackPoint*,allocator<genfit::TrackPoint*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR = { "vector<genfit::AbsTrackRep*,allocator<genfit::AbsTrackRep*> >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::AbsTrackRep*,allocator<genfit::AbsTrackRep*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLFitStatusmUgRsPgRsPgR = { "map<const genfit::AbsTrackRep*,genfit::FitStatus*,less<const genfit::AbsTrackRep*>,allocator<pair<const genfit::AbsTrackRep* const,genfit::FitStatus*> > >" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLAbsBField = { "genfit::AbsBField" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLfieldCache = { "genfit::fieldCache" , 115 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLFieldManager = { "genfit::FieldManager" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLRectangularFinitePlane = { "genfit::RectangularFinitePlane" , 99 , -1 };
G__linked_taginfo G__coreRootDictLN_genfitcLcLAbsFitter = { "genfit::AbsFitter" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablecoreRootDict() {
  G__coreRootDictLN_TClass.tagnum = -1 ;
  G__coreRootDictLN_TBuffer.tagnum = -1 ;
  G__coreRootDictLN_TMemberInspector.tagnum = -1 ;
  G__coreRootDictLN_TObject.tagnum = -1 ;
  G__coreRootDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_genfit.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLAbsFinitePlane.tagnum = -1 ;
  G__coreRootDictLN_TVector2.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__coreRootDictLN_TVector3.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLDetPlane.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLSharedPlanePtr.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLMaterialProperties.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLStateOnPlane.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLAbsMeasurement.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLAbsTrackRep.tagnum = -1 ;
  G__coreRootDictLN_vectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLAbsHMatrix.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLMeasurementOnPlane.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLTrackPoint.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLAbsFitterInfo.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLFitStatus.tagnum = -1 ;
  G__coreRootDictLN_vectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLTrackCandHit.tagnum = -1 ;
  G__coreRootDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLTrackCand.tagnum = -1 ;
  G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLThinScatterer.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLTrack.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLKalmanFitterInfo.tagnum = -1 ;
  G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsTrackRepmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsTrackRepmUgRsPgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsFitterInfomUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsFitterInfomUgRsPgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLKalmanFitStatus.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLMeasurementFactorylEgenfitcLcLAbsMeasurementgR.tagnum = -1 ;
  G__coreRootDictLN_maplEintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUgRsPgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLFitStatusmUgRsPgRsPgR.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLAbsBField.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLfieldCache.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLFieldManager.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLRectangularFinitePlane.tagnum = -1 ;
  G__coreRootDictLN_genfitcLcLAbsFitter.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablecoreRootDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLAbsFinitePlane),sizeof(genfit::AbsFinitePlane),-1,265987,(char*)NULL,G__setup_memvargenfitcLcLAbsFinitePlane,G__setup_memfuncgenfitcLcLAbsFinitePlane);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TVector2);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLDetPlane),sizeof(genfit::DetPlane),-1,130816,(char*)NULL,G__setup_memvargenfitcLcLDetPlane,G__setup_memfuncgenfitcLcLDetPlane);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLSharedPlanePtr);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLMaterialProperties),sizeof(genfit::MaterialProperties),-1,323840,(char*)NULL,G__setup_memvargenfitcLcLMaterialProperties,G__setup_memfuncgenfitcLcLMaterialProperties);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLStateOnPlane),sizeof(genfit::StateOnPlane),-1,130304,(char*)NULL,G__setup_memvargenfitcLcLStateOnPlane,G__setup_memfuncgenfitcLcLStateOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLMeasuredStateOnPlane),sizeof(genfit::MeasuredStateOnPlane),-1,327424,(char*)NULL,G__setup_memvargenfitcLcLMeasuredStateOnPlane,G__setup_memfuncgenfitcLcLMeasuredStateOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLAbsMeasurement),sizeof(genfit::AbsMeasurement),-1,327428,(char*)NULL,G__setup_memvargenfitcLcLAbsMeasurement,G__setup_memfuncgenfitcLcLAbsMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLAbsTrackRep),sizeof(genfit::AbsTrackRep),-1,327456,(char*)NULL,G__setup_memvargenfitcLcLAbsTrackRep,G__setup_memfuncgenfitcLcLAbsTrackRep);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMatStepcOallocatorlEgenfitcLcLMatStepgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLAbsHMatrix),sizeof(genfit::AbsHMatrix),-1,294659,(char*)NULL,G__setup_memvargenfitcLcLAbsHMatrix,G__setup_memfuncgenfitcLcLAbsHMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLMeasurementOnPlane),sizeof(genfit::MeasurementOnPlane),-1,130816,(char*)NULL,G__setup_memvargenfitcLcLMeasurementOnPlane,G__setup_memfuncgenfitcLcLMeasurementOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLTrackPoint),sizeof(genfit::TrackPoint),-1,130816,(char*)NULL,G__setup_memvargenfitcLcLTrackPoint,G__setup_memfuncgenfitcLcLTrackPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLAbsFitterInfo),sizeof(genfit::AbsFitterInfo),-1,130830,(char*)NULL,G__setup_memvargenfitcLcLAbsFitterInfo,G__setup_memfuncgenfitcLcLAbsFitterInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLFitStatus),sizeof(genfit::FitStatus),-1,263424,(char*)NULL,G__setup_memvargenfitcLcLFitStatus,G__setup_memfuncgenfitcLcLFitStatus);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlETMatrixTlEdoublegRcOallocatorlETMatrixTlEdoublegRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLTrackCandHit),sizeof(genfit::TrackCandHit),-1,294656,(char*)NULL,G__setup_memvargenfitcLcLTrackCandHit,G__setup_memfuncgenfitcLcLTrackCandHit);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLTrackCand),sizeof(genfit::TrackCand),-1,294656,(char*)NULL,G__setup_memvargenfitcLcLTrackCand,G__setup_memfuncgenfitcLcLTrackCand);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitmUcOallocatorlEgenfitcLcLTrackCandHitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLMeasurementOnPlanemUcOallocatorlEgenfitcLcLMeasurementOnPlanemUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLThinScatterer),sizeof(genfit::ThinScatterer),-1,127232,(char*)NULL,G__setup_memvargenfitcLcLThinScatterer,G__setup_memfuncgenfitcLcLThinScatterer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLTrack),sizeof(genfit::Track),-1,130816,(char*)NULL,G__setup_memvargenfitcLcLTrack,G__setup_memfuncgenfitcLcLTrack);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLKalmanFitterInfo);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsTrackRepmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsTrackRepmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEconstsPgenfitcLcLAbsTrackRepmUcOallocatorlEconstsPgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsFitterInfomUcOallocatorlEgenfitcLcLAbsFitterInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLAbsFitterInfomUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLAbsFitterInfomUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLKalmanFitStatus);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLMeasurementFactorylEgenfitcLcLAbsMeasurementgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_maplEintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOgenfitcLcLAbsMeasurementProducerlEgenfitcLcLAbsMeasurementgRmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointmUcOallocatorlEgenfitcLcLTrackPointmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_maplEconstsPgenfitcLcLAbsTrackRepmUcOgenfitcLcLFitStatusmUcOlesslEconstsPgenfitcLcLAbsTrackRepmUgRcOallocatorlEpairlEconstsPgenfitcLcLAbsTrackRepmUsPconstcOgenfitcLcLFitStatusmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLAbsBField),sizeof(genfit::AbsBField),-1,263425,(char*)NULL,G__setup_memvargenfitcLcLAbsBField,G__setup_memfuncgenfitcLcLAbsBField);
   G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLfieldCache);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLFieldManager),sizeof(genfit::FieldManager),-1,263424,(char*)NULL,G__setup_memvargenfitcLcLFieldManager,G__setup_memfuncgenfitcLcLFieldManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLRectangularFinitePlane),sizeof(genfit::RectangularFinitePlane),-1,296192,(char*)NULL,G__setup_memvargenfitcLcLRectangularFinitePlane,G__setup_memfuncgenfitcLcLRectangularFinitePlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__coreRootDictLN_genfitcLcLAbsFitter),sizeof(genfit::AbsFitter),-1,263425,(char*)NULL,G__setup_memvargenfitcLcLAbsFitter,G__setup_memfuncgenfitcLcLAbsFitter);
}
extern "C" void G__cpp_setupcoreRootDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupcoreRootDict()");
  G__set_cpp_environmentcoreRootDict();
  G__cpp_setup_tagtablecoreRootDict();

  G__cpp_setup_inheritancecoreRootDict();

  G__cpp_setup_typetablecoreRootDict();

  G__cpp_setup_memvarcoreRootDict();

  G__cpp_setup_memfunccoreRootDict();
  G__cpp_setup_globalcoreRootDict();
  G__cpp_setup_funccoreRootDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunccoreRootDict();
  return;
}
class G__cpp_setup_initcoreRootDict {
  public:
    G__cpp_setup_initcoreRootDict() { G__add_setup_func("coreRootDict",(G__incsetup)(&G__cpp_setupcoreRootDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initcoreRootDict() { G__remove_setup_func("coreRootDict"); }
};
G__cpp_setup_initcoreRootDict G__cpp_setup_initializercoreRootDict;

