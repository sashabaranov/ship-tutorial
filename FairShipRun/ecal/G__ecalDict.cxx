//
// File generated by /opt/ocean/FairSoftInst/bin/rootcint at Thu Oct  8 06:25:09 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIinputdIFairShipRundIecaldIG__ecalDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__ecalDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void ecalPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalPoint(void *p = 0);
   static void *newArray_ecalPoint(Long_t size, void *p);
   static void delete_ecalPoint(void *p);
   static void deleteArray_ecalPoint(void *p);
   static void destruct_ecalPoint(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalPoint*)
   {
      ::ecalPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalPoint", ::ecalPoint::Class_Version(), "/input/FairShip/ecal/ecalPoint.h", 13,
                  typeid(::ecalPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalPoint::Dictionary, isa_proxy, 4,
                  sizeof(::ecalPoint) );
      instance.SetNew(&new_ecalPoint);
      instance.SetNewArray(&newArray_ecalPoint);
      instance.SetDelete(&delete_ecalPoint);
      instance.SetDeleteArray(&deleteArray_ecalPoint);
      instance.SetDestructor(&destruct_ecalPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalPoint*)
   {
      return GenerateInitInstanceLocal((::ecalPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecal(void *p = 0);
   static void *newArray_ecal(Long_t size, void *p);
   static void delete_ecal(void *p);
   static void deleteArray_ecal(void *p);
   static void destruct_ecal(void *p);
   static void streamer_ecal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecal*)
   {
      ::ecal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecal", ::ecal::Class_Version(), "/input/FairShip/ecal/ecal.h", 33,
                  typeid(::ecal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecal::Dictionary, isa_proxy, 0,
                  sizeof(::ecal) );
      instance.SetNew(&new_ecal);
      instance.SetNewArray(&newArray_ecal);
      instance.SetDelete(&delete_ecal);
      instance.SetDeleteArray(&deleteArray_ecal);
      instance.SetDestructor(&destruct_ecal);
      instance.SetStreamerFunc(&streamer_ecal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecal*)
   {
      return GenerateInitInstanceLocal((::ecal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalInf_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalInf(void *p = 0);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalInf*)
   {
      ::ecalInf *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalInf >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalInf", ::ecalInf::Class_Version(), "/input/FairShip/ecal/ecalInf.h", 20,
                  typeid(::ecalInf), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalInf::Dictionary, isa_proxy, 4,
                  sizeof(::ecalInf) );
      instance.SetNew(&new_ecalInf);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalInf*)
   {
      return GenerateInitInstanceLocal((::ecalInf*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalInf*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_ecalCell(void *p);
   static void deleteArray_ecalCell(void *p);
   static void destruct_ecalCell(void *p);
   static void streamer_ecalCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalCell*)
   {
      ::ecalCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalCell", ::ecalCell::Class_Version(), "/input/FairShip/ecal/ecalCell.h", 17,
                  typeid(::ecalCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalCell::Dictionary, isa_proxy, 0,
                  sizeof(::ecalCell) );
      instance.SetDelete(&delete_ecalCell);
      instance.SetDeleteArray(&deleteArray_ecalCell);
      instance.SetDestructor(&destruct_ecalCell);
      instance.SetStreamerFunc(&streamer_ecalCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalCell*)
   {
      return GenerateInitInstanceLocal((::ecalCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalModule(void *p = 0);
   static void *newArray_ecalModule(Long_t size, void *p);
   static void delete_ecalModule(void *p);
   static void deleteArray_ecalModule(void *p);
   static void destruct_ecalModule(void *p);
   static void streamer_ecalModule(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalModule*)
   {
      ::ecalModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalModule", ::ecalModule::Class_Version(), "/input/FairShip/ecal/ecalModule.h", 17,
                  typeid(::ecalModule), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalModule::Dictionary, isa_proxy, 0,
                  sizeof(::ecalModule) );
      instance.SetNew(&new_ecalModule);
      instance.SetNewArray(&newArray_ecalModule);
      instance.SetDelete(&delete_ecalModule);
      instance.SetDeleteArray(&deleteArray_ecalModule);
      instance.SetDestructor(&destruct_ecalModule);
      instance.SetStreamerFunc(&streamer_ecalModule);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalModule*)
   {
      return GenerateInitInstanceLocal((::ecalModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalStructure_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_ecalStructure(void *p);
   static void deleteArray_ecalStructure(void *p);
   static void destruct_ecalStructure(void *p);
   static void streamer_ecalStructure(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalStructure*)
   {
      ::ecalStructure *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalStructure >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalStructure", ::ecalStructure::Class_Version(), "/input/FairShip/ecal/ecalStructure.h", 25,
                  typeid(::ecalStructure), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalStructure::Dictionary, isa_proxy, 0,
                  sizeof(::ecalStructure) );
      instance.SetDelete(&delete_ecalStructure);
      instance.SetDeleteArray(&deleteArray_ecalStructure);
      instance.SetDestructor(&destruct_ecalStructure);
      instance.SetStreamerFunc(&streamer_ecalStructure);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalStructure*)
   {
      return GenerateInitInstanceLocal((::ecalStructure*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalStructure*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalLightMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalLightMap(void *p = 0);
   static void *newArray_ecalLightMap(Long_t size, void *p);
   static void delete_ecalLightMap(void *p);
   static void deleteArray_ecalLightMap(void *p);
   static void destruct_ecalLightMap(void *p);
   static void streamer_ecalLightMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalLightMap*)
   {
      ::ecalLightMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalLightMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalLightMap", ::ecalLightMap::Class_Version(), "/input/FairShip/ecal/ecalLightMap.h", 7,
                  typeid(::ecalLightMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalLightMap::Dictionary, isa_proxy, 0,
                  sizeof(::ecalLightMap) );
      instance.SetNew(&new_ecalLightMap);
      instance.SetNewArray(&newArray_ecalLightMap);
      instance.SetDelete(&delete_ecalLightMap);
      instance.SetDeleteArray(&deleteArray_ecalLightMap);
      instance.SetDestructor(&destruct_ecalLightMap);
      instance.SetStreamerFunc(&streamer_ecalLightMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalLightMap*)
   {
      return GenerateInitInstanceLocal((::ecalLightMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalLightMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalContFact(void *p = 0);
   static void *newArray_ecalContFact(Long_t size, void *p);
   static void delete_ecalContFact(void *p);
   static void deleteArray_ecalContFact(void *p);
   static void destruct_ecalContFact(void *p);
   static void streamer_ecalContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalContFact*)
   {
      ::ecalContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalContFact", ::ecalContFact::Class_Version(), "/input/FairShip/ecal/ecalContFact.h", 9,
                  typeid(::ecalContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalContFact::Dictionary, isa_proxy, 0,
                  sizeof(::ecalContFact) );
      instance.SetNew(&new_ecalContFact);
      instance.SetNewArray(&newArray_ecalContFact);
      instance.SetDelete(&delete_ecalContFact);
      instance.SetDeleteArray(&deleteArray_ecalContFact);
      instance.SetDestructor(&destruct_ecalContFact);
      instance.SetStreamerFunc(&streamer_ecalContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalContFact*)
   {
      return GenerateInitInstanceLocal((::ecalContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalCellMC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_ecalCellMC(void *p);
   static void deleteArray_ecalCellMC(void *p);
   static void destruct_ecalCellMC(void *p);
   static void streamer_ecalCellMC(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalCellMC*)
   {
      ::ecalCellMC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalCellMC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalCellMC", ::ecalCellMC::Class_Version(), "/input/FairShip/ecal/ecalCellMC.h", 19,
                  typeid(::ecalCellMC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalCellMC::Dictionary, isa_proxy, 0,
                  sizeof(::ecalCellMC) );
      instance.SetDelete(&delete_ecalCellMC);
      instance.SetDeleteArray(&deleteArray_ecalCellMC);
      instance.SetDestructor(&destruct_ecalCellMC);
      instance.SetStreamerFunc(&streamer_ecalCellMC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalCellMC*)
   {
      return GenerateInitInstanceLocal((::ecalCellMC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalCellMC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalStructureFiller_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalStructureFiller(void *p = 0);
   static void *newArray_ecalStructureFiller(Long_t size, void *p);
   static void delete_ecalStructureFiller(void *p);
   static void deleteArray_ecalStructureFiller(void *p);
   static void destruct_ecalStructureFiller(void *p);
   static void streamer_ecalStructureFiller(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalStructureFiller*)
   {
      ::ecalStructureFiller *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalStructureFiller >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalStructureFiller", ::ecalStructureFiller::Class_Version(), "/input/FairShip/ecal/ecalStructureFiller.h", 24,
                  typeid(::ecalStructureFiller), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalStructureFiller::Dictionary, isa_proxy, 0,
                  sizeof(::ecalStructureFiller) );
      instance.SetNew(&new_ecalStructureFiller);
      instance.SetNewArray(&newArray_ecalStructureFiller);
      instance.SetDelete(&delete_ecalStructureFiller);
      instance.SetDeleteArray(&deleteArray_ecalStructureFiller);
      instance.SetDestructor(&destruct_ecalStructureFiller);
      instance.SetStreamerFunc(&streamer_ecalStructureFiller);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalStructureFiller*)
   {
      return GenerateInitInstanceLocal((::ecalStructureFiller*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalStructureFiller*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalDigi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalDigi(void *p = 0);
   static void *newArray_ecalDigi(Long_t size, void *p);
   static void delete_ecalDigi(void *p);
   static void deleteArray_ecalDigi(void *p);
   static void destruct_ecalDigi(void *p);
   static void streamer_ecalDigi(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalDigi*)
   {
      ::ecalDigi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalDigi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalDigi", ::ecalDigi::Class_Version(), "/input/FairShip/ecal/ecalDigi.h", 14,
                  typeid(::ecalDigi), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalDigi::Dictionary, isa_proxy, 0,
                  sizeof(::ecalDigi) );
      instance.SetNew(&new_ecalDigi);
      instance.SetNewArray(&newArray_ecalDigi);
      instance.SetDelete(&delete_ecalDigi);
      instance.SetDeleteArray(&deleteArray_ecalDigi);
      instance.SetDestructor(&destruct_ecalDigi);
      instance.SetStreamerFunc(&streamer_ecalDigi);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalDigi*)
   {
      return GenerateInitInstanceLocal((::ecalDigi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalDigi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalPrepare_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalPrepare(void *p = 0);
   static void *newArray_ecalPrepare(Long_t size, void *p);
   static void delete_ecalPrepare(void *p);
   static void deleteArray_ecalPrepare(void *p);
   static void destruct_ecalPrepare(void *p);
   static void streamer_ecalPrepare(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalPrepare*)
   {
      ::ecalPrepare *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalPrepare >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalPrepare", ::ecalPrepare::Class_Version(), "/input/FairShip/ecal/ecalPrepare.h", 14,
                  typeid(::ecalPrepare), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalPrepare::Dictionary, isa_proxy, 0,
                  sizeof(::ecalPrepare) );
      instance.SetNew(&new_ecalPrepare);
      instance.SetNewArray(&newArray_ecalPrepare);
      instance.SetDelete(&delete_ecalPrepare);
      instance.SetDeleteArray(&deleteArray_ecalPrepare);
      instance.SetDestructor(&destruct_ecalPrepare);
      instance.SetStreamerFunc(&streamer_ecalPrepare);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalPrepare*)
   {
      return GenerateInitInstanceLocal((::ecalPrepare*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalPrepare*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalAnalysisSimple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalAnalysisSimple(void *p = 0);
   static void *newArray_ecalAnalysisSimple(Long_t size, void *p);
   static void delete_ecalAnalysisSimple(void *p);
   static void deleteArray_ecalAnalysisSimple(void *p);
   static void destruct_ecalAnalysisSimple(void *p);
   static void streamer_ecalAnalysisSimple(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalAnalysisSimple*)
   {
      ::ecalAnalysisSimple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalAnalysisSimple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalAnalysisSimple", ::ecalAnalysisSimple::Class_Version(), "/input/FairShip/ecal/ecalAnalysisSimple.h", 15,
                  typeid(::ecalAnalysisSimple), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalAnalysisSimple::Dictionary, isa_proxy, 0,
                  sizeof(::ecalAnalysisSimple) );
      instance.SetNew(&new_ecalAnalysisSimple);
      instance.SetNewArray(&newArray_ecalAnalysisSimple);
      instance.SetDelete(&delete_ecalAnalysisSimple);
      instance.SetDeleteArray(&deleteArray_ecalAnalysisSimple);
      instance.SetDestructor(&destruct_ecalAnalysisSimple);
      instance.SetStreamerFunc(&streamer_ecalAnalysisSimple);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalAnalysisSimple*)
   {
      return GenerateInitInstanceLocal((::ecalAnalysisSimple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalAnalysisSimple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalAnalysisMaterial_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalAnalysisMaterial(void *p = 0);
   static void *newArray_ecalAnalysisMaterial(Long_t size, void *p);
   static void delete_ecalAnalysisMaterial(void *p);
   static void deleteArray_ecalAnalysisMaterial(void *p);
   static void destruct_ecalAnalysisMaterial(void *p);
   static void streamer_ecalAnalysisMaterial(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalAnalysisMaterial*)
   {
      ::ecalAnalysisMaterial *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalAnalysisMaterial >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalAnalysisMaterial", ::ecalAnalysisMaterial::Class_Version(), "/input/FairShip/ecal/ecalAnalysisMaterial.h", 15,
                  typeid(::ecalAnalysisMaterial), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalAnalysisMaterial::Dictionary, isa_proxy, 0,
                  sizeof(::ecalAnalysisMaterial) );
      instance.SetNew(&new_ecalAnalysisMaterial);
      instance.SetNewArray(&newArray_ecalAnalysisMaterial);
      instance.SetDelete(&delete_ecalAnalysisMaterial);
      instance.SetDeleteArray(&deleteArray_ecalAnalysisMaterial);
      instance.SetDestructor(&destruct_ecalAnalysisMaterial);
      instance.SetStreamerFunc(&streamer_ecalAnalysisMaterial);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalAnalysisMaterial*)
   {
      return GenerateInitInstanceLocal((::ecalAnalysisMaterial*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalAnalysisMaterial*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalMaximum_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalMaximum(void *p = 0);
   static void *newArray_ecalMaximum(Long_t size, void *p);
   static void delete_ecalMaximum(void *p);
   static void deleteArray_ecalMaximum(void *p);
   static void destruct_ecalMaximum(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalMaximum*)
   {
      ::ecalMaximum *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalMaximum >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalMaximum", ::ecalMaximum::Class_Version(), "/input/FairShip/ecal/ecalMaximum.h", 10,
                  typeid(::ecalMaximum), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalMaximum::Dictionary, isa_proxy, 4,
                  sizeof(::ecalMaximum) );
      instance.SetNew(&new_ecalMaximum);
      instance.SetNewArray(&newArray_ecalMaximum);
      instance.SetDelete(&delete_ecalMaximum);
      instance.SetDeleteArray(&deleteArray_ecalMaximum);
      instance.SetDestructor(&destruct_ecalMaximum);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalMaximum*)
   {
      return GenerateInitInstanceLocal((::ecalMaximum*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalMaximum*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalMaximumLocator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalMaximumLocator(void *p = 0);
   static void *newArray_ecalMaximumLocator(Long_t size, void *p);
   static void delete_ecalMaximumLocator(void *p);
   static void deleteArray_ecalMaximumLocator(void *p);
   static void destruct_ecalMaximumLocator(void *p);
   static void streamer_ecalMaximumLocator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalMaximumLocator*)
   {
      ::ecalMaximumLocator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalMaximumLocator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalMaximumLocator", ::ecalMaximumLocator::Class_Version(), "/input/FairShip/ecal/ecalMaximumLocator.h", 11,
                  typeid(::ecalMaximumLocator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalMaximumLocator::Dictionary, isa_proxy, 0,
                  sizeof(::ecalMaximumLocator) );
      instance.SetNew(&new_ecalMaximumLocator);
      instance.SetNewArray(&newArray_ecalMaximumLocator);
      instance.SetDelete(&delete_ecalMaximumLocator);
      instance.SetDeleteArray(&deleteArray_ecalMaximumLocator);
      instance.SetDestructor(&destruct_ecalMaximumLocator);
      instance.SetStreamerFunc(&streamer_ecalMaximumLocator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalMaximumLocator*)
   {
      return GenerateInitInstanceLocal((::ecalMaximumLocator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalMaximumLocator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalCluster(void *p = 0);
   static void *newArray_ecalCluster(Long_t size, void *p);
   static void delete_ecalCluster(void *p);
   static void deleteArray_ecalCluster(void *p);
   static void destruct_ecalCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalCluster*)
   {
      ::ecalCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalCluster", ::ecalCluster::Class_Version(), "/input/FairShip/ecal/ecalCluster.h", 25,
                  typeid(::ecalCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalCluster::Dictionary, isa_proxy, 4,
                  sizeof(::ecalCluster) );
      instance.SetNew(&new_ecalCluster);
      instance.SetNewArray(&newArray_ecalCluster);
      instance.SetDelete(&delete_ecalCluster);
      instance.SetDeleteArray(&deleteArray_ecalCluster);
      instance.SetDestructor(&destruct_ecalCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalCluster*)
   {
      return GenerateInitInstanceLocal((::ecalCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalClusterFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalClusterFinder(void *p = 0);
   static void *newArray_ecalClusterFinder(Long_t size, void *p);
   static void delete_ecalClusterFinder(void *p);
   static void deleteArray_ecalClusterFinder(void *p);
   static void destruct_ecalClusterFinder(void *p);
   static void streamer_ecalClusterFinder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalClusterFinder*)
   {
      ::ecalClusterFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalClusterFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalClusterFinder", ::ecalClusterFinder::Class_Version(), "/input/FairShip/ecal/ecalClusterFinder.h", 19,
                  typeid(::ecalClusterFinder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalClusterFinder::Dictionary, isa_proxy, 0,
                  sizeof(::ecalClusterFinder) );
      instance.SetNew(&new_ecalClusterFinder);
      instance.SetNewArray(&newArray_ecalClusterFinder);
      instance.SetDelete(&delete_ecalClusterFinder);
      instance.SetDeleteArray(&deleteArray_ecalClusterFinder);
      instance.SetDestructor(&destruct_ecalClusterFinder);
      instance.SetStreamerFunc(&streamer_ecalClusterFinder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalClusterFinder*)
   {
      return GenerateInitInstanceLocal((::ecalClusterFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalClusterFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalClusterCalibration_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalClusterCalibration(void *p = 0);
   static void *newArray_ecalClusterCalibration(Long_t size, void *p);
   static void delete_ecalClusterCalibration(void *p);
   static void deleteArray_ecalClusterCalibration(void *p);
   static void destruct_ecalClusterCalibration(void *p);
   static void streamer_ecalClusterCalibration(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalClusterCalibration*)
   {
      ::ecalClusterCalibration *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalClusterCalibration >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalClusterCalibration", ::ecalClusterCalibration::Class_Version(), "/input/FairShip/ecal/ecalClusterCalibration.h", 14,
                  typeid(::ecalClusterCalibration), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalClusterCalibration::Dictionary, isa_proxy, 0,
                  sizeof(::ecalClusterCalibration) );
      instance.SetNew(&new_ecalClusterCalibration);
      instance.SetNewArray(&newArray_ecalClusterCalibration);
      instance.SetDelete(&delete_ecalClusterCalibration);
      instance.SetDeleteArray(&deleteArray_ecalClusterCalibration);
      instance.SetDestructor(&destruct_ecalClusterCalibration);
      instance.SetStreamerFunc(&streamer_ecalClusterCalibration);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalClusterCalibration*)
   {
      return GenerateInitInstanceLocal((::ecalClusterCalibration*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalClusterCalibration*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalDrawer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalDrawer(void *p = 0);
   static void *newArray_ecalDrawer(Long_t size, void *p);
   static void delete_ecalDrawer(void *p);
   static void deleteArray_ecalDrawer(void *p);
   static void destruct_ecalDrawer(void *p);
   static void streamer_ecalDrawer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalDrawer*)
   {
      ::ecalDrawer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalDrawer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalDrawer", ::ecalDrawer::Class_Version(), "/input/FairShip/ecal/ecalDrawer.h", 29,
                  typeid(::ecalDrawer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalDrawer::Dictionary, isa_proxy, 0,
                  sizeof(::ecalDrawer) );
      instance.SetNew(&new_ecalDrawer);
      instance.SetNewArray(&newArray_ecalDrawer);
      instance.SetDelete(&delete_ecalDrawer);
      instance.SetDeleteArray(&deleteArray_ecalDrawer);
      instance.SetDestructor(&destruct_ecalDrawer);
      instance.SetStreamerFunc(&streamer_ecalDrawer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalDrawer*)
   {
      return GenerateInitInstanceLocal((::ecalDrawer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalDrawer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalReconstructed_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalReconstructed(void *p = 0);
   static void *newArray_ecalReconstructed(Long_t size, void *p);
   static void delete_ecalReconstructed(void *p);
   static void deleteArray_ecalReconstructed(void *p);
   static void destruct_ecalReconstructed(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalReconstructed*)
   {
      ::ecalReconstructed *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalReconstructed >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalReconstructed", ::ecalReconstructed::Class_Version(), "/input/FairShip/ecal/ecalReconstructed.h", 7,
                  typeid(::ecalReconstructed), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalReconstructed::Dictionary, isa_proxy, 4,
                  sizeof(::ecalReconstructed) );
      instance.SetNew(&new_ecalReconstructed);
      instance.SetNewArray(&newArray_ecalReconstructed);
      instance.SetDelete(&delete_ecalReconstructed);
      instance.SetDeleteArray(&deleteArray_ecalReconstructed);
      instance.SetDestructor(&destruct_ecalReconstructed);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalReconstructed*)
   {
      return GenerateInitInstanceLocal((::ecalReconstructed*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalReconstructed*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalReco_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalReco(void *p = 0);
   static void *newArray_ecalReco(Long_t size, void *p);
   static void delete_ecalReco(void *p);
   static void deleteArray_ecalReco(void *p);
   static void destruct_ecalReco(void *p);
   static void streamer_ecalReco(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalReco*)
   {
      ::ecalReco *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalReco >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalReco", ::ecalReco::Class_Version(), "/input/FairShip/ecal/ecalReco.h", 17,
                  typeid(::ecalReco), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalReco::Dictionary, isa_proxy, 0,
                  sizeof(::ecalReco) );
      instance.SetNew(&new_ecalReco);
      instance.SetNewArray(&newArray_ecalReco);
      instance.SetDelete(&delete_ecalReco);
      instance.SetDeleteArray(&deleteArray_ecalReco);
      instance.SetDestructor(&destruct_ecalReco);
      instance.SetStreamerFunc(&streamer_ecalReco);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalReco*)
   {
      return GenerateInitInstanceLocal((::ecalReco*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalReco*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ecalMatch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ecalMatch(void *p = 0);
   static void *newArray_ecalMatch(Long_t size, void *p);
   static void delete_ecalMatch(void *p);
   static void deleteArray_ecalMatch(void *p);
   static void destruct_ecalMatch(void *p);
   static void streamer_ecalMatch(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ecalMatch*)
   {
      ::ecalMatch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ecalMatch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ecalMatch", ::ecalMatch::Class_Version(), "/input/FairShip/ecal/ecalMatch.h", 12,
                  typeid(::ecalMatch), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ecalMatch::Dictionary, isa_proxy, 0,
                  sizeof(::ecalMatch) );
      instance.SetNew(&new_ecalMatch);
      instance.SetNewArray(&newArray_ecalMatch);
      instance.SetDelete(&delete_ecalMatch);
      instance.SetDeleteArray(&deleteArray_ecalMatch);
      instance.SetDestructor(&destruct_ecalMatch);
      instance.SetStreamerFunc(&streamer_ecalMatch);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ecalMatch*)
   {
      return GenerateInitInstanceLocal((::ecalMatch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ecalMatch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr ecalPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalPoint::Class_Name()
{
   return "ecalPoint";
}

//______________________________________________________________________________
const char *ecalPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPoint*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecal::Class_Name()
{
   return "ecal";
}

//______________________________________________________________________________
const char *ecal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalInf::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalInf::Class_Name()
{
   return "ecalInf";
}

//______________________________________________________________________________
const char *ecalInf::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalInf*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalInf::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalInf*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalInf::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalInf*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalInf::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalInf*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalCell::Class_Name()
{
   return "ecalCell";
}

//______________________________________________________________________________
const char *ecalCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalModule::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalModule::Class_Name()
{
   return "ecalModule";
}

//______________________________________________________________________________
const char *ecalModule::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalModule::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalModule::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalModule::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalModule*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalStructure::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalStructure::Class_Name()
{
   return "ecalStructure";
}

//______________________________________________________________________________
const char *ecalStructure::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructure*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalStructure::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructure*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalStructure::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructure*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalStructure::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructure*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalLightMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalLightMap::Class_Name()
{
   return "ecalLightMap";
}

//______________________________________________________________________________
const char *ecalLightMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalLightMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalLightMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalLightMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalLightMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalLightMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalLightMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalLightMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalContFact::Class_Name()
{
   return "ecalContFact";
}

//______________________________________________________________________________
const char *ecalContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalCellMC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalCellMC::Class_Name()
{
   return "ecalCellMC";
}

//______________________________________________________________________________
const char *ecalCellMC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCellMC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalCellMC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCellMC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalCellMC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCellMC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalCellMC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCellMC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalStructureFiller::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalStructureFiller::Class_Name()
{
   return "ecalStructureFiller";
}

//______________________________________________________________________________
const char *ecalStructureFiller::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructureFiller*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalStructureFiller::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructureFiller*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalStructureFiller::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructureFiller*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalStructureFiller::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalStructureFiller*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalDigi::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalDigi::Class_Name()
{
   return "ecalDigi";
}

//______________________________________________________________________________
const char *ecalDigi::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDigi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalDigi::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDigi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalDigi::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDigi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalDigi::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDigi*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalPrepare::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalPrepare::Class_Name()
{
   return "ecalPrepare";
}

//______________________________________________________________________________
const char *ecalPrepare::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPrepare*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalPrepare::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPrepare*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalPrepare::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPrepare*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalPrepare::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalPrepare*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalAnalysisSimple::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalAnalysisSimple::Class_Name()
{
   return "ecalAnalysisSimple";
}

//______________________________________________________________________________
const char *ecalAnalysisSimple::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisSimple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalAnalysisSimple::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisSimple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalAnalysisSimple::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisSimple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalAnalysisSimple::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisSimple*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalAnalysisMaterial::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalAnalysisMaterial::Class_Name()
{
   return "ecalAnalysisMaterial";
}

//______________________________________________________________________________
const char *ecalAnalysisMaterial::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisMaterial*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalAnalysisMaterial::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisMaterial*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalAnalysisMaterial::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisMaterial*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalAnalysisMaterial::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalAnalysisMaterial*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalMaximum::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalMaximum::Class_Name()
{
   return "ecalMaximum";
}

//______________________________________________________________________________
const char *ecalMaximum::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximum*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalMaximum::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximum*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalMaximum::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximum*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalMaximum::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximum*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalMaximumLocator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalMaximumLocator::Class_Name()
{
   return "ecalMaximumLocator";
}

//______________________________________________________________________________
const char *ecalMaximumLocator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximumLocator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalMaximumLocator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximumLocator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalMaximumLocator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximumLocator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalMaximumLocator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMaximumLocator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalCluster::Class_Name()
{
   return "ecalCluster";
}

//______________________________________________________________________________
const char *ecalCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalClusterFinder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalClusterFinder::Class_Name()
{
   return "ecalClusterFinder";
}

//______________________________________________________________________________
const char *ecalClusterFinder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalClusterFinder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalClusterFinder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalClusterFinder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterFinder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalClusterCalibration::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalClusterCalibration::Class_Name()
{
   return "ecalClusterCalibration";
}

//______________________________________________________________________________
const char *ecalClusterCalibration::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterCalibration*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalClusterCalibration::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterCalibration*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalClusterCalibration::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterCalibration*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalClusterCalibration::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalClusterCalibration*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalDrawer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalDrawer::Class_Name()
{
   return "ecalDrawer";
}

//______________________________________________________________________________
const char *ecalDrawer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDrawer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalDrawer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDrawer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalDrawer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDrawer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalDrawer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalDrawer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalReconstructed::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalReconstructed::Class_Name()
{
   return "ecalReconstructed";
}

//______________________________________________________________________________
const char *ecalReconstructed::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReconstructed*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalReconstructed::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReconstructed*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalReconstructed::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReconstructed*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalReconstructed::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReconstructed*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalReco::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalReco::Class_Name()
{
   return "ecalReco";
}

//______________________________________________________________________________
const char *ecalReco::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReco*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalReco::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReco*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalReco::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReco*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalReco::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalReco*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ecalMatch::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ecalMatch::Class_Name()
{
   return "ecalMatch";
}

//______________________________________________________________________________
const char *ecalMatch::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMatch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ecalMatch::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMatch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ecalMatch::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMatch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ecalMatch::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ecalMatch*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void ecalContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalContFact.

   FairContFact::Streamer(R__b);
}

//______________________________________________________________________________
void ecalContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalContFact.
      TClass *R__cl = ::ecalContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalContFact(void *p) {
      return  p ? new(p) ::ecalContFact : new ::ecalContFact;
   }
   static void *newArray_ecalContFact(Long_t nElements, void *p) {
      return p ? new(p) ::ecalContFact[nElements] : new ::ecalContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalContFact(void *p) {
      delete ((::ecalContFact*)p);
   }
   static void deleteArray_ecalContFact(void *p) {
      delete [] ((::ecalContFact*)p);
   }
   static void destruct_ecalContFact(void *p) {
      typedef ::ecalContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalContFact(TBuffer &buf, void *obj) {
      ((::ecalContFact*)obj)->::ecalContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalContFact

//______________________________________________________________________________
void ecal::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairDetector::Streamer(R__b);
      R__b >> fSemiX;
      R__b >> fSemiY;
      R__b.CheckByteCount(R__s, R__c, ecal::IsA());
   } else {
      R__c = R__b.WriteVersion(ecal::IsA(), kTRUE);
      FairDetector::Streamer(R__b);
      R__b << fSemiX;
      R__b << fSemiY;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecal.
      TClass *R__cl = ::ecal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInf", &fInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDebug", &fDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackID", &fTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolumeID", &fVolumeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos", &fPos);
      R__insp.InspectMember(fPos, "fPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMom", &fMom);
      R__insp.InspectMember(fMom, "fMom.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fELoss", &fELoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosIndex", &fPosIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEcalCollection", &fEcalCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLiteCollection", &fLiteCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcalSize[3]", fEcalSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimpleGeo", &fSimpleGeo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXSize", &fXSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYSize", &fYSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDX", &fDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDY", &fDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleSize", &fModuleSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZEcal", &fZEcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiX", &fSemiX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiY", &fSemiY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessLead", &fThicknessLead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessScin", &fThicknessScin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessTyvk", &fThicknessTyvk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessLayer", &fThicknessLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessSteel", &fThicknessSteel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEdging", &fEdging);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHoleRad", &fHoleRad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiberRad", &fFiberRad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXCell[5]", fXCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYCell[5]", fYCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNH[5]", fNH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCF[5]", fCF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLightMapNames[5]", fLightMapNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLightMaps[5]", &fLightMaps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLayers", &fNLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleLenght", &fModuleLenght);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeoScale", &fGeoScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNColumns1", &fNColumns1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRows1", &fNRows1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNColumns2", &fNColumns2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRows2", &fNRows2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNColumns", &fNColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRows", &fNRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolIdMax", &fVolIdMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstNumber", &fFirstNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolArr[6]", fVolArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fModules[5]", &fModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCells[5]", &fCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fScTiles[5]", &fScTiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTileEdging[5]", &fTileEdging);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPbTiles[5]", &fPbTiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTvTiles[5]", &fTvTiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHoleVol[3]", &fHoleVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFiberVol[3]", &fFiberVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSteelTapes[2]", &fSteelTapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHolePos[5]", &fHolePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModulesWithType[5]", fModulesWithType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawNumber", (void*)&fRawNumber);
      R__insp.InspectMember("list<std::pair<Int_t,TGeoVolume*> >", (void*)&fRawNumber, "fRawNumber.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStructureId", &fStructureId);
      FairDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecal(void *p) {
      return  p ? new(p) ::ecal : new ::ecal;
   }
   static void *newArray_ecal(Long_t nElements, void *p) {
      return p ? new(p) ::ecal[nElements] : new ::ecal[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecal(void *p) {
      delete ((::ecal*)p);
   }
   static void deleteArray_ecal(void *p) {
      delete [] ((::ecal*)p);
   }
   static void destruct_ecal(void *p) {
      typedef ::ecal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecal(TBuffer &buf, void *obj) {
      ((::ecal*)obj)->::ecal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecal

//______________________________________________________________________________
void ecalPoint::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalPoint.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ecalPoint::Class(),this);
   } else {
      R__b.WriteClassBuffer(ecalPoint::Class(),this);
   }
}

//______________________________________________________________________________
void ecalPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalPoint.
      TClass *R__cl = ::ecalPoint::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdgCode", &fPdgCode);
      FairMCPoint::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalPoint(void *p) {
      return  p ? new(p) ::ecalPoint : new ::ecalPoint;
   }
   static void *newArray_ecalPoint(Long_t nElements, void *p) {
      return p ? new(p) ::ecalPoint[nElements] : new ::ecalPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalPoint(void *p) {
      delete ((::ecalPoint*)p);
   }
   static void deleteArray_ecalPoint(void *p) {
      delete [] ((::ecalPoint*)p);
   }
   static void destruct_ecalPoint(void *p) {
      typedef ::ecalPoint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ecalPoint

//______________________________________________________________________________
void ecalLightMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalLightMap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, ecalLightMap::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalLightMap::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalLightMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalLightMap.
      TClass *R__cl = ::ecalLightMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSSide", &fSSide);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fS", &fS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalLightMap(void *p) {
      return  p ? new(p) ::ecalLightMap : new ::ecalLightMap;
   }
   static void *newArray_ecalLightMap(Long_t nElements, void *p) {
      return p ? new(p) ::ecalLightMap[nElements] : new ::ecalLightMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalLightMap(void *p) {
      delete ((::ecalLightMap*)p);
   }
   static void deleteArray_ecalLightMap(void *p) {
      delete [] ((::ecalLightMap*)p);
   }
   static void destruct_ecalLightMap(void *p) {
      typedef ::ecalLightMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalLightMap(TBuffer &buf, void *obj) {
      ((::ecalLightMap*)obj)->::ecalLightMap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalLightMap

//______________________________________________________________________________
void ecalCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fNumber;
      R__b >> fX1;
      R__b >> fY1;
      R__b >> fX2;
      R__b >> fY2;
      R__b >> fType;
      R__b >> fEnergy;
      R__b >> fADC;
      {
         list<ecalCell*> &R__stl =  fNeighbors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(ecalCell));
         if (R__tcl1==0) {
            Error("fNeighbors streamer","Missing the TClass object for ecalCell!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            ecalCell* R__t;
            R__t = (ecalCell*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         list<ecalCell*> &R__stl =  f5x5Cluster;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(ecalCell));
         if (R__tcl1==0) {
            Error("f5x5Cluster streamer","Missing the TClass object for ecalCell!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            ecalCell* R__t;
            R__t = (ecalCell*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> fTime;
      R__b.CheckByteCount(R__s, R__c, ecalCell::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fNumber;
      R__b << fX1;
      R__b << fY1;
      R__b << fX2;
      R__b << fY2;
      R__b << fType;
      R__b << fEnergy;
      R__b << fADC;
      {
         list<ecalCell*> &R__stl =  fNeighbors;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            list<ecalCell*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         list<ecalCell*> &R__stl =  f5x5Cluster;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            list<ecalCell*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fTime;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalCell.
      TClass *R__cl = ::ecalCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumber", &fNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX1", &fX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY1", &fY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX2", &fX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY2", &fY2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeighbors", (void*)&fNeighbors);
      R__insp.InspectMember("list<ecalCell*>", (void*)&fNeighbors, "fNeighbors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f5x5Cluster", (void*)&f5x5Cluster);
      R__insp.InspectMember("list<ecalCell*>", (void*)&f5x5Cluster, "f5x5Cluster.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_ecalCell(void *p) {
      delete ((::ecalCell*)p);
   }
   static void deleteArray_ecalCell(void *p) {
      delete [] ((::ecalCell*)p);
   }
   static void destruct_ecalCell(void *p) {
      typedef ::ecalCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalCell(TBuffer &buf, void *obj) {
      ((::ecalCell*)obj)->::ecalCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalCell

//______________________________________________________________________________
void ecalCellMC::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalCellMC.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      ecalCell::Streamer(R__b);
      {
         map<Int_t,Float_t> &R__stl =  fTrackEnergy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            float R__t2;
            R__b >> R__t2;
            typedef int Value_t;
            std::pair<Value_t const, float > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<Int_t,Float_t> &R__stl =  fTrackTime;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            float R__t2;
            R__b >> R__t2;
            typedef int Value_t;
            std::pair<Value_t const, float > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b.CheckByteCount(R__s, R__c, ecalCellMC::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalCellMC::IsA(), kTRUE);
      ecalCell::Streamer(R__b);
      {
         map<Int_t,Float_t> &R__stl =  fTrackEnergy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<Int_t,Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b << ((*R__k).second);
            }
         }
      }
      {
         map<Int_t,Float_t> &R__stl =  fTrackTime;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<Int_t,Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b << ((*R__k).second);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalCellMC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalCellMC.
      TClass *R__cl = ::ecalCellMC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackEnergy", (void*)&fTrackEnergy);
      R__insp.InspectMember("map<Int_t,Float_t>", (void*)&fTrackEnergy, "fTrackEnergy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackTime", (void*)&fTrackTime);
      R__insp.InspectMember("map<Int_t,Float_t>", (void*)&fTrackTime, "fTrackTime.", false);
      ecalCell::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_ecalCellMC(void *p) {
      delete ((::ecalCellMC*)p);
   }
   static void deleteArray_ecalCellMC(void *p) {
      delete [] ((::ecalCellMC*)p);
   }
   static void destruct_ecalCellMC(void *p) {
      typedef ::ecalCellMC current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalCellMC(TBuffer &buf, void *obj) {
      ((::ecalCellMC*)obj)->::ecalCellMC::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalCellMC

//______________________________________________________________________________
void ecalModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalModule.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      ecalCell::Streamer(R__b);
      R__b >> fDx;
      R__b >> fDy;
      {
         vector<ecalCell*> &R__stl =  fCells;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(ecalCell));
         if (R__tcl1==0) {
            Error("fCells streamer","Missing the TClass object for ecalCell!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            ecalCell* R__t;
            R__t = (ecalCell*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, ecalModule::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalModule::IsA(), kTRUE);
      ecalCell::Streamer(R__b);
      R__b << fDx;
      R__b << fDy;
      {
         vector<ecalCell*> &R__stl =  fCells;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ecalCell*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalModule.
      TClass *R__cl = ::ecalModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCells", (void*)&fCells);
      R__insp.InspectMember("vector<ecalCell*>", (void*)&fCells, "fCells.", false);
      ecalCell::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalModule(void *p) {
      return  p ? new(p) ::ecalModule : new ::ecalModule;
   }
   static void *newArray_ecalModule(Long_t nElements, void *p) {
      return p ? new(p) ::ecalModule[nElements] : new ::ecalModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalModule(void *p) {
      delete ((::ecalModule*)p);
   }
   static void deleteArray_ecalModule(void *p) {
      delete [] ((::ecalModule*)p);
   }
   static void destruct_ecalModule(void *p) {
      typedef ::ecalModule current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalModule(TBuffer &buf, void *obj) {
      ((::ecalModule*)obj)->::ecalModule::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalModule

//______________________________________________________________________________
void ecalInf::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalInf.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ecalInf::Class(),this);
   } else {
      R__b.WriteClassBuffer(ecalInf::Class(),this);
   }
}

//______________________________________________________________________________
void ecalInf::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalInf.
      TClass *R__cl = ::ecalInf::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVariables", &fVariables);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcalStr", &fEcalStr);
      R__insp.InspectMember(fEcalStr, "fEcalStr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXPos", &fXPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYPos", &fYPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZPos", &fZPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLayers", &fNLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXSize", &fXSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYSize", &fYSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleSize", &fModuleSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLead", &fLead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScin", &fScin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTyveec", &fTyveec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessLayer", &fThicknessLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellSize", &fCellSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcalSize[3]", fEcalSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fECut", &fECut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHCut", &fHCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiX", &fSemiX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiY", &fSemiY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFastMC", &fFastMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSuccess", &fSuccess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalInf(void *p) {
      return  p ? new(p) ::ecalInf : new ::ecalInf;
   }
} // end of namespace ROOTDict for class ::ecalInf

//______________________________________________________________________________
void ecalStructure::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalStructure.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fUseMC;
      R__b >> fX1;
      R__b >> fY1;
      R__b >> fEcalInf;
      {
         vector<ecalModule*> &R__stl =  fStructure;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(ecalModule));
         if (R__tcl1==0) {
            Error("fStructure streamer","Missing the TClass object for ecalModule!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            ecalModule* R__t;
            R__t = (ecalModule*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         list<ecalCell*> &R__stl =  fCells;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(ecalCell));
         if (R__tcl1==0) {
            Error("fCells streamer","Missing the TClass object for ecalCell!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            ecalCell* R__t;
            R__t = (ecalCell*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<__ecalCellWrapper*> &R__stl =  fHash;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(__ecalCellWrapper));
         if (R__tcl1==0) {
            Error("fHash streamer","Missing the TClass object for __ecalCellWrapper!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            __ecalCellWrapper* R__t;
            R__t = (__ecalCellWrapper*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, ecalStructure::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalStructure::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fUseMC;
      R__b << fX1;
      R__b << fY1;
      R__b << fEcalInf;
      {
         vector<ecalModule*> &R__stl =  fStructure;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ecalModule*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         list<ecalCell*> &R__stl =  fCells;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            list<ecalCell*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<__ecalCellWrapper*> &R__stl =  fHash;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(__ecalCellWrapper));
         if (R__tcl1==0) {
            Error("fHash streamer","Missing the TClass object for __ecalCellWrapper!");
            return;
         }
            vector<__ecalCellWrapper*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.WriteObjectAny((*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalStructure::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalStructure.
      TClass *R__cl = ::ecalStructure::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseMC", &fUseMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX1", &fX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY1", &fY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEcalInf", &fEcalInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStructure", (void*)&fStructure);
      R__insp.InspectMember("vector<ecalModule*>", (void*)&fStructure, "fStructure.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCells", (void*)&fCells);
      R__insp.InspectMember("list<ecalCell*>", (void*)&fCells, "fCells.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHash", (void*)&fHash);
      R__insp.InspectMember("vector<__ecalCellWrapper*>", (void*)&fHash, "fHash.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_ecalStructure(void *p) {
      delete ((::ecalStructure*)p);
   }
   static void deleteArray_ecalStructure(void *p) {
      delete [] ((::ecalStructure*)p);
   }
   static void destruct_ecalStructure(void *p) {
      typedef ::ecalStructure current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalStructure(TBuffer &buf, void *obj) {
      ((::ecalStructure*)obj)->::ecalStructure::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalStructure

//______________________________________________________________________________
void ecalStructureFiller::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalStructureFiller.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fStr;
      R__b >> fInf;
      fListECALpts->Streamer(R__b);
      R__b >> fInited;
      R__b >> fUseMCPoints;
      R__b >> fStoreTrackInfo;
      fFileGeo.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, ecalStructureFiller::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalStructureFiller::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fStr;
      R__b << fInf;
      fListECALpts->Streamer(R__b);
      R__b << fInited;
      R__b << fUseMCPoints;
      R__b << fStoreTrackInfo;
      fFileGeo.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalStructureFiller::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalStructureFiller.
      TClass *R__cl = ::ecalStructureFiller::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInf", &fInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fListECALpts", &fListECALpts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInited", &fInited);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseMCPoints", &fUseMCPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreTrackInfo", &fStoreTrackInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileGeo", &fFileGeo);
      R__insp.InspectMember(fFileGeo, "fFileGeo.");
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalStructureFiller(void *p) {
      return  p ? new(p) ::ecalStructureFiller : new ::ecalStructureFiller;
   }
   static void *newArray_ecalStructureFiller(Long_t nElements, void *p) {
      return p ? new(p) ::ecalStructureFiller[nElements] : new ::ecalStructureFiller[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalStructureFiller(void *p) {
      delete ((::ecalStructureFiller*)p);
   }
   static void deleteArray_ecalStructureFiller(void *p) {
      delete [] ((::ecalStructureFiller*)p);
   }
   static void destruct_ecalStructureFiller(void *p) {
      typedef ::ecalStructureFiller current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalStructureFiller(TBuffer &buf, void *obj) {
      ((::ecalStructureFiller*)obj)->::ecalStructureFiller::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalStructureFiller

//______________________________________________________________________________
void ecalDigi::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalDigi.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fPedestal;
      R__b >> fADCMax;
      R__b >> fADCNoise;
      R__b >> fADCChannel;
      R__b.CheckByteCount(R__s, R__c, ecalDigi::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalDigi::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fPedestal;
      R__b << fADCMax;
      R__b << fADCNoise;
      R__b << fADCChannel;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalDigi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalDigi.
      TClass *R__cl = ::ecalDigi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedestal", &fPedestal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCMax", &fADCMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCNoise", &fADCNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCChannel", &fADCChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChannelMap", (void*)&fChannelMap);
      R__insp.InspectMember("map<Int_t,Float_t>", (void*)&fChannelMap, "fChannelMap.", true);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalDigi(void *p) {
      return  p ? new(p) ::ecalDigi : new ::ecalDigi;
   }
   static void *newArray_ecalDigi(Long_t nElements, void *p) {
      return p ? new(p) ::ecalDigi[nElements] : new ::ecalDigi[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalDigi(void *p) {
      delete ((::ecalDigi*)p);
   }
   static void deleteArray_ecalDigi(void *p) {
      delete [] ((::ecalDigi*)p);
   }
   static void destruct_ecalDigi(void *p) {
      typedef ::ecalDigi current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalDigi(TBuffer &buf, void *obj) {
      ((::ecalDigi*)obj)->::ecalDigi::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalDigi

//______________________________________________________________________________
void ecalPrepare::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalPrepare.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fPedestal;
      R__b >> fADCMax;
      R__b >> fADCChannel;
      R__b.CheckByteCount(R__s, R__c, ecalPrepare::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalPrepare::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fPedestal;
      R__b << fADCMax;
      R__b << fADCChannel;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalPrepare::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalPrepare.
      TClass *R__cl = ::ecalPrepare::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedestal", &fPedestal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCMax", &fADCMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCChannel", &fADCChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChannelMap", (void*)&fChannelMap);
      R__insp.InspectMember("map<Int_t,Float_t>", (void*)&fChannelMap, "fChannelMap.", true);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalPrepare(void *p) {
      return  p ? new(p) ::ecalPrepare : new ::ecalPrepare;
   }
   static void *newArray_ecalPrepare(Long_t nElements, void *p) {
      return p ? new(p) ::ecalPrepare[nElements] : new ::ecalPrepare[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalPrepare(void *p) {
      delete ((::ecalPrepare*)p);
   }
   static void deleteArray_ecalPrepare(void *p) {
      delete [] ((::ecalPrepare*)p);
   }
   static void destruct_ecalPrepare(void *p) {
      typedef ::ecalPrepare current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalPrepare(TBuffer &buf, void *obj) {
      ((::ecalPrepare*)obj)->::ecalPrepare::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalPrepare

//______________________________________________________________________________
void ecalAnalysisSimple::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalAnalysisSimple.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fTree;
      R__b >> fX;
      R__b >> fY;
      R__b >> fCX;
      R__b >> fCY;
      R__b >> fP;
      R__b >> fCE;
      R__b >> fOE;
      R__b >> fPX;
      R__b >> fPY;
      R__b >> fPZ;
      R__b >> fEv;
      R__b >> fCellNum;
      R__b >> fADC;
      R__b >> fStr;
      fTracks->Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, ecalAnalysisSimple::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalAnalysisSimple::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fTree;
      R__b << fX;
      R__b << fY;
      R__b << fCX;
      R__b << fCY;
      R__b << fP;
      R__b << fCE;
      R__b << fOE;
      R__b << fPX;
      R__b << fPY;
      R__b << fPZ;
      R__b << fEv;
      R__b << fCellNum;
      R__b << fADC;
      R__b << fStr;
      fTracks->Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalAnalysisSimple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalAnalysisSimple.
      TClass *R__cl = ::ecalAnalysisSimple::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCX", &fCX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCY", &fCY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP", &fP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCE", &fCE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOE", &fOE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPX", &fPX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPY", &fPY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPZ", &fPZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEv", &fEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellNum", &fCellNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTracks", &fTracks);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalAnalysisSimple(void *p) {
      return  p ? new(p) ::ecalAnalysisSimple : new ::ecalAnalysisSimple;
   }
   static void *newArray_ecalAnalysisSimple(Long_t nElements, void *p) {
      return p ? new(p) ::ecalAnalysisSimple[nElements] : new ::ecalAnalysisSimple[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalAnalysisSimple(void *p) {
      delete ((::ecalAnalysisSimple*)p);
   }
   static void deleteArray_ecalAnalysisSimple(void *p) {
      delete [] ((::ecalAnalysisSimple*)p);
   }
   static void destruct_ecalAnalysisSimple(void *p) {
      typedef ::ecalAnalysisSimple current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalAnalysisSimple(TBuffer &buf, void *obj) {
      ((::ecalAnalysisSimple*)obj)->::ecalAnalysisSimple::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalAnalysisSimple

//______________________________________________________________________________
void ecalAnalysisMaterial::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalAnalysisMaterial.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fEvent;
      R__b >> fX;
      R__b >> fY;
      R__b >> fZ;
      R__b >> fX0;
      R__b.ReadStaticArray((double*)fX0z);
      R__b >> fIntL;
      R__b.CheckByteCount(R__s, R__c, ecalAnalysisMaterial::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalAnalysisMaterial::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fEvent;
      R__b << fX;
      R__b << fY;
      R__b << fZ;
      R__b << fX0;
      R__b.WriteArray(fX0z, 400);
      R__b << fIntL;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalAnalysisMaterial::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalAnalysisMaterial.
      TClass *R__cl = ::ecalAnalysisMaterial::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX0", &fX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX0z[400]", fX0z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntL", &fIntL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMC", &fMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRadLen", &fRadLen);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalAnalysisMaterial(void *p) {
      return  p ? new(p) ::ecalAnalysisMaterial : new ::ecalAnalysisMaterial;
   }
   static void *newArray_ecalAnalysisMaterial(Long_t nElements, void *p) {
      return p ? new(p) ::ecalAnalysisMaterial[nElements] : new ::ecalAnalysisMaterial[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalAnalysisMaterial(void *p) {
      delete ((::ecalAnalysisMaterial*)p);
   }
   static void deleteArray_ecalAnalysisMaterial(void *p) {
      delete [] ((::ecalAnalysisMaterial*)p);
   }
   static void destruct_ecalAnalysisMaterial(void *p) {
      typedef ::ecalAnalysisMaterial current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalAnalysisMaterial(TBuffer &buf, void *obj) {
      ((::ecalAnalysisMaterial*)obj)->::ecalAnalysisMaterial::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalAnalysisMaterial

//______________________________________________________________________________
void ecalMaximum::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalMaximum.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ecalMaximum::Class(),this);
   } else {
      R__b.WriteClassBuffer(ecalMaximum::Class(),this);
   }
}

//______________________________________________________________________________
void ecalMaximum::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalMaximum.
      TClass *R__cl = ::ecalMaximum::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCell", &fCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCX", &fCX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCY", &fCY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMark", &fMark);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalMaximum(void *p) {
      return  p ? new(p) ::ecalMaximum : new ::ecalMaximum;
   }
   static void *newArray_ecalMaximum(Long_t nElements, void *p) {
      return p ? new(p) ::ecalMaximum[nElements] : new ::ecalMaximum[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalMaximum(void *p) {
      delete ((::ecalMaximum*)p);
   }
   static void deleteArray_ecalMaximum(void *p) {
      delete [] ((::ecalMaximum*)p);
   }
   static void destruct_ecalMaximum(void *p) {
      typedef ::ecalMaximum current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ecalMaximum

//______________________________________________________________________________
void ecalMaximumLocator::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalMaximumLocator.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      fMaximums->Streamer(R__b);
      R__b >> fStr;
      R__b >> fECut;
      R__b >> fEvent;
      R__b.CheckByteCount(R__s, R__c, ecalMaximumLocator::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalMaximumLocator::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      fMaximums->Streamer(R__b);
      R__b << fStr;
      R__b << fECut;
      R__b << fEvent;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalMaximumLocator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalMaximumLocator.
      TClass *R__cl = ::ecalMaximumLocator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaximums", &fMaximums);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fECut", &fECut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvent", &fEvent);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalMaximumLocator(void *p) {
      return  p ? new(p) ::ecalMaximumLocator : new ::ecalMaximumLocator;
   }
   static void *newArray_ecalMaximumLocator(Long_t nElements, void *p) {
      return p ? new(p) ::ecalMaximumLocator[nElements] : new ::ecalMaximumLocator[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalMaximumLocator(void *p) {
      delete ((::ecalMaximumLocator*)p);
   }
   static void deleteArray_ecalMaximumLocator(void *p) {
      delete [] ((::ecalMaximumLocator*)p);
   }
   static void destruct_ecalMaximumLocator(void *p) {
      typedef ::ecalMaximumLocator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalMaximumLocator(TBuffer &buf, void *obj) {
      ((::ecalMaximumLocator*)obj)->::ecalMaximumLocator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalMaximumLocator

//______________________________________________________________________________
void ecalCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ecalCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(ecalCluster::Class(),this);
   }
}

//______________________________________________________________________________
void ecalCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalCluster.
      TClass *R__cl = ::ecalCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNum", &fNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxs", &fMaxs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreCalibrated", &fPreCalibrated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMoment", &fMoment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomentX", &fMomentX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomentY", &fMomentY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellNums", &fCellNums);
      R__insp.InspectMember(fCellNums, "fCellNums.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeakNums", &fPeakNums);
      R__insp.InspectMember(fPeakNums, "fPeakNums.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreEnergy", &fPreEnergy);
      R__insp.InspectMember(fPreEnergy, "fPreEnergy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaximums", &fMaximums);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalCluster(void *p) {
      return  p ? new(p) ::ecalCluster : new ::ecalCluster;
   }
   static void *newArray_ecalCluster(Long_t nElements, void *p) {
      return p ? new(p) ::ecalCluster[nElements] : new ::ecalCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalCluster(void *p) {
      delete ((::ecalCluster*)p);
   }
   static void deleteArray_ecalCluster(void *p) {
      delete [] ((::ecalCluster*)p);
   }
   static void destruct_ecalCluster(void *p) {
      typedef ::ecalCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ecalCluster

//______________________________________________________________________________
void ecalClusterFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalClusterFinder.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fEv;
      R__b >> fMinClusterE;
      R__b >> fMinMaxE;
      R__b.CheckByteCount(R__s, R__c, ecalClusterFinder::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalClusterFinder::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fEv;
      R__b << fMinClusterE;
      R__b << fMinMaxE;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalClusterFinder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalClusterFinder.
      TClass *R__cl = ::ecalClusterFinder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEv", &fEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaximums", &fMaximums);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalib", &fCalib);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInf", &fInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreClusters", (void*)&fPreClusters);
      R__insp.InspectMember("list<ecalPreCluster*>", (void*)&fPreClusters, "fPreClusters.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinClusterE", &fMinClusterE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinMaxE", &fMinMaxE);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalClusterFinder(void *p) {
      return  p ? new(p) ::ecalClusterFinder : new ::ecalClusterFinder;
   }
   static void *newArray_ecalClusterFinder(Long_t nElements, void *p) {
      return p ? new(p) ::ecalClusterFinder[nElements] : new ::ecalClusterFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalClusterFinder(void *p) {
      delete ((::ecalClusterFinder*)p);
   }
   static void deleteArray_ecalClusterFinder(void *p) {
      delete [] ((::ecalClusterFinder*)p);
   }
   static void destruct_ecalClusterFinder(void *p) {
      typedef ::ecalClusterFinder current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalClusterFinder(TBuffer &buf, void *obj) {
      ((::ecalClusterFinder*)obj)->::ecalClusterFinder::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalClusterFinder

//______________________________________________________________________________
void ecalClusterCalibration::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalClusterCalibration.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, ecalClusterCalibration::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalClusterCalibration::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalClusterCalibration::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalClusterCalibration.
      TClass *R__cl = ::ecalClusterCalibration::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStraightCalibration[10]", &fStraightCalibration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibration[10]", &fCalibration);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalClusterCalibration(void *p) {
      return  p ? new(p) ::ecalClusterCalibration : new ::ecalClusterCalibration;
   }
   static void *newArray_ecalClusterCalibration(Long_t nElements, void *p) {
      return p ? new(p) ::ecalClusterCalibration[nElements] : new ::ecalClusterCalibration[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalClusterCalibration(void *p) {
      delete ((::ecalClusterCalibration*)p);
   }
   static void deleteArray_ecalClusterCalibration(void *p) {
      delete [] ((::ecalClusterCalibration*)p);
   }
   static void destruct_ecalClusterCalibration(void *p) {
      typedef ::ecalClusterCalibration current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalClusterCalibration(TBuffer &buf, void *obj) {
      ((::ecalClusterCalibration*)obj)->::ecalClusterCalibration::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalClusterCalibration

//______________________________________________________________________________
void ecalDrawer::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalDrawer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fCellSize;
      R__b >> fCX;
      R__b >> fCY;
      R__b >> fMaxEnergyDep;
      fInName.Streamer(R__b);
      R__b >> fEventN;
      R__b >> fX;
      R__b >> fY;
      R__b >> fZ;
      R__b >> fMCX;
      R__b >> fMCY;
      R__b >> fMCZ;
      R__b >> fMCMotherTrN;
      R__b >> fE;
      R__b >> fMCE;
      R__b >> fPX;
      R__b >> fPY;
      R__b >> fPZ;
      R__b >> fMCPX;
      R__b >> fMCPY;
      R__b >> fMCPZ;
      R__b >> fChi2;
      R__b >> fPdgCode;
      R__b >> fR;
      R__b.CheckByteCount(R__s, R__c, ecalDrawer::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalDrawer::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fCellSize;
      R__b << fCX;
      R__b << fCY;
      R__b << fMaxEnergyDep;
      fInName.Streamer(R__b);
      R__b << fEventN;
      R__b << fX;
      R__b << fY;
      R__b << fZ;
      R__b << fMCX;
      R__b << fMCY;
      R__b << fMCZ;
      R__b << fMCMotherTrN;
      R__b << fE;
      R__b << fMCE;
      R__b << fPX;
      R__b << fPY;
      R__b << fPZ;
      R__b << fMCPX;
      R__b << fMCPY;
      R__b << fMCPZ;
      R__b << fChi2;
      R__b << fPdgCode;
      R__b << fR;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalDrawer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalDrawer.
      TClass *R__cl = ::ecalDrawer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamePrefix", &fNamePrefix);
      R__insp.InspectMember(fNamePrefix, "fNamePrefix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fC", &fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellSize", &fCellSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCX", &fCX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCY", &fCY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEnergyDep", &fMaxEnergyDep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInf", &fInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEdging", &fEdging);
      R__insp.InspectMember(fEdging, "fEdging.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTxt", &fTxt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCells", (void*)&fCells);
      R__insp.InspectMember("list<ecalDrawerItem*>", (void*)&fCells, "fCells.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCTracks", &fMCTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPoints", &fPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInName", &fInName);
      R__insp.InspectMember(fInName, "fInName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventN", &fEventN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCX", &fMCX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCY", &fMCY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCZ", &fMCZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCMotherTrN", &fMCMotherTrN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fE", &fE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCE", &fMCE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPX", &fPX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPY", &fPY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPZ", &fPZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCPX", &fMCPX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCPY", &fMCPY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCPZ", &fMCPZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdgCode", &fPdgCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fR", &fR);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalDrawer(void *p) {
      return  p ? new(p) ::ecalDrawer : new ::ecalDrawer;
   }
   static void *newArray_ecalDrawer(Long_t nElements, void *p) {
      return p ? new(p) ::ecalDrawer[nElements] : new ::ecalDrawer[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalDrawer(void *p) {
      delete ((::ecalDrawer*)p);
   }
   static void deleteArray_ecalDrawer(void *p) {
      delete [] ((::ecalDrawer*)p);
   }
   static void destruct_ecalDrawer(void *p) {
      typedef ::ecalDrawer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalDrawer(TBuffer &buf, void *obj) {
      ((::ecalDrawer*)obj)->::ecalDrawer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalDrawer

//______________________________________________________________________________
void ecalReconstructed::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalReconstructed.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ecalReconstructed::Class(),this);
   } else {
      R__b.WriteClassBuffer(ecalReconstructed::Class(),this);
   }
}

//______________________________________________________________________________
void ecalReconstructed::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalReconstructed.
      TClass *R__cl = ::ecalReconstructed::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawE", &fRawE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoE", &fRecoE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellNum", &fCellNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterNum", &fClusterNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCTrack", &fMCTrack);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalReconstructed(void *p) {
      return  p ? new(p) ::ecalReconstructed : new ::ecalReconstructed;
   }
   static void *newArray_ecalReconstructed(Long_t nElements, void *p) {
      return p ? new(p) ::ecalReconstructed[nElements] : new ::ecalReconstructed[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalReconstructed(void *p) {
      delete ((::ecalReconstructed*)p);
   }
   static void deleteArray_ecalReconstructed(void *p) {
      delete [] ((::ecalReconstructed*)p);
   }
   static void destruct_ecalReconstructed(void *p) {
      typedef ::ecalReconstructed current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ecalReconstructed

//______________________________________________________________________________
void ecalReco::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalReco.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fEv;
      R__b >> fN;
      R__b >> fRejected;
      R__b >> fRejectedP;
      R__b.CheckByteCount(R__s, R__c, ecalReco::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalReco::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fEv;
      R__b << fN;
      R__b << fRejected;
      R__b << fRejectedP;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalReco::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalReco.
      TClass *R__cl = ::ecalReco::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEv", &fEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRejected", &fRejected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRejectedP", &fRejectedP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReconstucted", &fReconstucted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalib", &fCalib);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalReco(void *p) {
      return  p ? new(p) ::ecalReco : new ::ecalReco;
   }
   static void *newArray_ecalReco(Long_t nElements, void *p) {
      return p ? new(p) ::ecalReco[nElements] : new ::ecalReco[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalReco(void *p) {
      delete ((::ecalReco*)p);
   }
   static void deleteArray_ecalReco(void *p) {
      delete [] ((::ecalReco*)p);
   }
   static void destruct_ecalReco(void *p) {
      typedef ::ecalReco current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalReco(TBuffer &buf, void *obj) {
      ((::ecalReco*)obj)->::ecalReco::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalReco

//______________________________________________________________________________
void ecalMatch::Streamer(TBuffer &R__b)
{
   // Stream an object of class ecalMatch.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fEv;
      R__b >> fN;
      R__b >> fRejected;
      R__b >> fUse3x3;
      R__b.CheckByteCount(R__s, R__c, ecalMatch::IsA());
   } else {
      R__c = R__b.WriteVersion(ecalMatch::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fEv;
      R__b << fN;
      R__b << fRejected;
      R__b << fUse3x3;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void ecalMatch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ecalMatch.
      TClass *R__cl = ::ecalMatch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEv", &fEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRejected", &fRejected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUse3x3", &fUse3x3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReconstucted", &fReconstucted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCTracks", &fMCTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ecalMatch(void *p) {
      return  p ? new(p) ::ecalMatch : new ::ecalMatch;
   }
   static void *newArray_ecalMatch(Long_t nElements, void *p) {
      return p ? new(p) ::ecalMatch[nElements] : new ::ecalMatch[nElements];
   }
   // Wrapper around operator delete
   static void delete_ecalMatch(void *p) {
      delete ((::ecalMatch*)p);
   }
   static void deleteArray_ecalMatch(void *p) {
      delete [] ((::ecalMatch*)p);
   }
   static void destruct_ecalMatch(void *p) {
      typedef ::ecalMatch current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ecalMatch(TBuffer &buf, void *obj) {
      ((::ecalMatch*)obj)->::ecalMatch::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ecalMatch

namespace ROOTDict {
   void listlEecalCellmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void listlEecalCellmUgR_Dictionary();
   static void *new_listlEecalCellmUgR(void *p = 0);
   static void *newArray_listlEecalCellmUgR(Long_t size, void *p);
   static void delete_listlEecalCellmUgR(void *p);
   static void deleteArray_listlEecalCellmUgR(void *p);
   static void destruct_listlEecalCellmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const list<ecalCell*>*)
   {
      list<ecalCell*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(list<ecalCell*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("list<ecalCell*>", -2, "prec_stl/list", 44,
                  typeid(list<ecalCell*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &listlEecalCellmUgR_Dictionary, isa_proxy, 0,
                  sizeof(list<ecalCell*>) );
      instance.SetNew(&new_listlEecalCellmUgR);
      instance.SetNewArray(&newArray_listlEecalCellmUgR);
      instance.SetDelete(&delete_listlEecalCellmUgR);
      instance.SetDeleteArray(&deleteArray_listlEecalCellmUgR);
      instance.SetDestructor(&destruct_listlEecalCellmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< list<ecalCell*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const list<ecalCell*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void listlEecalCellmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const list<ecalCell*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_listlEecalCellmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) list<ecalCell*> : new list<ecalCell*>;
   }
   static void *newArray_listlEecalCellmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) list<ecalCell*>[nElements] : new list<ecalCell*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_listlEecalCellmUgR(void *p) {
      delete ((list<ecalCell*>*)p);
   }
   static void deleteArray_listlEecalCellmUgR(void *p) {
      delete [] ((list<ecalCell*>*)p);
   }
   static void destruct_listlEecalCellmUgR(void *p) {
      typedef list<ecalCell*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class list<ecalCell*>

namespace ROOTDict {
   void maplEintcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOfloatgR_Dictionary();
   static void *new_maplEintcOfloatgR(void *p = 0);
   static void *newArray_maplEintcOfloatgR(Long_t size, void *p);
   static void delete_maplEintcOfloatgR(void *p);
   static void deleteArray_maplEintcOfloatgR(void *p);
   static void destruct_maplEintcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<int,float>*)
   {
      map<int,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,float>", -2, "prec_stl/map", 63,
                  typeid(map<int,float>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEintcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,float>) );
      instance.SetNew(&new_maplEintcOfloatgR);
      instance.SetNewArray(&newArray_maplEintcOfloatgR);
      instance.SetDelete(&delete_maplEintcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOfloatgR);
      instance.SetDestructor(&destruct_maplEintcOfloatgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<int,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOfloatgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<int,float>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEintcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,float> : new map<int,float>;
   }
   static void *newArray_maplEintcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,float>[nElements] : new map<int,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOfloatgR(void *p) {
      delete ((map<int,float>*)p);
   }
   static void deleteArray_maplEintcOfloatgR(void *p) {
      delete [] ((map<int,float>*)p);
   }
   static void destruct_maplEintcOfloatgR(void *p) {
      typedef map<int,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<int,float>

namespace ROOTDict {
   void vectorlE__ecalCellWrappermUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlE__ecalCellWrappermUgR_Dictionary();
   static void *new_vectorlE__ecalCellWrappermUgR(void *p = 0);
   static void *newArray_vectorlE__ecalCellWrappermUgR(Long_t size, void *p);
   static void delete_vectorlE__ecalCellWrappermUgR(void *p);
   static void deleteArray_vectorlE__ecalCellWrappermUgR(void *p);
   static void destruct_vectorlE__ecalCellWrappermUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<__ecalCellWrapper*>*)
   {
      vector<__ecalCellWrapper*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<__ecalCellWrapper*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<__ecalCellWrapper*>", -2, "prec_stl/vector", 49,
                  typeid(vector<__ecalCellWrapper*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlE__ecalCellWrappermUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<__ecalCellWrapper*>) );
      instance.SetNew(&new_vectorlE__ecalCellWrappermUgR);
      instance.SetNewArray(&newArray_vectorlE__ecalCellWrappermUgR);
      instance.SetDelete(&delete_vectorlE__ecalCellWrappermUgR);
      instance.SetDeleteArray(&deleteArray_vectorlE__ecalCellWrappermUgR);
      instance.SetDestructor(&destruct_vectorlE__ecalCellWrappermUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<__ecalCellWrapper*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<__ecalCellWrapper*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlE__ecalCellWrappermUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<__ecalCellWrapper*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlE__ecalCellWrappermUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<__ecalCellWrapper*> : new vector<__ecalCellWrapper*>;
   }
   static void *newArray_vectorlE__ecalCellWrappermUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<__ecalCellWrapper*>[nElements] : new vector<__ecalCellWrapper*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlE__ecalCellWrappermUgR(void *p) {
      delete ((vector<__ecalCellWrapper*>*)p);
   }
   static void deleteArray_vectorlE__ecalCellWrappermUgR(void *p) {
      delete [] ((vector<__ecalCellWrapper*>*)p);
   }
   static void destruct_vectorlE__ecalCellWrappermUgR(void *p) {
      typedef vector<__ecalCellWrapper*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<__ecalCellWrapper*>

namespace ROOTDict {
   void vectorlEecalCellmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEecalCellmUgR_Dictionary();
   static void *new_vectorlEecalCellmUgR(void *p = 0);
   static void *newArray_vectorlEecalCellmUgR(Long_t size, void *p);
   static void delete_vectorlEecalCellmUgR(void *p);
   static void deleteArray_vectorlEecalCellmUgR(void *p);
   static void destruct_vectorlEecalCellmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<ecalCell*>*)
   {
      vector<ecalCell*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ecalCell*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ecalCell*>", -2, "prec_stl/vector", 49,
                  typeid(vector<ecalCell*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEecalCellmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ecalCell*>) );
      instance.SetNew(&new_vectorlEecalCellmUgR);
      instance.SetNewArray(&newArray_vectorlEecalCellmUgR);
      instance.SetDelete(&delete_vectorlEecalCellmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEecalCellmUgR);
      instance.SetDestructor(&destruct_vectorlEecalCellmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<ecalCell*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ecalCell*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEecalCellmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<ecalCell*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEecalCellmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ecalCell*> : new vector<ecalCell*>;
   }
   static void *newArray_vectorlEecalCellmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ecalCell*>[nElements] : new vector<ecalCell*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEecalCellmUgR(void *p) {
      delete ((vector<ecalCell*>*)p);
   }
   static void deleteArray_vectorlEecalCellmUgR(void *p) {
      delete [] ((vector<ecalCell*>*)p);
   }
   static void destruct_vectorlEecalCellmUgR(void *p) {
      typedef vector<ecalCell*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<ecalCell*>

namespace ROOTDict {
   void vectorlEecalModulemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEecalModulemUgR_Dictionary();
   static void *new_vectorlEecalModulemUgR(void *p = 0);
   static void *newArray_vectorlEecalModulemUgR(Long_t size, void *p);
   static void delete_vectorlEecalModulemUgR(void *p);
   static void deleteArray_vectorlEecalModulemUgR(void *p);
   static void destruct_vectorlEecalModulemUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<ecalModule*>*)
   {
      vector<ecalModule*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ecalModule*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ecalModule*>", -2, "prec_stl/vector", 49,
                  typeid(vector<ecalModule*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEecalModulemUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ecalModule*>) );
      instance.SetNew(&new_vectorlEecalModulemUgR);
      instance.SetNewArray(&newArray_vectorlEecalModulemUgR);
      instance.SetDelete(&delete_vectorlEecalModulemUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEecalModulemUgR);
      instance.SetDestructor(&destruct_vectorlEecalModulemUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<ecalModule*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ecalModule*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEecalModulemUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<ecalModule*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEecalModulemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ecalModule*> : new vector<ecalModule*>;
   }
   static void *newArray_vectorlEecalModulemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ecalModule*>[nElements] : new vector<ecalModule*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEecalModulemUgR(void *p) {
      delete ((vector<ecalModule*>*)p);
   }
   static void deleteArray_vectorlEecalModulemUgR(void *p) {
      delete [] ((vector<ecalModule*>*)p);
   }
   static void destruct_vectorlEecalModulemUgR(void *p) {
      typedef vector<ecalModule*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<ecalModule*>

/********************************************************
* /input/FairShipRun/ecal/G__ecalDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__ecalDict();

extern "C" void G__set_cpp_environmentG__ecalDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("ecal.h");
  G__add_compiledheader("ecalContFact.h");
  G__add_compiledheader("ecalPoint.h");
  G__add_compiledheader("ecalLightMap.h");
  G__add_compiledheader("ecalCell.h");
  G__add_compiledheader("ecalCellMC.h");
  G__add_compiledheader("ecalModule.h");
  G__add_compiledheader("ecalInf.h");
  G__add_compiledheader("ecalStructure.h");
  G__add_compiledheader("ecalStructureFiller.h");
  G__add_compiledheader("ecalDigi.h");
  G__add_compiledheader("ecalPrepare.h");
  G__add_compiledheader("ecalAnalysisSimple.h");
  G__add_compiledheader("ecalAnalysisMaterial.h");
  G__add_compiledheader("ecalMaximum.h");
  G__add_compiledheader("ecalMaximumLocator.h");
  G__add_compiledheader("ecalCluster.h");
  G__add_compiledheader("ecalClusterFinder.h");
  G__add_compiledheader("ecalClusterCalibration.h");
  G__add_compiledheader("ecalDrawer.h");
  G__add_compiledheader("ecalReconstructed.h");
  G__add_compiledheader("ecalReco.h");
  G__add_compiledheader("ecalMatch.h");
  G__cpp_reset_tagtableG__ecalDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__ecalDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ecalPoint */
static int G__G__ecalDict_816_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPoint[n];
     } else {
       p = new((void*) gvp) ecalPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPoint;
     } else {
       p = new((void*) gvp) ecalPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) ecalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalPoint*) G__getstructoffset())->GetPdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalPoint*) G__getstructoffset())->PdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_816_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalPoint G__TecalPoint;
static int G__G__ecalDict_816_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalPoint*) (soff+(sizeof(ecalPoint)*i)))->~G__TecalPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalPoint*) (soff))->~G__TecalPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecal */
static int G__G__ecalDict_817_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecal[n];
     } else {
       p = new((void*) gvp) ecal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecal;
     } else {
       p = new((void*) gvp) ecal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecal* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecal(
(const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) ecal(
(const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecal((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ecal((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ecal*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecal*) G__getstructoffset())->ChangeHit((ecalPoint*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecal*) G__getstructoffset())->ChangeHit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ecal::GetCellCoord((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ecal::GetCellCoordInf((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ecal::GetCellCoordForPy((Int_t) G__int(libp->para[0]), *(TVector3*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_817_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecal G__Tecal;
static int G__G__ecalDict_817_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecal*) (soff+(sizeof(ecal)*i)))->~G__Tecal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecal*) (soff))->~G__Tecal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalInf */
static int G__G__ecalDict_818_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalInf* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     p = 0;
     G__genericerror("Error: Array construction with private/protected destructor is illegal");
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalInf;
     } else {
       p = new((void*) gvp) ecalInf;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalInf::GetInstance((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetXPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetYPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetModuleSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalInf*) G__getstructoffset())->GetNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetLead());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetScin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetTyveec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetThicknessLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalInf*) G__getstructoffset())->GetXSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalInf*) G__getstructoffset())->GetYSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetContainerXSemiAxiss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetContainerYSemiAxiss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetElectronCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetHadronCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalInf*) G__getstructoffset())->GetEcalSize((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const ecalInf*) G__getstructoffset())->GetType((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalInf*) G__getstructoffset())->GetFastMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ecalInf*) G__getstructoffset())->DumpContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalInf*) G__getstructoffset())->FreeInstance();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((ecalInf*) G__getstructoffset())->GetVariable((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((ecalInf*) G__getstructoffset())->GetVariableStrict((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((ecalInf*) G__getstructoffset())->GetStringVariable((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalInf*) G__getstructoffset())->AddVariable((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalInf::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalInf::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalInf::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalInf::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalInf*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalInf::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalInf::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalInf::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_818_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalInf::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalCell */
static int G__G__ecalDict_819_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) ecalCell(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCell((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalCell((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCell((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalCell((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((ecalCell*) G__getstructoffset())->IsInside((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const ecalCell*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->X1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->Y1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->X2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->Y2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetCenterX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetCenterY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const ecalCell*) G__getstructoffset())->ADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const ecalCell*) G__getstructoffset())->GetADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCell*) G__getstructoffset())->GetCellNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCell*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->SetTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ecalCell*) G__getstructoffset())->GetNeighborsList(*(list<ecalCell*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->SetNeighborsList(*(list<ecalCell*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->Get5x5Cluster(*(list<ecalCell*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->SetEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->SetADC((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->ResetEnergyFast();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->AddEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->GetClusterEnergy(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->SetCoord((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->SetType((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCell*) G__getstructoffset())->CountNeighbors(*(list<ecalCell*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_819_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ecalDict_819_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ecalCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ecalCell(*(ecalCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalCell G__TecalCell;
static int G__G__ecalDict_819_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalCell*) (soff+(sizeof(ecalCell)*i)))->~G__TecalCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalCell*) (soff))->~G__TecalCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ecalDict_819_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalCell* dest = (ecalCell*) G__getstructoffset();
   *dest = *(ecalCell*) libp->para[0].ref;
   const ecalCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalModule */
static int G__G__ecalDict_824_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Float_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Float_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) ecalModule(
(char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule((char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalModule((char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalModule((char) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalModule((char) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ecalModule[n];
       } else {
         p = new((void*) gvp) ecalModule[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ecalModule;
       } else {
         p = new((void*) gvp) ecalModule;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalModule*) G__getstructoffset())->Locate((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalModule*) G__getstructoffset())->At((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalModule*) G__getstructoffset())->FindCell((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalModule*) G__getstructoffset())->AddEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalModule*) G__getstructoffset())->GetEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalModule*) G__getstructoffset())->ResetModule();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalModule*) G__getstructoffset())->GetDX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalModule*) G__getstructoffset())->GetDY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ecalCell*>* pobj;
         const vector<ecalCell*> xobj = ((const ecalModule*) G__getstructoffset())->GetCells();
         pobj = new vector<ecalCell*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<ecalCell*>* pobj;
         const list<ecalCell*> xobj = ((const ecalModule*) G__getstructoffset())->GetCellsX((Float_t) G__double(libp->para[0]));
         pobj = new list<ecalCell*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<ecalCell*>* pobj;
         const list<ecalCell*> xobj = ((const ecalModule*) G__getstructoffset())->GetCellsY((Float_t) G__double(libp->para[0]));
         pobj = new list<ecalCell*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_824_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ecalDict_824_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ecalModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ecalModule(*(ecalModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalModule G__TecalModule;
static int G__G__ecalDict_824_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalModule*) (soff+(sizeof(ecalModule)*i)))->~G__TecalModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalModule*) (soff))->~G__TecalModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ecalDict_824_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalModule* dest = (ecalModule*) G__getstructoffset();
   *dest = *(ecalModule*) libp->para[0].ref;
   const ecalModule& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalStructure */
static int G__G__ecalDict_829_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalStructure* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalStructure((ecalInf*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) ecalStructure((ecalInf*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalStructure*) G__getstructoffset())->SetUseMC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalStructure*) G__getstructoffset())->SetUseMC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalStructure*) G__getstructoffset())->GetUseMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalStructure*) G__getstructoffset())->Construct();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalStructure*) G__getstructoffset())->GetNumber((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((ecalStructure*) G__getstructoffset())->AddEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((ecalStructure*) G__getstructoffset())->AddEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((const ecalStructure*) G__getstructoffset())->GetEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((const ecalStructure*) G__getstructoffset())->GetEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalStructure*) G__getstructoffset())->GetCell((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalStructure*) G__getstructoffset())->GetModule((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalStructure*) G__getstructoffset())->GetModuleNumber((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalStructure*) G__getstructoffset())->GetX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalStructure*) G__getstructoffset())->GetY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalStructure*) G__getstructoffset())->GetX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalStructure*) G__getstructoffset())->GetY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalStructure*) G__getstructoffset())->GetEcalInf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ecalStructure*) G__getstructoffset())->GetStructure(*(vector<ecalModule*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ecalStructure*) G__getstructoffset())->GetCells(*(list<ecalCell*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalStructure*) G__getstructoffset())->CreateNLists((ecalCell*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalStructure*) G__getstructoffset())->ResetModules();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ecalStructure*) G__getstructoffset())->CreateModule((char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalStructure*) G__getstructoffset())->GetHitId((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ecalStructure*) G__getstructoffset())->GetHitXY((const Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const ecalStructure*) G__getstructoffset())->GetGlobalCellXY((const Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalStructure*) G__getstructoffset())->GetType((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ecalStructure*) G__getstructoffset())->GetCell((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Bool_t*) G__Boolref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalStructure*) G__getstructoffset())->GetHitCell((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalStructure::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalStructure::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalStructure::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalStructure::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalStructure*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalStructure::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalStructure::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalStructure::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_829_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalStructure::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalStructure G__TecalStructure;
static int G__G__ecalDict_829_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalStructure*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalStructure*) (soff+(sizeof(ecalStructure)*i)))->~G__TecalStructure();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalStructure*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalStructure*) (soff))->~G__TecalStructure();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalLightMap */
static int G__G__ecalDict_880_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalLightMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalLightMap[n];
     } else {
       p = new((void*) gvp) ecalLightMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalLightMap;
     } else {
       p = new((void*) gvp) ecalLightMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalLightMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalLightMap((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalLightMap((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalLightMap((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalLightMap((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((ecalLightMap*) G__getstructoffset())->Data((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ecalLightMap*) G__getstructoffset())->GetNum((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalLightMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalLightMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalLightMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalLightMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalLightMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalLightMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalLightMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalLightMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_880_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalLightMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalLightMap G__TecalLightMap;
static int G__G__ecalDict_880_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalLightMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalLightMap*) (soff+(sizeof(ecalLightMap)*i)))->~G__TecalLightMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalLightMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalLightMap*) (soff))->~G__TecalLightMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalContFact */
static int G__G__ecalDict_887_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalContFact[n];
     } else {
       p = new((void*) gvp) ecalContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalContFact;
     } else {
       p = new((void*) gvp) ecalContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_887_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalContFact G__TecalContFact;
static int G__G__ecalDict_887_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalContFact*) (soff+(sizeof(ecalContFact)*i)))->~G__TecalContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalContFact*) (soff))->~G__TecalContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalCellMC */
static int G__G__ecalDict_888_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalCellMC* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Char_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) ecalCellMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCellMC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalCellMC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCellMC((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalCellMC((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCellMC*) G__getstructoffset())->GetTrackEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalCellMC*) G__getstructoffset())->GetTrackTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCellMC*) G__getstructoffset())->ResetEnergy();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((ecalCellMC*) G__getstructoffset())->SetTrackEnergy((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((ecalCellMC*) G__getstructoffset())->SetTrackEnergy((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((ecalCellMC*) G__getstructoffset())->AddTrackEnergy((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((ecalCellMC*) G__getstructoffset())->AddTrackEnergy((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((ecalCellMC*) G__getstructoffset())->GetTrackClusterEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCellMC*) G__getstructoffset())->TrackEnergySize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCellMC*) G__getstructoffset())->TrackTimeSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCellMC*) G__getstructoffset())->GetTrackEnergySlow((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCellMC*) G__getstructoffset())->GetTrackTimeSlow((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const ecalCellMC*) G__getstructoffset())->GetTrackEnergyBegin();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const ecalCellMC*) G__getstructoffset())->GetTrackEnergyEnd();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const ecalCellMC*) G__getstructoffset())->GetTrackTimeBegin();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const ecalCellMC*) G__getstructoffset())->GetTrackTimeEnd();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalCellMC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCellMC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalCellMC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalCellMC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCellMC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCellMC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalCellMC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCellMC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_888_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalCellMC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ecalDict_888_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ecalCellMC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ecalCellMC(*(ecalCellMC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalCellMC G__TecalCellMC;
static int G__G__ecalDict_888_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalCellMC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalCellMC*) (soff+(sizeof(ecalCellMC)*i)))->~G__TecalCellMC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalCellMC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalCellMC*) (soff))->~G__TecalCellMC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ecalDict_888_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalCellMC* dest = (ecalCellMC*) G__getstructoffset();
   *dest = *(ecalCellMC*) libp->para[0].ref;
   const ecalCellMC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalStructureFiller */
static int G__G__ecalDict_898_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalStructureFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalStructureFiller[n];
     } else {
       p = new((void*) gvp) ecalStructureFiller[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalStructureFiller;
     } else {
       p = new((void*) gvp) ecalStructureFiller;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalStructureFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalStructureFiller(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) ecalStructureFiller(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalStructureFiller((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalStructureFiller((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalStructureFiller((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalStructureFiller((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ecalStructureFiller*) G__getstructoffset())->InitPython((TClonesArray*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalStructureFiller*) G__getstructoffset())->SetUseMCPoints((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalStructureFiller*) G__getstructoffset())->GetStructure());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalStructureFiller*) G__getstructoffset())->StoreTrackInformation((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalStructureFiller*) G__getstructoffset())->StoreTrackInformation();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ecalStructureFiller*) G__getstructoffset())->GetStoreTrackInformation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ecalStructureFiller*) G__getstructoffset())->GetUseMCPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ecalStructureFiller*) G__getstructoffset())->GetUseSummableHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ecalStructureFiller*) G__getstructoffset())->GetUseHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalStructureFiller::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalStructureFiller::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalStructureFiller::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalStructureFiller::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalStructureFiller*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalStructureFiller::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalStructureFiller::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalStructureFiller::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_898_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalStructureFiller::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalStructureFiller G__TecalStructureFiller;
static int G__G__ecalDict_898_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalStructureFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalStructureFiller*) (soff+(sizeof(ecalStructureFiller)*i)))->~G__TecalStructureFiller();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalStructureFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalStructureFiller*) (soff))->~G__TecalStructureFiller();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalDigi */
static int G__G__ecalDict_899_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalDigi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalDigi[n];
     } else {
       p = new((void*) gvp) ecalDigi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalDigi;
     } else {
       p = new((void*) gvp) ecalDigi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalDigi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalDigi((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalDigi((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalDigi*) G__getstructoffset())->InitPython((ecalStructure*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalDigi*) G__getstructoffset())->SetPedestal((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalDigi*) G__getstructoffset())->SetPedestal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalDigi*) G__getstructoffset())->SetADCMax((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalDigi*) G__getstructoffset())->SetADCMax();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalDigi*) G__getstructoffset())->SetADCNoise((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalDigi*) G__getstructoffset())->SetADCNoise();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalDigi*) G__getstructoffset())->SetADCChannel((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalDigi*) G__getstructoffset())->SetADCChannel();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalDigi*) G__getstructoffset())->SetChannelMap(*((map<Int_t,Float_t>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalDigi*) G__getstructoffset())->LoadChannelMap((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const ecalDigi*) G__getstructoffset())->GetPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const ecalDigi*) G__getstructoffset())->GetADCMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalDigi*) G__getstructoffset())->GetADCNoise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalDigi*) G__getstructoffset())->GetADCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalDigi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalDigi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalDigi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalDigi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalDigi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalDigi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalDigi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalDigi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_899_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalDigi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalDigi G__TecalDigi;
static int G__G__ecalDict_899_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalDigi*) (soff+(sizeof(ecalDigi)*i)))->~G__TecalDigi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalDigi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalDigi*) (soff))->~G__TecalDigi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalPrepare */
static int G__G__ecalDict_900_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalPrepare* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPrepare[n];
     } else {
       p = new((void*) gvp) ecalPrepare[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalPrepare;
     } else {
       p = new((void*) gvp) ecalPrepare;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalPrepare* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalPrepare((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalPrepare((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalPrepare*) G__getstructoffset())->InitPython((ecalStructure*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalPrepare*) G__getstructoffset())->SetPedestal((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalPrepare*) G__getstructoffset())->SetPedestal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalPrepare*) G__getstructoffset())->SetADCMax((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalPrepare*) G__getstructoffset())->SetADCMax();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalPrepare*) G__getstructoffset())->SetADCChannel((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalPrepare*) G__getstructoffset())->SetADCChannel();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalPrepare*) G__getstructoffset())->SetChannelMap(*((map<Int_t,Float_t>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalPrepare*) G__getstructoffset())->LoadChannelMap((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const ecalPrepare*) G__getstructoffset())->GetPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const ecalPrepare*) G__getstructoffset())->GetADCMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalPrepare*) G__getstructoffset())->GetADCChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalPrepare::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalPrepare::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalPrepare::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalPrepare::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalPrepare*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalPrepare::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalPrepare::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalPrepare::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_900_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalPrepare::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalPrepare G__TecalPrepare;
static int G__G__ecalDict_900_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalPrepare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalPrepare*) (soff+(sizeof(ecalPrepare)*i)))->~G__TecalPrepare();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalPrepare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalPrepare*) (soff))->~G__TecalPrepare();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalAnalysisSimple */
static int G__G__ecalDict_901_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalAnalysisSimple* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalAnalysisSimple((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalAnalysisSimple((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalAnalysisSimple* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalAnalysisSimple[n];
     } else {
       p = new((void*) gvp) ecalAnalysisSimple[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalAnalysisSimple;
     } else {
       p = new((void*) gvp) ecalAnalysisSimple;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalAnalysisSimple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalAnalysisSimple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalAnalysisSimple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalAnalysisSimple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalAnalysisSimple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalAnalysisSimple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalAnalysisSimple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalAnalysisSimple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_901_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalAnalysisSimple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalAnalysisSimple G__TecalAnalysisSimple;
static int G__G__ecalDict_901_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalAnalysisSimple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalAnalysisSimple*) (soff+(sizeof(ecalAnalysisSimple)*i)))->~G__TecalAnalysisSimple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalAnalysisSimple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalAnalysisSimple*) (soff))->~G__TecalAnalysisSimple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalAnalysisMaterial */
static int G__G__ecalDict_902_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalAnalysisMaterial* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalAnalysisMaterial((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalAnalysisMaterial((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalAnalysisMaterial((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalAnalysisMaterial((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalAnalysisMaterial* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalAnalysisMaterial[n];
     } else {
       p = new((void*) gvp) ecalAnalysisMaterial[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalAnalysisMaterial;
     } else {
       p = new((void*) gvp) ecalAnalysisMaterial;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalAnalysisMaterial::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalAnalysisMaterial::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalAnalysisMaterial::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalAnalysisMaterial::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalAnalysisMaterial*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalAnalysisMaterial::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalAnalysisMaterial::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalAnalysisMaterial::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_902_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalAnalysisMaterial::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalAnalysisMaterial G__TecalAnalysisMaterial;
static int G__G__ecalDict_902_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalAnalysisMaterial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalAnalysisMaterial*) (soff+(sizeof(ecalAnalysisMaterial)*i)))->~G__TecalAnalysisMaterial();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalAnalysisMaterial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalAnalysisMaterial*) (soff))->~G__TecalAnalysisMaterial();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalMaximum */
static int G__G__ecalDict_903_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalMaximum* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalMaximum[n];
     } else {
       p = new((void*) gvp) ecalMaximum[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalMaximum;
     } else {
       p = new((void*) gvp) ecalMaximum;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalMaximum* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalMaximum((ecalCell*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalMaximum((ecalCell*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalMaximum* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalMaximum(
(ecalCell*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) ecalMaximum(
(ecalCell*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalMaximum*) G__getstructoffset())->Cell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalMaximum*) G__getstructoffset())->CX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalMaximum*) G__getstructoffset())->CY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalMaximum*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalMaximum*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalMaximum*) G__getstructoffset())->Mark());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalMaximum*) G__getstructoffset())->Theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalMaximum*) G__getstructoffset())->SetMark((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalMaximum*) G__getstructoffset())->SetTheta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalMaximum::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMaximum::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalMaximum::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalMaximum::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalMaximum*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMaximum::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalMaximum::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMaximum::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_903_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalMaximum::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalMaximum G__TecalMaximum;
static int G__G__ecalDict_903_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalMaximum*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalMaximum*) (soff+(sizeof(ecalMaximum)*i)))->~G__TecalMaximum();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalMaximum*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalMaximum*) (soff))->~G__TecalMaximum();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalMaximumLocator */
static int G__G__ecalDict_904_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalMaximumLocator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalMaximumLocator[n];
     } else {
       p = new((void*) gvp) ecalMaximumLocator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalMaximumLocator;
     } else {
       p = new((void*) gvp) ecalMaximumLocator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalMaximumLocator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalMaximumLocator((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalMaximumLocator((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ecalMaximumLocator*) G__getstructoffset())->InitPython((ecalStructure*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalMaximumLocator*) G__getstructoffset())->ECut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalMaximumLocator*) G__getstructoffset())->SetECut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalMaximumLocator*) G__getstructoffset())->SetECut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalMaximumLocator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMaximumLocator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalMaximumLocator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalMaximumLocator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalMaximumLocator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMaximumLocator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalMaximumLocator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMaximumLocator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_904_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalMaximumLocator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalMaximumLocator G__TecalMaximumLocator;
static int G__G__ecalDict_904_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalMaximumLocator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalMaximumLocator*) (soff+(sizeof(ecalMaximumLocator)*i)))->~G__TecalMaximumLocator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalMaximumLocator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalMaximumLocator*) (soff))->~G__TecalMaximumLocator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalCluster */
static int G__G__ecalDict_907_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCluster[n];
     } else {
       p = new((void*) gvp) ecalCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalCluster;
     } else {
       p = new((void*) gvp) ecalCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalCluster(
(Int_t) G__int(libp->para[0]), *(list<ecalCell*>*) libp->para[1].ref
, *(list<ecalMaximum*>*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) ecalCluster(
(Int_t) G__int(libp->para[0]), *(list<ecalCell*>*) libp->para[1].ref
, *(list<ecalMaximum*>*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCluster*) G__getstructoffset())->Number());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCluster*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCluster*) G__getstructoffset())->Maxs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->PreCalibrated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->Moment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->MomentX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->MomentY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->Chi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const ecalCluster*) G__getstructoffset())->Status());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCluster*) G__getstructoffset())->SetStatus((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCluster*) G__getstructoffset())->CellNum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalCluster*) G__getstructoffset())->PeakNum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalCluster*) G__getstructoffset())->PreEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalCluster*) G__getstructoffset())->Maximum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_907_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalCluster G__TecalCluster;
static int G__G__ecalDict_907_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalCluster*) (soff+(sizeof(ecalCluster)*i)))->~G__TecalCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalCluster*) (soff))->~G__TecalCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalClusterFinder */
static int G__G__ecalDict_908_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalClusterFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalClusterFinder((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalClusterFinder((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalClusterFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalClusterFinder[n];
     } else {
       p = new((void*) gvp) ecalClusterFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalClusterFinder;
     } else {
       p = new((void*) gvp) ecalClusterFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ecalClusterFinder*) G__getstructoffset())->InitPython((ecalStructure*) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])
, (ecalClusterCalibration*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalClusterFinder*) G__getstructoffset())->MinMaxE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ecalClusterFinder*) G__getstructoffset())->MinClusterE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalClusterFinder*) G__getstructoffset())->SetMinMaxE((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalClusterFinder*) G__getstructoffset())->SetMinMaxE();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalClusterFinder*) G__getstructoffset())->SetMinClusterE((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalClusterFinder*) G__getstructoffset())->SetMinClusterE();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalClusterFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalClusterFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalClusterFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalClusterFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalClusterFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalClusterFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalClusterFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalClusterFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_908_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalClusterFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalClusterFinder G__TecalClusterFinder;
static int G__G__ecalDict_908_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalClusterFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalClusterFinder*) (soff+(sizeof(ecalClusterFinder)*i)))->~G__TecalClusterFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalClusterFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalClusterFinder*) (soff))->~G__TecalClusterFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalClusterCalibration */
static int G__G__ecalDict_914_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalClusterCalibration* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalClusterCalibration[n];
     } else {
       p = new((void*) gvp) ecalClusterCalibration[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalClusterCalibration;
     } else {
       p = new((void*) gvp) ecalClusterCalibration;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalClusterCalibration* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalClusterCalibration((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalClusterCalibration((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalClusterCalibration((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalClusterCalibration((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ecalClusterCalibration*) G__getstructoffset())->InitPython());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalClusterCalibration*) G__getstructoffset())->SetStraightCalibration((Int_t) G__int(libp->para[0]), (TFormula*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalClusterCalibration*) G__getstructoffset())->SetCalibration((Int_t) G__int(libp->para[0]), (TFormula*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalClusterCalibration*) G__getstructoffset())->StraightCalibration((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ecalClusterCalibration*) G__getstructoffset())->Calibration((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((ecalClusterCalibration*) G__getstructoffset())->Calibrate((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((ecalClusterCalibration*) G__getstructoffset())->Calibrate((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalClusterCalibration::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalClusterCalibration::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalClusterCalibration::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalClusterCalibration::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalClusterCalibration*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalClusterCalibration::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalClusterCalibration::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalClusterCalibration::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_914_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalClusterCalibration::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalClusterCalibration G__TecalClusterCalibration;
static int G__G__ecalDict_914_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalClusterCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalClusterCalibration*) (soff+(sizeof(ecalClusterCalibration)*i)))->~G__TecalClusterCalibration();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalClusterCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalClusterCalibration*) (soff))->~G__TecalClusterCalibration();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalDrawer */
static int G__G__ecalDict_923_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalDrawer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalDrawer[n];
     } else {
       p = new((void*) gvp) ecalDrawer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalDrawer;
     } else {
       p = new((void*) gvp) ecalDrawer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalDrawer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalDrawer((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ecalDrawer((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalDrawer((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ecalDrawer((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalDrawer*) G__getstructoffset())->SetNamePrefix((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalDrawer*) G__getstructoffset())->SetCellSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ecalDrawer*) G__getstructoffset())->InitPython((TClonesArray*) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])
, (ecalStructure*) G__int(libp->para[2]), (TClonesArray*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalDrawer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalDrawer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalDrawer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalDrawer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalDrawer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalDrawer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalDrawer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalDrawer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_923_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalDrawer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalDrawer G__TecalDrawer;
static int G__G__ecalDict_923_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalDrawer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalDrawer*) (soff+(sizeof(ecalDrawer)*i)))->~G__TecalDrawer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalDrawer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalDrawer*) (soff))->~G__TecalDrawer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalReconstructed */
static int G__G__ecalDict_928_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalReconstructed* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalReconstructed[n];
     } else {
       p = new((void*) gvp) ecalReconstructed[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalReconstructed;
     } else {
       p = new((void*) gvp) ecalReconstructed;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalReconstructed* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalReconstructed(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) ecalReconstructed(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalReconstructed(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) ecalReconstructed(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalReconstructed*) G__getstructoffset())->RawE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalReconstructed*) G__getstructoffset())->RecoE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalReconstructed*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const ecalReconstructed*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalReconstructed*) G__getstructoffset())->CellNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalReconstructed*) G__getstructoffset())->ClusterNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalReconstructed*) G__getstructoffset())->MCTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ecalReconstructed*) G__getstructoffset())->SetMCTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalReconstructed::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalReconstructed::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalReconstructed::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalReconstructed::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalReconstructed*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalReconstructed::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalReconstructed::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalReconstructed::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_928_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalReconstructed::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__ecalDict_928_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ecalReconstructed* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ecalReconstructed(*(ecalReconstructed*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalReconstructed G__TecalReconstructed;
static int G__G__ecalDict_928_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalReconstructed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalReconstructed*) (soff+(sizeof(ecalReconstructed)*i)))->~G__TecalReconstructed();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalReconstructed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalReconstructed*) (soff))->~G__TecalReconstructed();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__ecalDict_928_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalReconstructed* dest = (ecalReconstructed*) G__getstructoffset();
   *dest = *(ecalReconstructed*) libp->para[0].ref;
   const ecalReconstructed& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalReco */
static int G__G__ecalDict_929_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalReco* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalReco((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalReco((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalReco* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalReco[n];
     } else {
       p = new((void*) gvp) ecalReco[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalReco;
     } else {
       p = new((void*) gvp) ecalReco;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((ecalReco*) G__getstructoffset())->InitPython((TClonesArray*) G__int(libp->para[0]), (ecalStructure*) G__int(libp->para[1])
, (ecalClusterCalibration*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalReco::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalReco::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalReco::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalReco::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalReco*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalReco::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalReco::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalReco::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_929_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalReco::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalReco G__TecalReco;
static int G__G__ecalDict_929_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalReco*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalReco*) (soff+(sizeof(ecalReco)*i)))->~G__TecalReco();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalReco*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalReco*) (soff))->~G__TecalReco();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ecalMatch */
static int G__G__ecalDict_930_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ecalMatch((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ecalMatch((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ecalMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalMatch[n];
     } else {
       p = new((void*) gvp) ecalMatch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ecalMatch;
     } else {
       p = new((void*) gvp) ecalMatch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ecalMatch*) G__getstructoffset())->GetUse3x3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ecalMatch*) G__getstructoffset())->SetUse3x3((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ecalMatch*) G__getstructoffset())->SetUse3x3();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalMatch*) G__getstructoffset())->InitPython((ecalStructure*) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1])
, (TClonesArray*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ecalMatch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMatch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ecalMatch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ecalMatch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ecalMatch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMatch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalMatch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ecalMatch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__ecalDict_930_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ecalMatch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ecalMatch G__TecalMatch;
static int G__G__ecalDict_930_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ecalMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ecalMatch*) (soff+(sizeof(ecalMatch)*i)))->~G__TecalMatch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ecalMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ecalMatch*) (soff))->~G__TecalMatch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ecalPoint */

/* ecal */

/* ecalInf */

/* ecalCell */

/* ecalModule */

/* ecalStructure */

/* ecalLightMap */

/* ecalContFact */

/* ecalCellMC */

/* ecalStructureFiller */

/* ecalDigi */

/* ecalPrepare */

/* ecalAnalysisSimple */

/* ecalAnalysisMaterial */

/* ecalMaximum */

/* ecalMaximumLocator */

/* ecalCluster */

/* ecalClusterFinder */

/* ecalClusterCalibration */

/* ecalDrawer */

/* ecalReconstructed */

/* ecalReco */

/* ecalMatch */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__ecalDict {
 public:
  G__Sizep2memfuncG__ecalDict(): p(&G__Sizep2memfuncG__ecalDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__ecalDict::*p)();
};

size_t G__get_sizep2memfuncG__ecalDict()
{
  G__Sizep2memfuncG__ecalDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__ecalDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint))) {
     ecalPoint *G__Lderived;
     G__Lderived=(ecalPoint*)0x1000;
     {
       FairMCPoint *G__Lpbase=(FairMCPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint),G__get_linked_tagnum(&G__G__ecalDictLN_FairMCPoint),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairMultiLinkedData_Interface *G__Lpbase=(FairMultiLinkedData_Interface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint),G__get_linked_tagnum(&G__G__ecalDictLN_FairMultiLinkedData_Interface),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecal))) {
     ecal *G__Lderived;
     G__Lderived=(ecal*)0x1000;
     {
       FairDetector *G__Lpbase=(FairDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecal),G__get_linked_tagnum(&G__G__ecalDictLN_FairDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecal),G__get_linked_tagnum(&G__G__ecalDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecal),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecal),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf))) {
     ecalInf *G__Lderived;
     G__Lderived=(ecalInf*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell))) {
     ecalCell *G__Lderived;
     G__Lderived=(ecalCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule))) {
     ecalModule *G__Lderived;
     G__Lderived=(ecalModule*)0x1000;
     {
       ecalCell *G__Lpbase=(ecalCell*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule),G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure))) {
     ecalStructure *G__Lderived;
     G__Lderived=(ecalStructure*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_FairModule))) {
     FairModule *G__Lderived;
     G__Lderived=(FairModule*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_FairModule),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_FairModule),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_FairDetector))) {
     FairDetector *G__Lderived;
     G__Lderived=(FairDetector*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_FairDetector),G__get_linked_tagnum(&G__G__ecalDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_FairDetector),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_FairDetector),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap))) {
     ecalLightMap *G__Lderived;
     G__Lderived=(ecalLightMap*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact))) {
     ecalContFact *G__Lderived;
     G__Lderived=(ecalContFact*)0x1000;
     {
       FairContFact *G__Lpbase=(FairContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact),G__get_linked_tagnum(&G__G__ecalDictLN_FairContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC))) {
     ecalCellMC *G__Lderived;
     G__Lderived=(ecalCellMC*)0x1000;
     {
       ecalCell *G__Lpbase=(ecalCell*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC),G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller))) {
     ecalStructureFiller *G__Lderived;
     G__Lderived=(ecalStructureFiller*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi))) {
     ecalDigi *G__Lderived;
     G__Lderived=(ecalDigi*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare))) {
     ecalPrepare *G__Lderived;
     G__Lderived=(ecalPrepare*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple))) {
     ecalAnalysisSimple *G__Lderived;
     G__Lderived=(ecalAnalysisSimple*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial))) {
     ecalAnalysisMaterial *G__Lderived;
     G__Lderived=(ecalAnalysisMaterial*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum))) {
     ecalMaximum *G__Lderived;
     G__Lderived=(ecalMaximum*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator))) {
     ecalMaximumLocator *G__Lderived;
     G__Lderived=(ecalMaximumLocator*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster))) {
     ecalCluster *G__Lderived;
     G__Lderived=(ecalCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder))) {
     ecalClusterFinder *G__Lderived;
     G__Lderived=(ecalClusterFinder*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration))) {
     ecalClusterCalibration *G__Lderived;
     G__Lderived=(ecalClusterCalibration*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer))) {
     ecalDrawer *G__Lderived;
     G__Lderived=(ecalDrawer*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed))) {
     ecalReconstructed *G__Lderived;
     G__Lderived=(ecalReconstructed*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco))) {
     ecalReco *G__Lderived;
     G__Lderived=(ecalReco*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch))) {
     ecalMatch *G__Lderived;
     G__Lderived=(ecalMatch*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch),G__get_linked_tagnum(&G__G__ecalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch),G__get_linked_tagnum(&G__G__ecalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch),G__get_linked_tagnum(&G__G__ecalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch),G__get_linked_tagnum(&G__G__ecalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__ecalDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Double32_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes in memory, written as a 4 bytes float",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<FairLink>",117,G__get_linked_tagnum(&G__G__ecalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<FairLink,less<FairLink> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TString>",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TChain*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TChain*,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::list<TString>*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,list<TString,allocator<TString> >*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,list<TString,allocator<TString> >*,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<TString,TArrayI>",117,G__get_linked_tagnum(&G__G__ecalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<TString,TArrayI,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::multimap<TString,TArrayI> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > > >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<TClonesArray*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("queue<TClonesArray*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::queue<TClonesArray*> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > > >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TClonesArray*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TClonesArray*,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairTSBufferFunctional*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairTSBufferFunctional*,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairWriteoutBuffer*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairWriteoutBuffer*,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TBranch*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TBranch*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TBranch*,less<int> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Int_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int,less<TString> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,FairFileSource*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,FairFileSource*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,FairFileSource*,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,Double_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,double>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,double,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,UInt_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<ecalCell*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ecalCell*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEecalCellmUcOallocatorlEecalCellmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEecalCellmUcOallocatorlEecalCellmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ecalModule*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalModulemUcOallocatorlEecalModulemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEecalModulemUcOallocatorlEecalModulemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalModulemUcOallocatorlEecalModulemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlEecalModulemUcOallocatorlEecalModulemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalModulemUcOallocatorlEecalModulemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<__ecalCellWrapper*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ecalDictLN_reverse_iteratorlEvectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,TGeoVolume*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_pairlEintcOTGeoVolumemUgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::pair<Int_t,TGeoVolume*> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<pair<Int_t,TGeoVolume*> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<pair<int,TGeoVolume*> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Float_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,float>",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,float,less<int> >",117,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("binary_function<ecalCell*,ecalCell*,Bool_t>",117,G__get_linked_tagnum(&G__G__ecalDictLN_binary_functionlEecalCellmUcOecalCellmUcOboolgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<ecalMaximum*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalMaximummUcOallocatorlEecalMaximummUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<ecalPreCluster*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalPreClustermUcOallocatorlEecalPreClustermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<ecalDrawerItem*>",117,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalDrawerItemmUcOallocatorlEecalDrawerItemmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ecalPoint */
static void G__setup_memvarecalPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint));
   { ecalPoint *p; p=(ecalPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPdgCode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecal */
static void G__setup_memvarecal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecal));
   { ecal *p; p=(ecal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf),-1,-1,4,"fInf=",0,"!");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Option_t"),-1,4,"fDebug=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackID=",0,"!  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolumeID=",0,"!  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TLorentzVector),-1,-1,4,"fPos=",0,"!  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TLorentzVector),-1,-1,4,"fMom=",0,"!  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fLength=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fELoss=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPosIndex=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fEcalCollection=",0,"! ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fLiteCollection=",0,"! ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEcalSize[3]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSimpleGeo=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fXSize=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fYSize=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDX=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDY=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fModuleSize=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZEcal=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSemiX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSemiY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessLead=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessScin=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessTyvk=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessLayer=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessSteel=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEdging=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHoleRad=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFiberRad=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXCell[5]=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYCell[5]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNH[5]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCF[5]=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TString),-1,-1,4,"fLightMapNames[5]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap),-1,-1,4,"fLightMaps[5]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNLayers=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fModuleLenght=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeoScale=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNColumns1=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNRows1=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNColumns2=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNRows2=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNColumns=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNRows=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolIdMax=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFirstNumber=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolArr[6]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fModules[5]=",0,"! Calorimeter Modules");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fCells[5]=",0,"! Calorimeter Cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fScTiles[5]=",0,"! Pb tiles ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fTileEdging[5]=",0,"! Edging of scintillator tiles ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fPbTiles[5]=",0,"! Scintillator tiles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fTvTiles[5]=",0,"! Tyvek sheets");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fHoleVol[3]=",0,"! Hole volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fFiberVol[3]=",0,"! Fiber volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume),-1,-1,4,"fSteelTapes[2]=",0,"! Steel tapes");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__ecalDictLN_TGeoTranslation),-1,-1,4,"fHolePos[5]=",0,"! Positions of holes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fModulesWithType[5]=",0,"! Number of mudules with type");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),G__defined_typename("list<std::pair<Int_t,TGeoVolume*> >"),-1,4,"fRawNumber=",0,"! List of constructed raws");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStructureId=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalInf */
static void G__setup_memvarecalInf(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf));
   { ecalInf *p; p=(ecalInf*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf),-1,-2,2,"fInf=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fRefCount=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TMap),-1,-1,4,"fVariables=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TObjArray),-1,-1,4,"fEcalStr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNLayers=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fXSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fYSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fModuleSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLead=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTyveec=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fThicknessLayer=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCellSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEcalSize[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fECut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSemiX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSemiY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFastMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSuccess=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TString),-1,-1,4,"fFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalCell */
static void G__setup_memvarecalCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell));
   { ecalCell *p; p=(ecalCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY2=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR),G__defined_typename("list<ecalCell*>"),-1,4,"fNeighbors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR),G__defined_typename("list<ecalCell*>"),-1,4,"f5x5Cluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalModule */
static void G__setup_memvarecalModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule));
   { ecalModule *p; p=(ecalModule*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDx=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR),G__defined_typename("vector<ecalCell*>"),-1,4,"fCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalStructure */
static void G__setup_memvarecalStructure(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure));
   { ecalStructure *p; p=(ecalStructure*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUseMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf),-1,-1,4,"fEcalInf=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalModulemUcOallocatorlEecalModulemUgRsPgR),G__defined_typename("vector<ecalModule*>"),-1,4,"fStructure=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR),G__defined_typename("list<ecalCell*>"),-1,4,"fCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_vectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgR),G__defined_typename("vector<__ecalCellWrapper*>"),-1,4,"fHash=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalLightMap */
static void G__setup_memvarecalLightMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap));
   { ecalLightMap *p; p=(ecalLightMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSSide=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fS=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSize=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fData=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalContFact */
static void G__setup_memvarecalContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact));
   { ecalContFact *p; p=(ecalContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalCellMC */
static void G__setup_memvarecalCellMC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC));
   { ecalCellMC *p; p=(ecalCellMC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),G__defined_typename("map<Int_t,Float_t>"),-1,4,"fTrackEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),G__defined_typename("map<Int_t,Float_t>"),-1,4,"fTrackTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalStructureFiller */
static void G__setup_memvarecalStructureFiller(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller));
   { ecalStructureFiller *p; p=(ecalStructureFiller*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf),-1,-1,4,"fInf=",0,"ECAL geometry container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fListECALpts=",0,"ECAL MC points");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvent=",0,"! Internal event counter");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInited=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseMCPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStoreTrackInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TString),-1,-1,4,"fFileGeo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalDigi */
static void G__setup_memvarecalDigi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi));
   { ecalDigi *p; p=(ecalDigi*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fPedestal=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fADCMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fADCNoise=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fADCChannel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),G__defined_typename("map<Int_t,Float_t>"),-1,4,"fChannelMap=",0,"! Map: channel number -> ADC channel in GeV");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalPrepare */
static void G__setup_memvarecalPrepare(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare));
   { ecalPrepare *p; p=(ecalPrepare*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fPedestal=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fADCMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fADCChannel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),G__defined_typename("map<Int_t,Float_t>"),-1,4,"fChannelMap=",0,"! Map: channel number -> ADC channel in GeV");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalAnalysisSimple */
static void G__setup_memvarecalAnalysisSimple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple));
   { ecalAnalysisSimple *p; p=(ecalAnalysisSimple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TTree),-1,-1,4,"fTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fP=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEv=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCellNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalAnalysisMaterial */
static void G__setup_memvarecalAnalysisMaterial(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial));
   { ecalAnalysisMaterial *p; p=(ecalAnalysisMaterial*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TTree),-1,-1,4,"fTree=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX0z[400]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIntL=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fMC=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fRadLen=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalMaximum */
static void G__setup_memvarecalMaximum(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum));
   { ecalMaximum *p; p=(ecalMaximum*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell),-1,-1,4,"fCell=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMark=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalMaximumLocator */
static void G__setup_memvarecalMaximumLocator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator));
   { ecalMaximumLocator *p; p=(ecalMaximumLocator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fMaximums=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fECut=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalCluster */
static void G__setup_memvarecalCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster));
   { ecalCluster *p; p=(ecalCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxs=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPreCalibrated=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMoment=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMomentX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMomentY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fStatus=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TArrayI),-1,-1,4,"fCellNums=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TArrayI),-1,-1,4,"fPeakNums=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TArrayD),-1,-1,4,"fPreEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum),-1,-1,4,"fMaximums=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalClusterFinder */
static void G__setup_memvarecalClusterFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder));
   { ecalClusterFinder *p; p=(ecalClusterFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEv=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fMaximums=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fClusters=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration),-1,-1,4,"fCalib=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf),-1,-1,4,"fInf=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalPreClustermUcOallocatorlEecalPreClustermUgRsPgR),G__defined_typename("list<ecalPreCluster*>"),-1,4,"fPreClusters=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinClusterE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinMaxE=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalClusterCalibration */
static void G__setup_memvarecalClusterCalibration(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration));
   { ecalClusterCalibration *p; p=(ecalClusterCalibration*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TFormula),-1,-1,4,"fStraightCalibration[10]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TFormula),-1,-1,4,"fCalibration[10]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalDrawer */
static void G__setup_memvarecalDrawer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer));
   { ecalDrawer *p; p=(ecalDrawer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TString),-1,-1,4,"fNamePrefix=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TASImage),-1,-1,4,"fC=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCellSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCX=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxEnergyDep=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf),-1,-1,4,"fInf=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TString),-1,-1,4,"fEdging=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TText),-1,-1,4,"fTxt=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalDrawerItemmUcOallocatorlEecalDrawerItemmUgRsPgR),G__defined_typename("list<ecalDrawerItem*>"),-1,4,"fCells=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fMCTracks=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fPoints=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fClusters=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TString),-1,-1,4,"fInName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventN=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMCMotherTrN=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCPX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCPY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCPZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPdgCode=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalReconstructed */
static void G__setup_memvarecalReconstructed(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed));
   { ecalReconstructed *p; p=(ecalReconstructed*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRawE=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRecoE=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCellNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusterNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMCTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalReco */
static void G__setup_memvarecalReco(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco));
   { ecalReco *p; p=(ecalReco*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEv=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fN=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRejected=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRejectedP=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fClusters=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fReconstucted=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration),-1,-1,4,"fCalib=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ecalMatch */
static void G__setup_memvarecalMatch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch));
   { ecalMatch *p; p=(ecalMatch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEv=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fN=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRejected=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUse3x3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fReconstucted=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray),-1,-1,4,"fMCTracks=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure),-1,-1,4,"fStr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__ecalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__ecalDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncecalPoint(void) {
   /* ecalPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint));
   G__memfunc_setup("ecalPoint",927,G__G__ecalDict_816_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalPoint",927,G__G__ecalDict_816_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"u 'TVector3' - 0 - pos u 'TVector3' - 0 - mom "
"d - 'Double_t' 0 - tof d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - eLoss i - 'Int_t' 0 '0' pdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalPoint",927,G__G__ecalDict_816_0_3, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"d - 'Double32_t' 0 - tof d - 'Double32_t' 0 - eloss "
"h - 'UInt_t' 0 '0' EventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdgCode",950,G__G__ecalDict_816_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PdgCode",662,G__G__ecalDict_816_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ecalPoint",927,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 1, 1, 4, 0, "u 'ecalPoint' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 1, 1, 4, 0, "u 'ecalPoint' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_816_0_9, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_816_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_816_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_816_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_816_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_816_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_816_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_816_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_816_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalPoint::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalPoint", 1053, G__G__ecalDict_816_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecal(void) {
   /* ecal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecal));
   G__memfunc_setup("ecal",405,G__G__ecalDict_817_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecal",405,G__G__ecalDict_817_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecal), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name g - 'Bool_t' 0 - active "
"C - - 10 '\"ecal_Detailed.geo\"' fileGeo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessHits",1143,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairVolume' - 0 'NULL' vol", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndOfEvent",974,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__ecalDict_817_0_8, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CopyClones",1023,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TClonesArray' - 0 - cl1 U 'TClonesArray' - 0 - cl2 "
"i - 'Int_t' 0 - offset", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Register",837,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChangeHit",875,G__G__ecalDict_817_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ecalPoint' - 0 'NULL' oldHit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishPrimary",1349,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCollection",1324,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - iColl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSpecialPhysicsCuts",2159,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellCoord",1175,G__G__ecalDict_817_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - fVolumeID f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y i - 'Int_t' 1 - tenergy", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Float_t&, Float_t&, Int_t&))(&ecal::GetCellCoord) ), 0);
   G__memfunc_setup("GetCellCoordInf",1460,G__G__ecalDict_817_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - fVolumeID f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y i - 'Int_t' 1 - tenergy", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Float_t&, Float_t&, Int_t&))(&ecal::GetCellCoordInf) ), 0);
   G__memfunc_setup("GetCellCoordForPy",1671,G__G__ecalDict_817_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - fVolID u 'TVector3' - 1 - all", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, TVector3&))(&ecal::GetCellCoordForPy) ), 0);
   G__memfunc_setup("AddHit",558,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 8, 1, 2, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"u 'TVector3' - 0 - pos u 'TVector3' - 0 - mom "
"d - 'Double_t' 0 - time d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - eLoss i - 'Int_t' 0 - pdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLiteHit",956,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"d - 'Double32_t' 0 - time d - 'Double32_t' 0 - eLoss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillLitePoint",1311,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - volnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillWallPoint",1313,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetParameters",1559,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEcalCuts",1088,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - medium", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindHit",678,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPoint), -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - VolId i - 'Int_t' 0 - TrackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolType",1011,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - volnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructRaw",1263,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TGeoVolume), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructModule",1579,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructCell",1349,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructTile",1363,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - material", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructModuleSimple",2197,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructCellSimple",1967,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructTileSimple",1981,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - material", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMedium",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMedia",884,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecal",405,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecal), -1, 0, 1, 1, 4, 0, "u 'ecal' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecal), -1, 1, 1, 1, 4, 0, "u 'ecal' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_817_0_38, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_817_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_817_0_40, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_817_0_41, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_817_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_817_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_817_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_817_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_817_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecal::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecal", 531, G__G__ecalDict_817_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalInf(void) {
   /* ecalInf */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf));
   G__memfunc_setup("ecalInf",690,G__G__ecalDict_818_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInstance",1109,G__G__ecalDict_818_0_2, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf), -1, 0, 1, 3, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) G__func2void( (ecalInf* (*)(const char*))(&ecalInf::GetInstance) ), 0);
   G__memfunc_setup("GetXPos",682,G__G__ecalDict_818_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYPos",683,G__G__ecalDict_818_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZPos",684,G__G__ecalDict_818_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModuleSize",1313,G__G__ecalDict_818_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLayers",990,G__G__ecalDict_818_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLead",662,G__G__ecalDict_818_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScin",685,G__G__ecalDict_818_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTyveec",912,G__G__ecalDict_818_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThicknessLayer",1737,G__G__ecalDict_818_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXSize",787,G__G__ecalDict_818_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYSize",788,G__G__ecalDict_818_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainerXSemiAxiss",2225,G__G__ecalDict_818_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainerYSemiAxiss",2226,G__G__ecalDict_818_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElectronCut",1416,G__G__ecalDict_818_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHadronCut",1192,G__G__ecalDict_818_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEcalSize",1072,G__G__ecalDict_818_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__ecalDict_818_0_19, 99, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", "returns type of (X,Y) supercell", (void*) NULL, 0);
   G__memfunc_setup("GetFastMC",830,G__G__ecalDict_818_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpContainer",1337,G__G__ecalDict_818_0_21, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeInstance",1207,G__G__ecalDict_818_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariable",1094,G__G__ecalDict_818_0_23, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariableStrict",1727,G__G__ecalDict_818_0_24, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStringVariable",1725,G__G__ecalDict_818_0_25, 117, G__get_linked_tagnum(&G__G__ecalDictLN_TString), -1, 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVariable",1071,G__G__ecalDict_818_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - key C - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalInf",690,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf), -1, 0, 1, 1, 2, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateHoleSize",1713,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitVariables",1325,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExcludeParameter",1643,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 0 - parname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalInf",690,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf), -1, 0, 1, 1, 4, 0, "u 'ecalInf' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf), -1, 1, 1, 1, 4, 0, "u 'ecalInf' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_818_0_33, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalInf::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_818_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalInf::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_818_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalInf::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_818_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalInf::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_818_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_818_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalInf::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_818_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalInf::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_818_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalInf::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_818_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalInf::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalCell(void) {
   /* ecalCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell));
   G__memfunc_setup("ecalCell",789,G__G__ecalDict_819_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - cellnumber f - 'Float_t' 0 '0' x1 "
"f - 'Float_t' 0 '0' y1 f - 'Float_t' 0 '0' x2 "
"f - 'Float_t' 0 '0' y2 c - 'Char_t' 0 '0' type "
"f - 'Float_t' 0 '0' energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__G__ecalDict_819_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__ecalDict_819_0_3, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X1",137,G__G__ecalDict_819_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y1",138,G__G__ecalDict_819_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X2",138,G__G__ecalDict_819_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y2",139,G__G__ecalDict_819_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX1",425,G__G__ecalDict_819_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY1",426,G__G__ecalDict_819_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX2",426,G__G__ecalDict_819_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY2",427,G__G__ecalDict_819_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCenterX",985,G__G__ecalDict_819_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCenterY",986,G__G__ecalDict_819_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ADC",200,G__G__ecalDict_819_0_14, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADC",488,G__G__ecalDict_819_0_15, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellNumber",1289,G__G__ecalDict_819_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__G__ecalDict_819_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__ecalDict_819_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__G__ecalDict_819_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighborsList",1629,G__G__ecalDict_819_0_20, 121, -1, -1, 0, 1, 1, 1, 8, "u 'list<ecalCell*,allocator<ecalCell*> >' 'list<ecalCell*>' 1 - neib", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeighborsList",1641,G__G__ecalDict_819_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<ecalCell*,allocator<ecalCell*> >' 'list<ecalCell*>' 1 - neib", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get5x5Cluster",1252,G__G__ecalDict_819_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<ecalCell*,allocator<ecalCell*> >' 'list<ecalCell*>' 1 - cls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergy",918,G__G__ecalDict_819_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADC",500,G__G__ecalDict_819_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetEnergyFast",1531,G__G__ecalDict_819_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergy",883,G__G__ecalDict_819_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterEnergy",1644,G__G__ecalDict_819_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 1 - EcalEnergy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoord",803,G__G__ecalDict_819_0_28, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1 "
"f - 'Float_t' 0 - x2 f - 'Float_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetType",718,G__G__ecalDict_819_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CountNeighbors",1450,G__G__ecalDict_819_0_30, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'list<ecalCell*,allocator<ecalCell*> >' 'list<ecalCell*>' 11 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create5x5Cluster",1560,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_819_0_32, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_819_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_819_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_819_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_819_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_819_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_819_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_819_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_819_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ecalCell", 789, G__G__ecalDict_819_0_44, (int) ('i'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 1, 1, 1, 0, "u 'ecalCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ecalCell", 915, G__G__ecalDict_819_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ecalDict_819_0_46, (int) ('u'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 1, 1, 1, 1, 0, "u 'ecalCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalModule(void) {
   /* ecalModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule));
   G__memfunc_setup("ecalModule",1019,G__G__ecalDict_824_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule), -1, 0, 8, 1, 1, 0, 
"c - - 0 '1' type i - 'Int_t' 0 '-1' cellnumber "
"f - 'Float_t' 0 '0' x1 f - 'Float_t' 0 '0' y1 "
"f - 'Float_t' 0 '0' x2 f - 'Float_t' 0 '0' y2 "
"i - 'Int_t' 0 '0' mc f - 'Float_t' 0 '0' energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Locate",600,G__G__ecalDict_824_0_2, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("At",181,G__G__ecalDict_824_0_3, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCell",769,G__G__ecalDict_824_0_4, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergy",883,G__G__ecalDict_824_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__G__ecalDict_824_0_6, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetModule",1129,G__G__ecalDict_824_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDX",444,G__G__ecalDict_824_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDY",445,G__G__ecalDict_824_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCells",787,G__G__ecalDict_824_0_10, 117, G__get_linked_tagnum(&G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR), G__defined_typename("vector<ecalCell*>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellsX",875,G__G__ecalDict_824_0_11, 117, G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR), G__defined_typename("list<ecalCell*>"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellsY",876,G__G__ecalDict_824_0_12, 117, G__get_linked_tagnum(&G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR), G__defined_typename("list<ecalCell*>"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_824_0_13, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_824_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_824_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_824_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_824_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_824_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_824_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_824_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_824_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ecalModule", 1019, G__G__ecalDict_824_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule), -1, 0, 1, 1, 1, 0, "u 'ecalModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ecalModule", 1145, G__G__ecalDict_824_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ecalDict_824_0_27, (int) ('u'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule), -1, 1, 1, 1, 1, 0, "u 'ecalModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalStructure(void) {
   /* ecalStructure */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure));
   G__memfunc_setup("ecalStructure",1382,G__G__ecalDict_829_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure), -1, 0, 1, 1, 1, 0, "U 'ecalInf' - 0 - ecalinf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseMC",745,G__G__ecalDict_829_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' mc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseMC",733,G__G__ecalDict_829_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Construct",965,G__G__ecalDict_829_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__G__ecalDict_829_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergy",883,G__G__ecalDict_829_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - energy g - 'Bool_t' 0 'kFALSE' isPS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__G__ecalDict_829_0_7, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"g - 'Bool_t' 0 'kFALSE' isPS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCell",672,G__G__ecalDict_829_0_8, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModule",902,G__G__ecalDict_829_0_9, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule), -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModuleNumber",1519,G__G__ecalDict_829_0_10, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX1",425,G__G__ecalDict_829_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY1",426,G__G__ecalDict_829_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX2",426,G__G__ecalDict_829_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY2",427,G__G__ecalDict_829_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEcalInf",946,G__G__ecalDict_829_0_15, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalInf), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructure",1265,G__G__ecalDict_829_0_16, 121, -1, -1, 0, 1, 1, 1, 8, "u 'vector<ecalModule*,allocator<ecalModule*> >' 'vector<ecalModule*>' 1 - stru", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCells",787,G__G__ecalDict_829_0_17, 121, -1, -1, 0, 1, 1, 1, 8, "u 'list<ecalCell*,allocator<ecalCell*> >' 'list<ecalCell*>' 1 - cells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateNLists",1201,G__G__ecalDict_829_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ecalCell' - 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetModules",1244,G__G__ecalDict_829_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateModule",1210,G__G__ecalDict_829_0_20, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalModule), -1, 0, 6, 1, 1, 0, 
"c - - 0 - type i - 'Int_t' 0 - number "
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1 "
"f - 'Float_t' 0 - x2 f - 'Float_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitId",754,G__G__ecalDict_829_0_21, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitXY",758,G__G__ecalDict_829_0_22, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 10 - hitId f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGlobalCellXY",1442,G__G__ecalDict_829_0_23, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 10 - hitId i - 'Int_t' 1 - x "
"i - 'Int_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__ecalDict_829_0_24, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - hitId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCell",672,G__G__ecalDict_829_0_25, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - fVolId i - 'Int_t' 1 - ten "
"g - 'Bool_t' 1 - isPS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitCell",965,G__G__ecalDict_829_0_26, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 10 - hitId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNum",592,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Serialize",936,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalStructure",1382,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure), -1, 0, 1, 1, 4, 0, "u 'ecalStructure' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure), -1, 1, 1, 1, 4, 0, "u 'ecalStructure' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_829_0_31, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalStructure::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_829_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalStructure::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_829_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalStructure::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_829_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalStructure::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_829_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_829_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalStructure::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_829_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalStructure::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_829_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalStructure::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_829_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalStructure::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalStructure", 1508, G__G__ecalDict_829_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalLightMap(void) {
   /* ecalLightMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap));
   G__memfunc_setup("ecalLightMap",1195,G__G__ecalDict_880_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalLightMap",1195,G__G__ecalDict_880_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap), -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 '\"Light collection efficiency map\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Data",378,G__G__ecalDict_880_0_3, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNum",592,G__G__ecalDict_880_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillGaps",786,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Normalize",945,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalLightMap",1195,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap), -1, 0, 1, 1, 4, 0, "u 'ecalLightMap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalLightMap), -1, 1, 1, 1, 4, 0, "u 'ecalLightMap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_880_0_10, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalLightMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_880_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalLightMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_880_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalLightMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_880_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalLightMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_880_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_880_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalLightMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_880_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalLightMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_880_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalLightMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_880_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalLightMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalLightMap", 1321, G__G__ecalDict_880_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalContFact(void) {
   /* ecalContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalContFact",1191,G__G__ecalDict_887_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_FairParSet), -1, 0, 1, 1, 1, 0, "U 'FairContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__ecalDict_887_0_4, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_887_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_887_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_887_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_887_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_887_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_887_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_887_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_887_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalContFact::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalContFact", 1317, G__G__ecalDict_887_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalCellMC(void) {
   /* ecalCellMC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC));
   G__memfunc_setup("ecalCellMC",933,G__G__ecalDict_888_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - cellnumber f - 'Float_t' 0 '0' x1 "
"f - 'Float_t' 0 '0' y1 f - 'Float_t' 0 '0' x2 "
"f - 'Float_t' 0 '0' y2 c - 'Char_t' 0 '0' type "
"f - 'Float_t' 0 '0' energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergy",1407,G__G__ecalDict_888_0_2, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackTime",1188,G__G__ecalDict_888_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetEnergy",1133,G__G__ecalDict_888_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackEnergy",1419,G__G__ecalDict_888_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - num f - 'Float_t' 0 - energy "
"f - 'Float_t' 0 '-1111' time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrackEnergy",1384,G__G__ecalDict_888_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - num f - 'Float_t' 0 - energy "
"f - 'Float_t' 0 '-1111' time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackClusterEnergy",2145,G__G__ecalDict_888_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackEnergySize",1530,G__G__ecalDict_888_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackTimeSize",1311,G__G__ecalDict_888_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergySlow",1828,G__G__ecalDict_888_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n i - 'Int_t' 1 - trackid "
"d - 'Double_t' 1 - energy_dep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackTimeSlow",1609,G__G__ecalDict_888_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n i - 'Int_t' 1 - trackid "
"f - 'Float_t' 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergyBegin",1892,G__G__ecalDict_888_0_12, 117, G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergyEnd",1686,G__G__ecalDict_888_0_13, 117, G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackTimeBegin",1673,G__G__ecalDict_888_0_14, 117, G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackTimeEnd",1467,G__G__ecalDict_888_0_15, 117, G__get_linked_tagnum(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_888_0_16, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalCellMC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_888_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCellMC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_888_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalCellMC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_888_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalCellMC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_888_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_888_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCellMC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_888_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalCellMC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_888_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCellMC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_888_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalCellMC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ecalCellMC", 933, G__G__ecalDict_888_0_28, (int) ('i'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC), -1, 0, 1, 1, 1, 0, "u 'ecalCellMC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ecalCellMC", 1059, G__G__ecalDict_888_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ecalDict_888_0_30, (int) ('u'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalCellMC), -1, 1, 1, 1, 1, 0, "u 'ecalCellMC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalStructureFiller(void) {
   /* ecalStructureFiller */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller));
   G__memfunc_setup("ecalStructureFiller",1988,G__G__ecalDict_898_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalStructureFiller",1988,G__G__ecalDict_898_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 '1' iVerbose "
"C - - 10 '\"ecal_FullMC.geo\"' fileGeo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_898_0_4, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure), -1, 0, 1, 1, 1, 0, "U 'TClonesArray' - 0 - litePoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUseMCPoints",1382,G__G__ecalDict_898_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - UseMCPoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructure",1265,G__G__ecalDict_898_0_8, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructure), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreTrackInformation",2184,G__G__ecalDict_898_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' storetrackinfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStoreTrackInformation",2472,G__G__ecalDict_898_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseMCPoints",1370,G__G__ecalDict_898_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseSummableHits",1819,G__G__ecalDict_898_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseHits",997,G__G__ecalDict_898_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParContainers",1637,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoopForMCPoints",1486,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalStructureFiller",1988,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller), -1, 0, 1, 1, 4, 0, "u 'ecalStructureFiller' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalStructureFiller), -1, 1, 1, 1, 4, 0, "u 'ecalStructureFiller' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_898_0_18, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalStructureFiller::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_898_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalStructureFiller::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_898_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalStructureFiller::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_898_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalStructureFiller::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_898_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_898_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalStructureFiller::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_898_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalStructureFiller::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_898_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalStructureFiller::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_898_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalStructureFiller::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalStructureFiller", 2114, G__G__ecalDict_898_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalDigi(void) {
   /* ecalDigi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi));
   G__memfunc_setup("ecalDigi",786,G__G__ecalDict_899_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalDigi",786,G__G__ecalDict_899_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_899_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ecalStructure' - 0 - structure", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedestal",1118,G__G__ecalDict_899_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 '80' ped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCMax",794,G__G__ecalDict_899_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 '16384' adcmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCNoise",1010,G__G__ecalDict_899_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.0e-3' adcnoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCChannel",1197,G__G__ecalDict_899_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.0e-3' adcchannel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChannelMap",1283,G__G__ecalDict_899_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,float,less<int>,allocator<pair<const int,float> > >' 'map<Int_t,Float_t>' 0 - map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadChannelMap",1367,G__G__ecalDict_899_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__G__ecalDict_899_0_13, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCMax",782,G__G__ecalDict_899_0_14, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCNoise",998,G__G__ecalDict_899_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCChannel",1185,G__G__ecalDict_899_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalDigi",786,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi), -1, 0, 1, 1, 4, 0, "u 'ecalDigi' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDigi), -1, 1, 1, 1, 4, 0, "u 'ecalDigi' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_899_0_19, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalDigi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_899_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalDigi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_899_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalDigi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_899_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalDigi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_899_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_899_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalDigi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_899_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalDigi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_899_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalDigi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_899_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalDigi::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalDigi", 912, G__G__ecalDict_899_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalPrepare(void) {
   /* ecalPrepare */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare));
   G__memfunc_setup("ecalPrepare",1124,G__G__ecalDict_900_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalPrepare",1124,G__G__ecalDict_900_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_900_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ecalStructure' - 0 - structure", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedestal",1118,G__G__ecalDict_900_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 '80' ped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCMax",794,G__G__ecalDict_900_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 '16384' adcmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADCChannel",1197,G__G__ecalDict_900_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1.0e-3' adcchannel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChannelMap",1283,G__G__ecalDict_900_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,float,less<int>,allocator<pair<const int,float> > >' 'map<Int_t,Float_t>' 0 - map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadChannelMap",1367,G__G__ecalDict_900_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__G__ecalDict_900_0_12, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCMax",782,G__G__ecalDict_900_0_13, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADCChannel",1185,G__G__ecalDict_900_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalPrepare",1124,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare), -1, 0, 1, 1, 4, 0, "u 'ecalPrepare' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalPrepare), -1, 1, 1, 1, 4, 0, "u 'ecalPrepare' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_900_0_17, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalPrepare::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_900_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalPrepare::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_900_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalPrepare::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_900_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalPrepare::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_900_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_900_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalPrepare::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_900_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalPrepare::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_900_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalPrepare::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_900_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalPrepare::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalPrepare", 1250, G__G__ecalDict_900_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalAnalysisSimple(void) {
   /* ecalAnalysisSimple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple));
   G__memfunc_setup("ecalAnalysisSimple",1859,G__G__ecalDict_901_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 - iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalAnalysisSimple",1859,G__G__ecalDict_901_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitTree",804,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalAnalysisSimple",1859,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple), -1, 0, 1, 1, 4, 0, "u 'ecalAnalysisSimple' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisSimple), -1, 0, 1, 1, 4, 0, "u 'ecalAnalysisSimple' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_901_0_9, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalAnalysisSimple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_901_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalAnalysisSimple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_901_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalAnalysisSimple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_901_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalAnalysisSimple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_901_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_901_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalAnalysisSimple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_901_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalAnalysisSimple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_901_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalAnalysisSimple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_901_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalAnalysisSimple::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalAnalysisSimple", 1985, G__G__ecalDict_901_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalAnalysisMaterial(void) {
   /* ecalAnalysisMaterial */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial));
   G__memfunc_setup("ecalAnalysisMaterial",2056,G__G__ecalDict_902_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 '0' iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalAnalysisMaterial",2056,G__G__ecalDict_902_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitTree",804,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalAnalysisMaterial",2056,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial), -1, 0, 1, 1, 4, 0, "u 'ecalAnalysisMaterial' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalAnalysisMaterial), -1, 1, 1, 1, 4, 0, "u 'ecalAnalysisMaterial' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_902_0_9, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalAnalysisMaterial::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_902_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalAnalysisMaterial::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_902_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalAnalysisMaterial::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_902_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalAnalysisMaterial::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_902_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_902_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalAnalysisMaterial::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_902_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalAnalysisMaterial::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_902_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalAnalysisMaterial::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_902_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalAnalysisMaterial::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalAnalysisMaterial", 2182, G__G__ecalDict_902_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalMaximum(void) {
   /* ecalMaximum */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum));
   G__memfunc_setup("ecalMaximum",1139,G__G__ecalDict_903_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalMaximum",1139,G__G__ecalDict_903_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum), -1, 0, 2, 1, 1, 0, 
"U 'ecalCell' - 0 - cell d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalMaximum",1139,G__G__ecalDict_903_0_3, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum), -1, 0, 5, 1, 1, 0, 
"U 'ecalCell' - 0 - cell d - 'Double_t' 0 - cx "
"d - 'Double_t' 0 - cy d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Cell",384,G__G__ecalDict_903_0_4, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCell), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CX",155,G__G__ecalDict_903_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CY",156,G__G__ecalDict_903_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__ecalDict_903_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ecalDict_903_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mark",395,G__G__ecalDict_903_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Theta",502,G__G__ecalDict_903_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMark",695,G__G__ecalDict_903_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mark", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTheta",802,G__G__ecalDict_903_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalMaximum",1139,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum), -1, 0, 1, 1, 4, 0, "u 'ecalMaximum' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum), -1, 1, 1, 1, 4, 0, "u 'ecalMaximum' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_903_0_15, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalMaximum::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_903_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMaximum::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_903_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalMaximum::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_903_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalMaximum::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_903_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_903_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMaximum::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_903_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalMaximum::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_903_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMaximum::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_903_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalMaximum::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalMaximum", 1265, G__G__ecalDict_903_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalMaximumLocator(void) {
   /* ecalMaximumLocator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator));
   G__memfunc_setup("ecalMaximumLocator",1863,G__G__ecalDict_904_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalMaximumLocator",1863,G__G__ecalDict_904_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 - verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_904_0_5, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "U 'ecalStructure' - 0 - structure", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ECut",369,G__G__ecalDict_904_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetECut",669,G__G__ecalDict_904_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.005' ecut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalMaximumLocator",1863,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator), -1, 0, 1, 1, 4, 0, "u 'ecalMaximumLocator' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximumLocator), -1, 1, 1, 1, 4, 0, "u 'ecalMaximumLocator' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_904_0_11, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalMaximumLocator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_904_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMaximumLocator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_904_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalMaximumLocator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_904_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalMaximumLocator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_904_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_904_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMaximumLocator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_904_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalMaximumLocator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_904_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMaximumLocator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_904_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalMaximumLocator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalMaximumLocator", 1989, G__G__ecalDict_904_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalCluster(void) {
   /* ecalCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster));
   G__memfunc_setup("ecalCluster",1143,G__G__ecalDict_907_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalCluster",1143,G__G__ecalDict_907_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - num u 'list<ecalCell*,allocator<ecalCell*> >' 'list<ecalCell*>' 11 - cluster "
"u 'list<ecalMaximum*,allocator<ecalMaximum*> >' 'list<ecalMaximum*>' 11 - maximums", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Number",617,G__G__ecalDict_907_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Size",411,G__G__ecalDict_907_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Maxs",409,G__G__ecalDict_907_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Energy",618,G__G__ecalDict_907_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreCalibrated",1298,G__G__ecalDict_907_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Moment",624,G__G__ecalDict_907_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MomentX",712,G__G__ecalDict_907_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MomentY",713,G__G__ecalDict_907_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__ecalDict_907_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ecalDict_907_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Chi2",326,G__G__ecalDict_907_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Status",644,G__G__ecalDict_907_0_14, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,G__G__ecalDict_907_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CellNum",688,G__G__ecalDict_907_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PeakNum",689,G__G__ecalDict_907_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreEnergy",913,G__G__ecalDict_907_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Maximum",734,G__G__ecalDict_907_0_19, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMaximum), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalCluster",1143,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster), -1, 0, 1, 1, 4, 0, "u 'ecalCluster' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalCluster), -1, 1, 1, 1, 4, 0, "u 'ecalCluster' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_907_0_22, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_907_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_907_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_907_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_907_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_907_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_907_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_907_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_907_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalCluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalCluster", 1269, G__G__ecalDict_907_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalClusterFinder(void) {
   /* ecalClusterFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder));
   G__memfunc_setup("ecalClusterFinder",1743,G__G__ecalDict_908_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 - verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalClusterFinder",1743,G__G__ecalDict_908_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_908_0_6, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray), -1, 0, 3, 1, 1, 0, 
"U 'ecalStructure' - 0 - structure U 'TClonesArray' - 0 - maximums "
"U 'ecalClusterCalibration' - 0 - calib", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MinMaxE",655,G__G__ecalDict_908_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MinClusterE",1099,G__G__ecalDict_908_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinMaxE",955,G__G__ecalDict_908_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.015' minmaxe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinClusterE",1399,G__G__ecalDict_908_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.03' minmaxe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FormClusters",1257,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FormPreClusters",1552,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearPreClusters",1635,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalClusterFinder",1743,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder), -1, 0, 1, 1, 4, 0, "u 'ecalClusterFinder' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterFinder), -1, 1, 1, 1, 4, 0, "u 'ecalClusterFinder' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_908_0_16, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalClusterFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_908_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalClusterFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_908_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalClusterFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_908_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalClusterFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_908_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_908_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalClusterFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_908_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalClusterFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_908_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalClusterFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_908_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalClusterFinder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalClusterFinder", 1869, G__G__ecalDict_908_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalClusterCalibration(void) {
   /* ecalClusterCalibration */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration));
   G__memfunc_setup("ecalClusterCalibration",2271,G__G__ecalDict_914_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalClusterCalibration",2271,G__G__ecalDict_914_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 0 '0' iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_914_0_4, 85, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStraightCalibration",2266,G__G__ecalDict_914_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - celltype U 'TFormula' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibration",1428,G__G__ecalDict_914_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - celltype U 'TFormula' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StraightCalibration",1966,G__G__ecalDict_914_0_9, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TFormula), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - celltype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibration",1128,G__G__ecalDict_914_0_10, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TFormula), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - celltype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibrate",903,G__G__ecalDict_914_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - celltype d - 'Double_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibrate",903,G__G__ecalDict_914_0_12, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - celltype d - 'Double_t' 0 - energy "
"d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalClusterCalibration",2271,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration), -1, 0, 1, 1, 4, 0, "u 'ecalClusterCalibration' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalClusterCalibration), -1, 1, 1, 1, 4, 0, "u 'ecalClusterCalibration' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_914_0_15, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalClusterCalibration::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_914_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalClusterCalibration::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_914_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalClusterCalibration::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_914_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalClusterCalibration::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_914_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_914_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalClusterCalibration::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_914_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalClusterCalibration::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_914_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalClusterCalibration::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_914_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalClusterCalibration::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalClusterCalibration", 2397, G__G__ecalDict_914_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalDrawer(void) {
   /* ecalDrawer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer));
   G__memfunc_setup("ecalDrawer",1018,G__G__ecalDict_923_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalDrawer",1018,G__G__ecalDict_923_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 '1' iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNamePrefix",1307,G__G__ecalDict_923_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - prefix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCellSize",1095,G__G__ecalDict_923_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_923_0_5, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'TClonesArray' - 0 - mctracks U 'TClonesArray' - 0 - ecalPoints "
"U 'ecalStructure' - 0 - structure U 'TClonesArray' - 0 - clusters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PutPixel",827,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"f - 'Float_t' 0 - r f - 'Float_t' 0 - g "
"f - 'Float_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutPixel",827,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"C - - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawMark",793,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"C - - 10 - color i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawCell",782,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'ecalCell' - 0 - cell f - 'Float_t' 0 - r "
"f - 'Float_t' 0 - g f - 'Float_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawCell",782,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ecalCell' - 0 - cell C - - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawLine",790,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"C - - 10 - color i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawLine",790,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"C - - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawEnergy",1016,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ecalPoint' - 0 - p C - - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawPDG",617,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ecalPoint' - 0 - p C - - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawEnergy",1016,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - p C - - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetP",368,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "U 'ecalPoint' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawChi2",724,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - chi2 C - - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawMC",542,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawCells",897,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawImage",881,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalDrawer",1018,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer), -1, 0, 1, 1, 4, 0, "u 'ecalDrawer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__ecalDictLN_ecalDrawer), -1, 1, 1, 1, 4, 0, "u 'ecalDrawer' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_923_0_26, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalDrawer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_923_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalDrawer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_923_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalDrawer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_923_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalDrawer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_923_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_923_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalDrawer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_923_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalDrawer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_923_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalDrawer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_923_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalDrawer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalDrawer", 1144, G__G__ecalDict_923_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalReconstructed(void) {
   /* ecalReconstructed */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed));
   G__memfunc_setup("ecalReconstructed",1786,G__G__ecalDict_928_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalReconstructed",1786,G__G__ecalDict_928_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed), -1, 0, 7, 1, 1, 0, 
"f - 'Float_t' 0 - rawE f - 'Float_t' 0 - recoE "
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"i - 'Int_t' 0 - cellnum i - 'Int_t' 0 - clusternum "
"i - 'Int_t' 0 '-1111' mc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RawE",367,G__G__ecalDict_928_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecoE",462,G__G__ecalDict_928_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__G__ecalDict_928_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__G__ecalDict_928_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CellNum",688,G__G__ecalDict_928_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClusterNum",1042,G__G__ecalDict_928_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCTrack",645,G__G__ecalDict_928_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMCTrack",945,G__G__ecalDict_928_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mctrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_928_0_11, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalReconstructed::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_928_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalReconstructed::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_928_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalReconstructed::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_928_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalReconstructed::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_928_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_928_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalReconstructed::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_928_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalReconstructed::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_928_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalReconstructed::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_928_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalReconstructed::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ecalReconstructed", 1786, G__G__ecalDict_928_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed), -1, 0, 1, 1, 1, 0, "u 'ecalReconstructed' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ecalReconstructed", 1912, G__G__ecalDict_928_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__ecalDict_928_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__ecalDictLN_ecalReconstructed), -1, 1, 1, 1, 1, 0, "u 'ecalReconstructed' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalReco(void) {
   /* ecalReco */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco));
   G__memfunc_setup("ecalReco",798,G__G__ecalDict_929_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 - verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalReco",798,G__G__ecalDict_929_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalReco), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_929_0_6, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClonesArray), -1, 0, 3, 1, 1, 0, 
"U 'TClonesArray' - 0 - clusters U 'ecalStructure' - 0 - str "
"U 'ecalClusterCalibration' - 0 - calib", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReconstructXY",1357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'ecalCell' - 0 - max f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TryReconstruct",1499,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ecalCluster' - 0 - cls i - 'Int_t' 0 - clsnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_929_0_9, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalReco::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_929_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalReco::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_929_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalReco::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_929_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalReco::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_929_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_929_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalReco::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_929_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalReco::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_929_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalReco::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_929_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalReco::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalReco", 924, G__G__ecalDict_929_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncecalMatch(void) {
   /* ecalMatch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch));
   G__memfunc_setup("ecalMatch",898,G__G__ecalDict_930_0_1, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 - verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ecalMatch",898,G__G__ecalDict_930_0_2, 105, G__get_linked_tagnum(&G__G__ecalDictLN_ecalMatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUse3x3",811,G__G__ecalDict_930_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUse3x3",823,G__G__ecalDict_930_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' use3x3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__ecalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPython",1046,G__G__ecalDict_930_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'ecalStructure' - 0 - str U 'TClonesArray' - 0 - reconstructed "
"U 'TClonesArray' - 0 - mctracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__ecalDict_930_0_9, 85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ecalMatch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__ecalDict_930_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMatch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__ecalDict_930_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ecalMatch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__ecalDict_930_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ecalMatch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__ecalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__ecalDict_930_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__ecalDict_930_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMatch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__ecalDict_930_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalMatch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__ecalDict_930_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ecalMatch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__ecalDict_930_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ecalMatch::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ecalMatch", 1024, G__G__ecalDict_930_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__ecalDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__ecalDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__ecalDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__ecalDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR = { "set<FairLink,less<FairLink>,allocator<FairLink> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__ecalDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_listlETStringcOallocatorlETStringgRsPgR = { "list<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR = { "map<TString,TChain*,less<TString>,allocator<pair<const TString,TChain*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR = { "map<TString,list<TString,allocator<TString> >*,less<TString>,allocator<pair<const TString,list<TString,allocator<TString> >*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR = { "multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR = { "map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >,less<TString>,allocator<pair<const TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > > > > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR = { "map<TString,TObject*,less<TString>,allocator<pair<const TString,TObject*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR = { "deque<TClonesArray*,allocator<TClonesArray*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR = { "queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR = { "map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >,less<TString>,allocator<pair<const TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > > > > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR = { "map<TString,TClonesArray*,less<TString>,allocator<pair<const TString,TClonesArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR = { "map<TString,FairTSBufferFunctional*,less<TString>,allocator<pair<const TString,FairTSBufferFunctional*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR = { "map<TString,FairWriteoutBuffer*,less<TString>,allocator<pair<const TString,FairWriteoutBuffer*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR = { "map<int,TBranch*,less<int>,allocator<pair<const int,TBranch*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR = { "map<TString,int,less<TString>,allocator<pair<const TString,int> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR = { "map<unsigned int,FairFileSource*,less<unsigned int>,allocator<pair<const unsigned int,FairFileSource*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR = { "map<unsigned int,double,less<unsigned int>,allocator<pair<const unsigned int,double> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR = { "map<unsigned int,unsigned int,less<unsigned int>,allocator<pair<const unsigned int,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairMultiLinkedData_Interface = { "FairMultiLinkedData_Interface" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairMCPoint = { "FairMCPoint" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalPoint = { "ecalPoint" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecal = { "ecal" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalInf = { "ecalInf" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalCell = { "ecalCell" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR = { "list<ecalCell*,allocator<ecalCell*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalModule = { "ecalModule" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR = { "vector<ecalCell*,allocator<ecalCell*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_reverse_iteratorlEvectorlEecalCellmUcOallocatorlEecalCellmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ecalCell*,allocator<ecalCell*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalStructure = { "ecalStructure" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_vectorlEecalModulemUcOallocatorlEecalModulemUgRsPgR = { "vector<ecalModule*,allocator<ecalModule*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_reverse_iteratorlEvectorlEecalModulemUcOallocatorlEecalModulemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ecalModule*,allocator<ecalModule*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_vectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgR = { "vector<__ecalCellWrapper*,allocator<__ecalCellWrapper*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_reverse_iteratorlEvectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<__ecalCellWrapper*,allocator<__ecalCellWrapper*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairTask = { "FairTask" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairContFact = { "FairContFact" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairParSet = { "FairParSet" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairVolume = { "FairVolume" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairModule = { "FairModule" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairDetector = { "FairDetector" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TGeoTranslation = { "TGeoTranslation" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalLightMap = { "ecalLightMap" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_pairlEintcOTGeoVolumemUgR = { "pair<int,TGeoVolume*>" , 115 , -1 };
G__linked_taginfo G__G__ecalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR = { "list<pair<int,TGeoVolume*>,allocator<pair<int,TGeoVolume*> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_FairContainer = { "FairContainer" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalContFact = { "ecalContFact" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalCellMC = { "ecalCellMC" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR = { "map<int,float,less<int>,allocator<pair<const int,float> > >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator = { "map<int,float,less<int>,allocator<pair<const int,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_InitStatus = { "InitStatus" , 101 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalStructureFiller = { "ecalStructureFiller" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalDigi = { "ecalDigi" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalPrepare = { "ecalPrepare" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalAnalysisSimple = { "ecalAnalysisSimple" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalAnalysisMaterial = { "ecalAnalysisMaterial" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalMaximum = { "ecalMaximum" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalMaximumLocator = { "ecalMaximumLocator" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_binary_functionlEecalCellmUcOecalCellmUcOboolgR = { "binary_function<ecalCell*,ecalCell*,bool>" , 115 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalCluster = { "ecalCluster" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalClusterFinder = { "ecalClusterFinder" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_listlEecalMaximummUcOallocatorlEecalMaximummUgRsPgR = { "list<ecalMaximum*,allocator<ecalMaximum*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalClusterCalibration = { "ecalClusterCalibration" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_listlEecalPreClustermUcOallocatorlEecalPreClustermUgRsPgR = { "list<ecalPreCluster*,allocator<ecalPreCluster*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TFormula = { "TFormula" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TASImage = { "TASImage" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_TText = { "TText" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalDrawer = { "ecalDrawer" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_listlEecalDrawerItemmUcOallocatorlEecalDrawerItemmUgRsPgR = { "list<ecalDrawerItem*,allocator<ecalDrawerItem*> >" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalReconstructed = { "ecalReconstructed" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalReco = { "ecalReco" , 99 , -1 };
G__linked_taginfo G__G__ecalDictLN_ecalMatch = { "ecalMatch" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__ecalDict() {
  G__G__ecalDictLN_TClass.tagnum = -1 ;
  G__G__ecalDictLN_TBuffer.tagnum = -1 ;
  G__G__ecalDictLN_TMemberInspector.tagnum = -1 ;
  G__G__ecalDictLN_TObject.tagnum = -1 ;
  G__G__ecalDictLN_TNamed.tagnum = -1 ;
  G__G__ecalDictLN_TString.tagnum = -1 ;
  G__G__ecalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ecalDictLN_TObjArray.tagnum = -1 ;
  G__G__ecalDictLN_TClonesArray.tagnum = -1 ;
  G__G__ecalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ecalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__ecalDictLN_TTree.tagnum = -1 ;
  G__G__ecalDictLN_TArrayD.tagnum = -1 ;
  G__G__ecalDictLN_TArrayI.tagnum = -1 ;
  G__G__ecalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_TMap.tagnum = -1 ;
  G__G__ecalDictLN_listlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_FairMultiLinkedData_Interface.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__ecalDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__ecalDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__ecalDictLN_TVector3.tagnum = -1 ;
  G__G__ecalDictLN_FairMCPoint.tagnum = -1 ;
  G__G__ecalDictLN_ecalPoint.tagnum = -1 ;
  G__G__ecalDictLN_ecal.tagnum = -1 ;
  G__G__ecalDictLN_ecalInf.tagnum = -1 ;
  G__G__ecalDictLN_ecalCell.tagnum = -1 ;
  G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_ecalModule.tagnum = -1 ;
  G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_reverse_iteratorlEvectorlEecalCellmUcOallocatorlEecalCellmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ecalDictLN_ecalStructure.tagnum = -1 ;
  G__G__ecalDictLN_vectorlEecalModulemUcOallocatorlEecalModulemUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_reverse_iteratorlEvectorlEecalModulemUcOallocatorlEecalModulemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ecalDictLN_vectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_reverse_iteratorlEvectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ecalDictLN_TGeoVolume.tagnum = -1 ;
  G__G__ecalDictLN_FairTask.tagnum = -1 ;
  G__G__ecalDictLN_FairContFact.tagnum = -1 ;
  G__G__ecalDictLN_FairParSet.tagnum = -1 ;
  G__G__ecalDictLN_FairVolume.tagnum = -1 ;
  G__G__ecalDictLN_FairModule.tagnum = -1 ;
  G__G__ecalDictLN_FairDetector.tagnum = -1 ;
  G__G__ecalDictLN_TLorentzVector.tagnum = -1 ;
  G__G__ecalDictLN_TGeoTranslation.tagnum = -1 ;
  G__G__ecalDictLN_ecalLightMap.tagnum = -1 ;
  G__G__ecalDictLN_pairlEintcOTGeoVolumemUgR.tagnum = -1 ;
  G__G__ecalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_FairContainer.tagnum = -1 ;
  G__G__ecalDictLN_ecalContFact.tagnum = -1 ;
  G__G__ecalDictLN_ecalCellMC.tagnum = -1 ;
  G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__G__ecalDictLN_TTask.tagnum = -1 ;
  G__G__ecalDictLN_InitStatus.tagnum = -1 ;
  G__G__ecalDictLN_ecalStructureFiller.tagnum = -1 ;
  G__G__ecalDictLN_ecalDigi.tagnum = -1 ;
  G__G__ecalDictLN_ecalPrepare.tagnum = -1 ;
  G__G__ecalDictLN_ecalAnalysisSimple.tagnum = -1 ;
  G__G__ecalDictLN_ecalAnalysisMaterial.tagnum = -1 ;
  G__G__ecalDictLN_ecalMaximum.tagnum = -1 ;
  G__G__ecalDictLN_ecalMaximumLocator.tagnum = -1 ;
  G__G__ecalDictLN_binary_functionlEecalCellmUcOecalCellmUcOboolgR.tagnum = -1 ;
  G__G__ecalDictLN_ecalCluster.tagnum = -1 ;
  G__G__ecalDictLN_ecalClusterFinder.tagnum = -1 ;
  G__G__ecalDictLN_listlEecalMaximummUcOallocatorlEecalMaximummUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_ecalClusterCalibration.tagnum = -1 ;
  G__G__ecalDictLN_listlEecalPreClustermUcOallocatorlEecalPreClustermUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_TFormula.tagnum = -1 ;
  G__G__ecalDictLN_TASImage.tagnum = -1 ;
  G__G__ecalDictLN_TText.tagnum = -1 ;
  G__G__ecalDictLN_ecalDrawer.tagnum = -1 ;
  G__G__ecalDictLN_listlEecalDrawerItemmUcOallocatorlEecalDrawerItemmUgRsPgR.tagnum = -1 ;
  G__G__ecalDictLN_ecalReconstructed.tagnum = -1 ;
  G__G__ecalDictLN_ecalReco.tagnum = -1 ;
  G__G__ecalDictLN_ecalMatch.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__ecalDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMap);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_listlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairMultiLinkedData_Interface);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairMCPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalPoint),sizeof(ecalPoint),-1,327424,(char*)NULL,G__setup_memvarecalPoint,G__setup_memfuncecalPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecal),sizeof(ecal),-1,65280,(char*)NULL,G__setup_memvarecal,G__setup_memfuncecal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalInf),sizeof(ecalInf),-1,327424,(char*)NULL,G__setup_memvarecalInf,G__setup_memfuncecalInf);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalCell),sizeof(ecalCell),-1,61440,(char*)NULL,G__setup_memvarecalCell,G__setup_memfuncecalCell);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_listlEecalCellmUcOallocatorlEecalCellmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalModule),sizeof(ecalModule),-1,61696,(char*)NULL,G__setup_memvarecalModule,G__setup_memfuncecalModule);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_vectorlEecalCellmUcOallocatorlEecalCellmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_reverse_iteratorlEvectorlEecalCellmUcOallocatorlEecalCellmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalStructure),sizeof(ecalStructure),-1,64000,(char*)NULL,G__setup_memvarecalStructure,G__setup_memfuncecalStructure);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_vectorlEecalModulemUcOallocatorlEecalModulemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_reverse_iteratorlEvectorlEecalModulemUcOallocatorlEecalModulemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_vectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_reverse_iteratorlEvectorlE__ecalCellWrappermUcOallocatorlE__ecalCellWrappermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairTask);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairContFact);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairParSet);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairVolume);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairModule);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairDetector);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TLorentzVector);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TGeoTranslation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalLightMap),sizeof(ecalLightMap),-1,65280,(char*)NULL,G__setup_memvarecalLightMap,G__setup_memfuncecalLightMap);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_pairlEintcOTGeoVolumemUgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_FairContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalContFact),sizeof(ecalContFact),-1,62720,"Factory for all ecal parameter containers",G__setup_memvarecalContFact,G__setup_memfuncecalContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalCellMC),sizeof(ecalCellMC),-1,61440,(char*)NULL,G__setup_memvarecalCellMC,G__setup_memfuncecalCellMC);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TTask);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_InitStatus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalStructureFiller),sizeof(ecalStructureFiller),-1,65280,(char*)NULL,G__setup_memvarecalStructureFiller,G__setup_memfuncecalStructureFiller);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalDigi),sizeof(ecalDigi),-1,65280,(char*)NULL,G__setup_memvarecalDigi,G__setup_memfuncecalDigi);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalPrepare),sizeof(ecalPrepare),-1,65280,(char*)NULL,G__setup_memvarecalPrepare,G__setup_memfuncecalPrepare);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalAnalysisSimple),sizeof(ecalAnalysisSimple),-1,65280,(char*)NULL,G__setup_memvarecalAnalysisSimple,G__setup_memfuncecalAnalysisSimple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalAnalysisMaterial),sizeof(ecalAnalysisMaterial),-1,65280,(char*)NULL,G__setup_memvarecalAnalysisMaterial,G__setup_memfuncecalAnalysisMaterial);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalMaximum),sizeof(ecalMaximum),-1,327424,(char*)NULL,G__setup_memvarecalMaximum,G__setup_memfuncecalMaximum);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalMaximumLocator),sizeof(ecalMaximumLocator),-1,65280,(char*)NULL,G__setup_memvarecalMaximumLocator,G__setup_memfuncecalMaximumLocator);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_binary_functionlEecalCellmUcOecalCellmUcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalCluster),sizeof(ecalCluster),-1,327424,(char*)NULL,G__setup_memvarecalCluster,G__setup_memfuncecalCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalClusterFinder),sizeof(ecalClusterFinder),-1,65280,(char*)NULL,G__setup_memvarecalClusterFinder,G__setup_memfuncecalClusterFinder);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_listlEecalMaximummUcOallocatorlEecalMaximummUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalClusterCalibration),sizeof(ecalClusterCalibration),-1,65280,(char*)NULL,G__setup_memvarecalClusterCalibration,G__setup_memfuncecalClusterCalibration);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_listlEecalPreClustermUcOallocatorlEecalPreClustermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TFormula);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TASImage);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_TText);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalDrawer),sizeof(ecalDrawer),-1,65280,(char*)NULL,G__setup_memvarecalDrawer,G__setup_memfuncecalDrawer);
   G__get_linked_tagnum_fwd(&G__G__ecalDictLN_listlEecalDrawerItemmUcOallocatorlEecalDrawerItemmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalReconstructed),sizeof(ecalReconstructed),-1,324864,(char*)NULL,G__setup_memvarecalReconstructed,G__setup_memfuncecalReconstructed);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalReco),sizeof(ecalReco),-1,62720,(char*)NULL,G__setup_memvarecalReco,G__setup_memfuncecalReco);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__ecalDictLN_ecalMatch),sizeof(ecalMatch),-1,62720,(char*)NULL,G__setup_memvarecalMatch,G__setup_memfuncecalMatch);
}
extern "C" void G__cpp_setupG__ecalDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__ecalDict()");
  G__set_cpp_environmentG__ecalDict();
  G__cpp_setup_tagtableG__ecalDict();

  G__cpp_setup_inheritanceG__ecalDict();

  G__cpp_setup_typetableG__ecalDict();

  G__cpp_setup_memvarG__ecalDict();

  G__cpp_setup_memfuncG__ecalDict();
  G__cpp_setup_globalG__ecalDict();
  G__cpp_setup_funcG__ecalDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__ecalDict();
  return;
}
class G__cpp_setup_initG__ecalDict {
  public:
    G__cpp_setup_initG__ecalDict() { G__add_setup_func("G__ecalDict",(G__incsetup)(&G__cpp_setupG__ecalDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__ecalDict() { G__remove_setup_func("G__ecalDict"); }
};
G__cpp_setup_initG__ecalDict G__cpp_setup_initializerG__ecalDict;

