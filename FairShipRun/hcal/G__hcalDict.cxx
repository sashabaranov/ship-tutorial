//
// File generated by /opt/ocean/FairSoftInst/bin/rootcint at Thu Oct  8 06:25:39 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIinputdIFairShipRundIhcaldIG__hcalDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__hcalDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void hcalContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcalContFact(void *p = 0);
   static void *newArray_hcalContFact(Long_t size, void *p);
   static void delete_hcalContFact(void *p);
   static void deleteArray_hcalContFact(void *p);
   static void destruct_hcalContFact(void *p);
   static void streamer_hcalContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalContFact*)
   {
      ::hcalContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalContFact", ::hcalContFact::Class_Version(), "/input/FairShip/hcal/hcalContFact.h", 9,
                  typeid(::hcalContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalContFact::Dictionary, isa_proxy, 0,
                  sizeof(::hcalContFact) );
      instance.SetNew(&new_hcalContFact);
      instance.SetNewArray(&newArray_hcalContFact);
      instance.SetDelete(&delete_hcalContFact);
      instance.SetDeleteArray(&deleteArray_hcalContFact);
      instance.SetDestructor(&destruct_hcalContFact);
      instance.SetStreamerFunc(&streamer_hcalContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalContFact*)
   {
      return GenerateInitInstanceLocal((::hcalContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcalPoint(void *p = 0);
   static void *newArray_hcalPoint(Long_t size, void *p);
   static void delete_hcalPoint(void *p);
   static void deleteArray_hcalPoint(void *p);
   static void destruct_hcalPoint(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalPoint*)
   {
      ::hcalPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalPoint >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalPoint", ::hcalPoint::Class_Version(), "/input/FairShip/hcal/hcalPoint.h", 13,
                  typeid(::hcalPoint), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalPoint::Dictionary, isa_proxy, 4,
                  sizeof(::hcalPoint) );
      instance.SetNew(&new_hcalPoint);
      instance.SetNewArray(&newArray_hcalPoint);
      instance.SetDelete(&delete_hcalPoint);
      instance.SetDeleteArray(&deleteArray_hcalPoint);
      instance.SetDestructor(&destruct_hcalPoint);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalPoint*)
   {
      return GenerateInitInstanceLocal((::hcalPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcal(void *p = 0);
   static void *newArray_hcal(Long_t size, void *p);
   static void delete_hcal(void *p);
   static void deleteArray_hcal(void *p);
   static void destruct_hcal(void *p);
   static void streamer_hcal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcal*)
   {
      ::hcal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcal", ::hcal::Class_Version(), "/input/FairShip/hcal/hcal.h", 32,
                  typeid(::hcal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcal::Dictionary, isa_proxy, 0,
                  sizeof(::hcal) );
      instance.SetNew(&new_hcal);
      instance.SetNewArray(&newArray_hcal);
      instance.SetDelete(&delete_hcal);
      instance.SetDeleteArray(&deleteArray_hcal);
      instance.SetDestructor(&destruct_hcal);
      instance.SetStreamerFunc(&streamer_hcal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcal*)
   {
      return GenerateInitInstanceLocal((::hcal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalInf_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcalInf(void *p = 0);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalInf*)
   {
      ::hcalInf *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalInf >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalInf", ::hcalInf::Class_Version(), "/input/FairShip/hcal/hcalInf.h", 20,
                  typeid(::hcalInf), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalInf::Dictionary, isa_proxy, 4,
                  sizeof(::hcalInf) );
      instance.SetNew(&new_hcalInf);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalInf*)
   {
      return GenerateInitInstanceLocal((::hcalInf*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalInf*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_hcalModule(void *p);
   static void deleteArray_hcalModule(void *p);
   static void destruct_hcalModule(void *p);
   static void streamer_hcalModule(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalModule*)
   {
      ::hcalModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalModule", ::hcalModule::Class_Version(), "/input/FairShip/hcal/hcalModule.h", 17,
                  typeid(::hcalModule), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalModule::Dictionary, isa_proxy, 0,
                  sizeof(::hcalModule) );
      instance.SetDelete(&delete_hcalModule);
      instance.SetDeleteArray(&deleteArray_hcalModule);
      instance.SetDestructor(&destruct_hcalModule);
      instance.SetStreamerFunc(&streamer_hcalModule);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalModule*)
   {
      return GenerateInitInstanceLocal((::hcalModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalStructure_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_hcalStructure(void *p);
   static void deleteArray_hcalStructure(void *p);
   static void destruct_hcalStructure(void *p);
   static void streamer_hcalStructure(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalStructure*)
   {
      ::hcalStructure *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalStructure >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalStructure", ::hcalStructure::Class_Version(), "/input/FairShip/hcal/hcalStructure.h", 21,
                  typeid(::hcalStructure), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalStructure::Dictionary, isa_proxy, 0,
                  sizeof(::hcalStructure) );
      instance.SetDelete(&delete_hcalStructure);
      instance.SetDeleteArray(&deleteArray_hcalStructure);
      instance.SetDestructor(&destruct_hcalStructure);
      instance.SetStreamerFunc(&streamer_hcalStructure);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalStructure*)
   {
      return GenerateInitInstanceLocal((::hcalStructure*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalStructure*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalLightMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcalLightMap(void *p = 0);
   static void *newArray_hcalLightMap(Long_t size, void *p);
   static void delete_hcalLightMap(void *p);
   static void deleteArray_hcalLightMap(void *p);
   static void destruct_hcalLightMap(void *p);
   static void streamer_hcalLightMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalLightMap*)
   {
      ::hcalLightMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalLightMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalLightMap", ::hcalLightMap::Class_Version(), "/input/FairShip/hcal/hcalLightMap.h", 7,
                  typeid(::hcalLightMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalLightMap::Dictionary, isa_proxy, 0,
                  sizeof(::hcalLightMap) );
      instance.SetNew(&new_hcalLightMap);
      instance.SetNewArray(&newArray_hcalLightMap);
      instance.SetDelete(&delete_hcalLightMap);
      instance.SetDeleteArray(&deleteArray_hcalLightMap);
      instance.SetDestructor(&destruct_hcalLightMap);
      instance.SetStreamerFunc(&streamer_hcalLightMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalLightMap*)
   {
      return GenerateInitInstanceLocal((::hcalLightMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalLightMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalModuleMC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_hcalModuleMC(void *p);
   static void deleteArray_hcalModuleMC(void *p);
   static void destruct_hcalModuleMC(void *p);
   static void streamer_hcalModuleMC(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalModuleMC*)
   {
      ::hcalModuleMC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalModuleMC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalModuleMC", ::hcalModuleMC::Class_Version(), "/input/FairShip/hcal/hcalModuleMC.h", 19,
                  typeid(::hcalModuleMC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalModuleMC::Dictionary, isa_proxy, 0,
                  sizeof(::hcalModuleMC) );
      instance.SetDelete(&delete_hcalModuleMC);
      instance.SetDeleteArray(&deleteArray_hcalModuleMC);
      instance.SetDestructor(&destruct_hcalModuleMC);
      instance.SetStreamerFunc(&streamer_hcalModuleMC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalModuleMC*)
   {
      return GenerateInitInstanceLocal((::hcalModuleMC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalModuleMC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalStructureFiller_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcalStructureFiller(void *p = 0);
   static void *newArray_hcalStructureFiller(Long_t size, void *p);
   static void delete_hcalStructureFiller(void *p);
   static void deleteArray_hcalStructureFiller(void *p);
   static void destruct_hcalStructureFiller(void *p);
   static void streamer_hcalStructureFiller(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalStructureFiller*)
   {
      ::hcalStructureFiller *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalStructureFiller >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalStructureFiller", ::hcalStructureFiller::Class_Version(), "/input/FairShip/hcal/hcalStructureFiller.h", 24,
                  typeid(::hcalStructureFiller), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalStructureFiller::Dictionary, isa_proxy, 0,
                  sizeof(::hcalStructureFiller) );
      instance.SetNew(&new_hcalStructureFiller);
      instance.SetNewArray(&newArray_hcalStructureFiller);
      instance.SetDelete(&delete_hcalStructureFiller);
      instance.SetDeleteArray(&deleteArray_hcalStructureFiller);
      instance.SetDestructor(&destruct_hcalStructureFiller);
      instance.SetStreamerFunc(&streamer_hcalStructureFiller);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalStructureFiller*)
   {
      return GenerateInitInstanceLocal((::hcalStructureFiller*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalStructureFiller*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void hcalAnalysisSimple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_hcalAnalysisSimple(void *p = 0);
   static void *newArray_hcalAnalysisSimple(Long_t size, void *p);
   static void delete_hcalAnalysisSimple(void *p);
   static void deleteArray_hcalAnalysisSimple(void *p);
   static void destruct_hcalAnalysisSimple(void *p);
   static void streamer_hcalAnalysisSimple(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::hcalAnalysisSimple*)
   {
      ::hcalAnalysisSimple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::hcalAnalysisSimple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("hcalAnalysisSimple", ::hcalAnalysisSimple::Class_Version(), "/input/FairShip/hcal/hcalAnalysisSimple.h", 15,
                  typeid(::hcalAnalysisSimple), ::ROOT::DefineBehavior(ptr, ptr),
                  &::hcalAnalysisSimple::Dictionary, isa_proxy, 0,
                  sizeof(::hcalAnalysisSimple) );
      instance.SetNew(&new_hcalAnalysisSimple);
      instance.SetNewArray(&newArray_hcalAnalysisSimple);
      instance.SetDelete(&delete_hcalAnalysisSimple);
      instance.SetDeleteArray(&deleteArray_hcalAnalysisSimple);
      instance.SetDestructor(&destruct_hcalAnalysisSimple);
      instance.SetStreamerFunc(&streamer_hcalAnalysisSimple);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::hcalAnalysisSimple*)
   {
      return GenerateInitInstanceLocal((::hcalAnalysisSimple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::hcalAnalysisSimple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr hcalContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalContFact::Class_Name()
{
   return "hcalContFact";
}

//______________________________________________________________________________
const char *hcalContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalPoint::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalPoint::Class_Name()
{
   return "hcalPoint";
}

//______________________________________________________________________________
const char *hcalPoint::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalPoint*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalPoint::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalPoint*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalPoint::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalPoint*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalPoint::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalPoint*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcal::Class_Name()
{
   return "hcal";
}

//______________________________________________________________________________
const char *hcal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalInf::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalInf::Class_Name()
{
   return "hcalInf";
}

//______________________________________________________________________________
const char *hcalInf::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalInf*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalInf::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalInf*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalInf::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalInf*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalInf::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalInf*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalModule::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalModule::Class_Name()
{
   return "hcalModule";
}

//______________________________________________________________________________
const char *hcalModule::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalModule::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalModule::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalModule::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModule*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalStructure::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalStructure::Class_Name()
{
   return "hcalStructure";
}

//______________________________________________________________________________
const char *hcalStructure::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructure*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalStructure::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructure*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalStructure::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructure*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalStructure::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructure*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalLightMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalLightMap::Class_Name()
{
   return "hcalLightMap";
}

//______________________________________________________________________________
const char *hcalLightMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalLightMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalLightMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalLightMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalLightMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalLightMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalLightMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalLightMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalModuleMC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalModuleMC::Class_Name()
{
   return "hcalModuleMC";
}

//______________________________________________________________________________
const char *hcalModuleMC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModuleMC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalModuleMC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModuleMC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalModuleMC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModuleMC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalModuleMC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalModuleMC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalStructureFiller::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalStructureFiller::Class_Name()
{
   return "hcalStructureFiller";
}

//______________________________________________________________________________
const char *hcalStructureFiller::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructureFiller*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalStructureFiller::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructureFiller*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalStructureFiller::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructureFiller*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalStructureFiller::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalStructureFiller*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr hcalAnalysisSimple::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *hcalAnalysisSimple::Class_Name()
{
   return "hcalAnalysisSimple";
}

//______________________________________________________________________________
const char *hcalAnalysisSimple::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalAnalysisSimple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int hcalAnalysisSimple::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::hcalAnalysisSimple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void hcalAnalysisSimple::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalAnalysisSimple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *hcalAnalysisSimple::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::hcalAnalysisSimple*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void hcalContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalContFact.

   FairContFact::Streamer(R__b);
}

//______________________________________________________________________________
void hcalContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalContFact.
      TClass *R__cl = ::hcalContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_hcalContFact(void *p) {
      return  p ? new(p) ::hcalContFact : new ::hcalContFact;
   }
   static void *newArray_hcalContFact(Long_t nElements, void *p) {
      return p ? new(p) ::hcalContFact[nElements] : new ::hcalContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_hcalContFact(void *p) {
      delete ((::hcalContFact*)p);
   }
   static void deleteArray_hcalContFact(void *p) {
      delete [] ((::hcalContFact*)p);
   }
   static void destruct_hcalContFact(void *p) {
      typedef ::hcalContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcalContFact(TBuffer &buf, void *obj) {
      ((::hcalContFact*)obj)->::hcalContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcalContFact

//______________________________________________________________________________
void hcalPoint::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalPoint.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(hcalPoint::Class(),this);
   } else {
      R__b.WriteClassBuffer(hcalPoint::Class(),this);
   }
}

//______________________________________________________________________________
void hcalPoint::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalPoint.
      TClass *R__cl = ::hcalPoint::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdgCode", &fPdgCode);
      FairMCPoint::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_hcalPoint(void *p) {
      return  p ? new(p) ::hcalPoint : new ::hcalPoint;
   }
   static void *newArray_hcalPoint(Long_t nElements, void *p) {
      return p ? new(p) ::hcalPoint[nElements] : new ::hcalPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_hcalPoint(void *p) {
      delete ((::hcalPoint*)p);
   }
   static void deleteArray_hcalPoint(void *p) {
      delete [] ((::hcalPoint*)p);
   }
   static void destruct_hcalPoint(void *p) {
      typedef ::hcalPoint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::hcalPoint

//______________________________________________________________________________
void hcalInf::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalInf.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(hcalInf::Class(),this);
   } else {
      R__b.WriteClassBuffer(hcalInf::Class(),this);
   }
}

//______________________________________________________________________________
void hcalInf::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalInf.
      TClass *R__cl = ::hcalInf::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVariables", &fVariables);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHcalStr", &fHcalStr);
      R__insp.InspectMember(fHcalStr, "fHcalStr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXPos", &fXPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYPos", &fYPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZPos", &fZPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLayers", &fNLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN1Layers", &fN1Layers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXSize", &fXSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYSize", &fYSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleSize", &fModuleSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsorber", &fAbsorber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScin", &fScin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTyveec", &fTyveec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessLayer", &fThicknessLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellSize", &fCellSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHcalSize[3]", fHcalSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fECut", &fECut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHCut", &fHCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiX", &fSemiX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiY", &fSemiY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFastMC", &fFastMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSuccess", &fSuccess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_hcalInf(void *p) {
      return  p ? new(p) ::hcalInf : new ::hcalInf;
   }
} // end of namespace ROOTDict for class ::hcalInf

//______________________________________________________________________________
void hcalModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalModule.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fNumber;
      R__b >> fX1;
      R__b >> fY1;
      R__b >> fX2;
      R__b >> fY2;
      R__b >> fEnergy;
      R__b >> fEnergy2;
      R__b >> fADC;
      {
         list<hcalModule*> &R__stl =  fNeighbors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(hcalModule));
         if (R__tcl1==0) {
            Error("fNeighbors streamer","Missing the TClass object for hcalModule!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            hcalModule* R__t;
            R__t = (hcalModule*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, hcalModule::IsA());
   } else {
      R__c = R__b.WriteVersion(hcalModule::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fNumber;
      R__b << fX1;
      R__b << fY1;
      R__b << fX2;
      R__b << fY2;
      R__b << fEnergy;
      R__b << fEnergy2;
      R__b << fADC;
      {
         list<hcalModule*> &R__stl =  fNeighbors;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            list<hcalModule*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcalModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalModule.
      TClass *R__cl = ::hcalModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumber", &fNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX1", &fX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY1", &fY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX2", &fX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY2", &fY2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy2", &fEnergy2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeighbors", (void*)&fNeighbors);
      R__insp.InspectMember("list<hcalModule*>", (void*)&fNeighbors, "fNeighbors.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_hcalModule(void *p) {
      delete ((::hcalModule*)p);
   }
   static void deleteArray_hcalModule(void *p) {
      delete [] ((::hcalModule*)p);
   }
   static void destruct_hcalModule(void *p) {
      typedef ::hcalModule current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcalModule(TBuffer &buf, void *obj) {
      ((::hcalModule*)obj)->::hcalModule::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcalModule

//______________________________________________________________________________
void hcalModuleMC::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalModuleMC.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      hcalModule::Streamer(R__b);
      {
         map<Int_t,Float_t> &R__stl =  fTrackEnergy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            float R__t2;
            R__b >> R__t2;
            typedef int Value_t;
            std::pair<Value_t const, float > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<Int_t,Float_t> &R__stl =  fTrackEnergy2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            float R__t2;
            R__b >> R__t2;
            typedef int Value_t;
            std::pair<Value_t const, float > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b.CheckByteCount(R__s, R__c, hcalModuleMC::IsA());
   } else {
      R__c = R__b.WriteVersion(hcalModuleMC::IsA(), kTRUE);
      hcalModule::Streamer(R__b);
      {
         map<Int_t,Float_t> &R__stl =  fTrackEnergy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<Int_t,Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b << ((*R__k).second);
            }
         }
      }
      {
         map<Int_t,Float_t> &R__stl =  fTrackEnergy2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<Int_t,Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b << ((*R__k).second);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcalModuleMC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalModuleMC.
      TClass *R__cl = ::hcalModuleMC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackEnergy", (void*)&fTrackEnergy);
      R__insp.InspectMember("map<Int_t,Float_t>", (void*)&fTrackEnergy, "fTrackEnergy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackEnergy2", (void*)&fTrackEnergy2);
      R__insp.InspectMember("map<Int_t,Float_t>", (void*)&fTrackEnergy2, "fTrackEnergy2.", false);
      hcalModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_hcalModuleMC(void *p) {
      delete ((::hcalModuleMC*)p);
   }
   static void deleteArray_hcalModuleMC(void *p) {
      delete [] ((::hcalModuleMC*)p);
   }
   static void destruct_hcalModuleMC(void *p) {
      typedef ::hcalModuleMC current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcalModuleMC(TBuffer &buf, void *obj) {
      ((::hcalModuleMC*)obj)->::hcalModuleMC::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcalModuleMC

//______________________________________________________________________________
void hcalStructure::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalStructure.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fUseMC;
      R__b >> fX1;
      R__b >> fY1;
      R__b >> fHcalInf;
      {
         vector<hcalModule*> &R__stl =  fStructure;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(hcalModule));
         if (R__tcl1==0) {
            Error("fStructure streamer","Missing the TClass object for hcalModule!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            hcalModule* R__t;
            R__t = (hcalModule*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         list<hcalModule*> &R__stl =  fModules;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(hcalModule));
         if (R__tcl1==0) {
            Error("fModules streamer","Missing the TClass object for hcalModule!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            hcalModule* R__t;
            R__t = (hcalModule*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<hcalModule*> &R__stl =  fHash;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(hcalModule));
         if (R__tcl1==0) {
            Error("fHash streamer","Missing the TClass object for hcalModule!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            hcalModule* R__t;
            R__t = (hcalModule*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, hcalStructure::IsA());
   } else {
      R__c = R__b.WriteVersion(hcalStructure::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fUseMC;
      R__b << fX1;
      R__b << fY1;
      R__b << fHcalInf;
      {
         vector<hcalModule*> &R__stl =  fStructure;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<hcalModule*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         list<hcalModule*> &R__stl =  fModules;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            list<hcalModule*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<hcalModule*> &R__stl =  fHash;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<hcalModule*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcalStructure::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalStructure.
      TClass *R__cl = ::hcalStructure::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseMC", &fUseMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX1", &fX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY1", &fY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHcalInf", &fHcalInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStructure", (void*)&fStructure);
      R__insp.InspectMember("vector<hcalModule*>", (void*)&fStructure, "fStructure.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModules", (void*)&fModules);
      R__insp.InspectMember("list<hcalModule*>", (void*)&fModules, "fModules.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHash", (void*)&fHash);
      R__insp.InspectMember("vector<hcalModule*>", (void*)&fHash, "fHash.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_hcalStructure(void *p) {
      delete ((::hcalStructure*)p);
   }
   static void deleteArray_hcalStructure(void *p) {
      delete [] ((::hcalStructure*)p);
   }
   static void destruct_hcalStructure(void *p) {
      typedef ::hcalStructure current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcalStructure(TBuffer &buf, void *obj) {
      ((::hcalStructure*)obj)->::hcalStructure::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcalStructure

//______________________________________________________________________________
void hcalLightMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalLightMap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, hcalLightMap::IsA());
   } else {
      R__c = R__b.WriteVersion(hcalLightMap::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcalLightMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalLightMap.
      TClass *R__cl = ::hcalLightMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSSide", &fSSide);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fS", &fS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_hcalLightMap(void *p) {
      return  p ? new(p) ::hcalLightMap : new ::hcalLightMap;
   }
   static void *newArray_hcalLightMap(Long_t nElements, void *p) {
      return p ? new(p) ::hcalLightMap[nElements] : new ::hcalLightMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_hcalLightMap(void *p) {
      delete ((::hcalLightMap*)p);
   }
   static void deleteArray_hcalLightMap(void *p) {
      delete [] ((::hcalLightMap*)p);
   }
   static void destruct_hcalLightMap(void *p) {
      typedef ::hcalLightMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcalLightMap(TBuffer &buf, void *obj) {
      ((::hcalLightMap*)obj)->::hcalLightMap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcalLightMap

//______________________________________________________________________________
void hcal::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairDetector::Streamer(R__b);
      R__b >> fSemiX;
      R__b >> fSemiY;
      R__b.CheckByteCount(R__s, R__c, hcal::IsA());
   } else {
      R__c = R__b.WriteVersion(hcal::IsA(), kTRUE);
      FairDetector::Streamer(R__b);
      R__b << fSemiX;
      R__b << fSemiY;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcal.
      TClass *R__cl = ::hcal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInf", &fInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDebug", &fDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackID", &fTrackID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolumeID", &fVolumeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos", &fPos);
      R__insp.InspectMember(fPos, "fPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMom", &fMom);
      R__insp.InspectMember(fMom, "fMom.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fELoss", &fELoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosIndex", &fPosIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHcalCollection", &fHcalCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLiteCollection", &fLiteCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHcalSize[3]", fHcalSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimpleGeo", &fSimpleGeo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFastMC", &fFastMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXSize", &fXSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYSize", &fYSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDX", &fDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDY", &fDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleSize", &fModuleSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZHcal", &fZHcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiX", &fSemiX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSemiY", &fSemiY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsorber", &fAbsorber);
      R__insp.InspectMember(fAbsorber, "fAbsorber.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessAbsorber", &fThicknessAbsorber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessScin", &fThicknessScin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessTyvk", &fThicknessTyvk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessLayer", &fThicknessLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThicknessSteel", &fThicknessSteel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEdging", &fEdging);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHoleRad", &fHoleRad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiberRad", &fFiberRad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXCell", &fXCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYCell", &fYCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNH", &fNH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCF", &fCF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLightMapName", &fLightMapName);
      R__insp.InspectMember(fLightMapName, "fLightMapName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLightMap", &fLightMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLayers", &fNLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLayers1", &fNLayers1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleLength", &fModuleLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolIdMax", &fVolIdMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstNumber", &fFirstNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVolArr[6]", fVolArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fModule", &fModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fScTile", &fScTile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTileEdging", &fTileEdging);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPbTile", &fPbTile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTvTile", &fTvTile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHoleVol[3]", &fHoleVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFiberVol[3]", &fFiberVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSteelTapes[2]", &fSteelTapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHolePos", &fHolePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModules", &fModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawNumber", (void*)&fRawNumber);
      R__insp.InspectMember("list<std::pair<Int_t,TGeoVolume*> >", (void*)&fRawNumber, "fRawNumber.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStructureId", &fStructureId);
      FairDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_hcal(void *p) {
      return  p ? new(p) ::hcal : new ::hcal;
   }
   static void *newArray_hcal(Long_t nElements, void *p) {
      return p ? new(p) ::hcal[nElements] : new ::hcal[nElements];
   }
   // Wrapper around operator delete
   static void delete_hcal(void *p) {
      delete ((::hcal*)p);
   }
   static void deleteArray_hcal(void *p) {
      delete [] ((::hcal*)p);
   }
   static void destruct_hcal(void *p) {
      typedef ::hcal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcal(TBuffer &buf, void *obj) {
      ((::hcal*)obj)->::hcal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcal

//______________________________________________________________________________
void hcalStructureFiller::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalStructureFiller.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fStr;
      R__b >> fInf;
      fListHCALpts->Streamer(R__b);
      R__b >> fInited;
      R__b >> fUseMCPoints;
      R__b >> fStoreTrackInfo;
      fFileGeo.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, hcalStructureFiller::IsA());
   } else {
      R__c = R__b.WriteVersion(hcalStructureFiller::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fStr;
      R__b << fInf;
      fListHCALpts->Streamer(R__b);
      R__b << fInited;
      R__b << fUseMCPoints;
      R__b << fStoreTrackInfo;
      fFileGeo.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcalStructureFiller::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalStructureFiller.
      TClass *R__cl = ::hcalStructureFiller::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInf", &fInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fListHCALpts", &fListHCALpts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInited", &fInited);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseMCPoints", &fUseMCPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreTrackInfo", &fStoreTrackInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileGeo", &fFileGeo);
      R__insp.InspectMember(fFileGeo, "fFileGeo.");
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_hcalStructureFiller(void *p) {
      return  p ? new(p) ::hcalStructureFiller : new ::hcalStructureFiller;
   }
   static void *newArray_hcalStructureFiller(Long_t nElements, void *p) {
      return p ? new(p) ::hcalStructureFiller[nElements] : new ::hcalStructureFiller[nElements];
   }
   // Wrapper around operator delete
   static void delete_hcalStructureFiller(void *p) {
      delete ((::hcalStructureFiller*)p);
   }
   static void deleteArray_hcalStructureFiller(void *p) {
      delete [] ((::hcalStructureFiller*)p);
   }
   static void destruct_hcalStructureFiller(void *p) {
      typedef ::hcalStructureFiller current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcalStructureFiller(TBuffer &buf, void *obj) {
      ((::hcalStructureFiller*)obj)->::hcalStructureFiller::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcalStructureFiller

//______________________________________________________________________________
void hcalAnalysisSimple::Streamer(TBuffer &R__b)
{
   // Stream an object of class hcalAnalysisSimple.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairTask::Streamer(R__b);
      R__b >> fTree;
      R__b >> fX;
      R__b >> fY;
      R__b >> fCX;
      R__b >> fCY;
      R__b >> fP;
      R__b >> fCE;
      R__b >> fCE2;
      R__b >> fOE;
      R__b >> fPX;
      R__b >> fPY;
      R__b >> fPZ;
      R__b >> fEv;
      R__b >> fModuleNum;
      R__b >> fADC;
      R__b >> fStr;
      fTracks->Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, hcalAnalysisSimple::IsA());
   } else {
      R__c = R__b.WriteVersion(hcalAnalysisSimple::IsA(), kTRUE);
      FairTask::Streamer(R__b);
      R__b << fTree;
      R__b << fX;
      R__b << fY;
      R__b << fCX;
      R__b << fCY;
      R__b << fP;
      R__b << fCE;
      R__b << fCE2;
      R__b << fOE;
      R__b << fPX;
      R__b << fPY;
      R__b << fPZ;
      R__b << fEv;
      R__b << fModuleNum;
      R__b << fADC;
      R__b << fStr;
      fTracks->Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void hcalAnalysisSimple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class hcalAnalysisSimple.
      TClass *R__cl = ::hcalAnalysisSimple::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCX", &fCX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCY", &fCY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP", &fP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCE", &fCE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCE2", &fCE2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOE", &fOE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPX", &fPX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPY", &fPY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPZ", &fPZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEv", &fEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModuleNum", &fModuleNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStr", &fStr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTracks", &fTracks);
      FairTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_hcalAnalysisSimple(void *p) {
      return  p ? new(p) ::hcalAnalysisSimple : new ::hcalAnalysisSimple;
   }
   static void *newArray_hcalAnalysisSimple(Long_t nElements, void *p) {
      return p ? new(p) ::hcalAnalysisSimple[nElements] : new ::hcalAnalysisSimple[nElements];
   }
   // Wrapper around operator delete
   static void delete_hcalAnalysisSimple(void *p) {
      delete ((::hcalAnalysisSimple*)p);
   }
   static void deleteArray_hcalAnalysisSimple(void *p) {
      delete [] ((::hcalAnalysisSimple*)p);
   }
   static void destruct_hcalAnalysisSimple(void *p) {
      typedef ::hcalAnalysisSimple current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_hcalAnalysisSimple(TBuffer &buf, void *obj) {
      ((::hcalAnalysisSimple*)obj)->::hcalAnalysisSimple::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::hcalAnalysisSimple

namespace ROOTDict {
   void listlEhcalModulemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void listlEhcalModulemUgR_Dictionary();
   static void *new_listlEhcalModulemUgR(void *p = 0);
   static void *newArray_listlEhcalModulemUgR(Long_t size, void *p);
   static void delete_listlEhcalModulemUgR(void *p);
   static void deleteArray_listlEhcalModulemUgR(void *p);
   static void destruct_listlEhcalModulemUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const list<hcalModule*>*)
   {
      list<hcalModule*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(list<hcalModule*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("list<hcalModule*>", -2, "prec_stl/list", 44,
                  typeid(list<hcalModule*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &listlEhcalModulemUgR_Dictionary, isa_proxy, 0,
                  sizeof(list<hcalModule*>) );
      instance.SetNew(&new_listlEhcalModulemUgR);
      instance.SetNewArray(&newArray_listlEhcalModulemUgR);
      instance.SetDelete(&delete_listlEhcalModulemUgR);
      instance.SetDeleteArray(&deleteArray_listlEhcalModulemUgR);
      instance.SetDestructor(&destruct_listlEhcalModulemUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< list<hcalModule*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const list<hcalModule*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void listlEhcalModulemUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const list<hcalModule*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_listlEhcalModulemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) list<hcalModule*> : new list<hcalModule*>;
   }
   static void *newArray_listlEhcalModulemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) list<hcalModule*>[nElements] : new list<hcalModule*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_listlEhcalModulemUgR(void *p) {
      delete ((list<hcalModule*>*)p);
   }
   static void deleteArray_listlEhcalModulemUgR(void *p) {
      delete [] ((list<hcalModule*>*)p);
   }
   static void destruct_listlEhcalModulemUgR(void *p) {
      typedef list<hcalModule*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class list<hcalModule*>

namespace ROOTDict {
   void maplEintcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOfloatgR_Dictionary();
   static void *new_maplEintcOfloatgR(void *p = 0);
   static void *newArray_maplEintcOfloatgR(Long_t size, void *p);
   static void delete_maplEintcOfloatgR(void *p);
   static void deleteArray_maplEintcOfloatgR(void *p);
   static void destruct_maplEintcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<int,float>*)
   {
      map<int,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,float>", -2, "prec_stl/map", 63,
                  typeid(map<int,float>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEintcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,float>) );
      instance.SetNew(&new_maplEintcOfloatgR);
      instance.SetNewArray(&newArray_maplEintcOfloatgR);
      instance.SetDelete(&delete_maplEintcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOfloatgR);
      instance.SetDestructor(&destruct_maplEintcOfloatgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<int,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOfloatgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<int,float>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEintcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,float> : new map<int,float>;
   }
   static void *newArray_maplEintcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,float>[nElements] : new map<int,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOfloatgR(void *p) {
      delete ((map<int,float>*)p);
   }
   static void deleteArray_maplEintcOfloatgR(void *p) {
      delete [] ((map<int,float>*)p);
   }
   static void destruct_maplEintcOfloatgR(void *p) {
      typedef map<int,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<int,float>

namespace ROOTDict {
   void vectorlEhcalModulemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEhcalModulemUgR_Dictionary();
   static void *new_vectorlEhcalModulemUgR(void *p = 0);
   static void *newArray_vectorlEhcalModulemUgR(Long_t size, void *p);
   static void delete_vectorlEhcalModulemUgR(void *p);
   static void deleteArray_vectorlEhcalModulemUgR(void *p);
   static void destruct_vectorlEhcalModulemUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<hcalModule*>*)
   {
      vector<hcalModule*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<hcalModule*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<hcalModule*>", -2, "prec_stl/vector", 49,
                  typeid(vector<hcalModule*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEhcalModulemUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<hcalModule*>) );
      instance.SetNew(&new_vectorlEhcalModulemUgR);
      instance.SetNewArray(&newArray_vectorlEhcalModulemUgR);
      instance.SetDelete(&delete_vectorlEhcalModulemUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEhcalModulemUgR);
      instance.SetDestructor(&destruct_vectorlEhcalModulemUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<hcalModule*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<hcalModule*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEhcalModulemUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<hcalModule*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEhcalModulemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<hcalModule*> : new vector<hcalModule*>;
   }
   static void *newArray_vectorlEhcalModulemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<hcalModule*>[nElements] : new vector<hcalModule*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEhcalModulemUgR(void *p) {
      delete ((vector<hcalModule*>*)p);
   }
   static void deleteArray_vectorlEhcalModulemUgR(void *p) {
      delete [] ((vector<hcalModule*>*)p);
   }
   static void destruct_vectorlEhcalModulemUgR(void *p) {
      typedef vector<hcalModule*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<hcalModule*>

/********************************************************
* /input/FairShipRun/hcal/G__hcalDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__hcalDict();

extern "C" void G__set_cpp_environmentG__hcalDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("hcalContFact.h");
  G__add_compiledheader("hcalPoint.h");
  G__add_compiledheader("hcal.h");
  G__add_compiledheader("hcalLightMap.h");
  G__add_compiledheader("hcalInf.h");
  G__add_compiledheader("hcalModule.h");
  G__add_compiledheader("hcalModuleMC.h");
  G__add_compiledheader("hcalStructure.h");
  G__add_compiledheader("hcalStructureFiller.h");
  G__add_compiledheader("hcalAnalysisSimple.h");
  G__cpp_reset_tagtableG__hcalDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__hcalDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* hcalContFact */
static int G__G__hcalDict_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalContFact[n];
     } else {
       p = new((void*) gvp) hcalContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalContFact;
     } else {
       p = new((void*) gvp) hcalContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalContFact G__ThcalContFact;
static int G__G__hcalDict_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalContFact*) (soff+(sizeof(hcalContFact)*i)))->~G__ThcalContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalContFact*) (soff))->~G__ThcalContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalPoint */
static int G__G__hcalDict_821_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalPoint[n];
     } else {
       p = new((void*) gvp) hcalPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalPoint;
     } else {
       p = new((void*) gvp) hcalPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TVector3*) G__int(libp->para[2])), *((TVector3*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalPoint* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) hcalPoint(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalPoint*) G__getstructoffset())->GetPdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalPoint*) G__getstructoffset())->PdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalPoint::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalPoint::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalPoint::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalPoint::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalPoint*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalPoint::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalPoint::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalPoint::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_821_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalPoint::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalPoint G__ThcalPoint;
static int G__G__hcalDict_821_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalPoint*) (soff+(sizeof(hcalPoint)*i)))->~G__ThcalPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalPoint*) (soff))->~G__ThcalPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcal */
static int G__G__hcalDict_822_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcal[n];
     } else {
       p = new((void*) gvp) hcal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcal;
     } else {
       p = new((void*) gvp) hcal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcal* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcal(
(const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) hcal(
(const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcal((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) hcal((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const hcal*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((hcal*) G__getstructoffset())->ChangeHit((hcalPoint*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((hcal*) G__getstructoffset())->ChangeHit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) hcal::GetCellCoord((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) hcal::GetCellCoordInf((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_822_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcal G__Thcal;
static int G__G__hcalDict_822_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcal*) (soff+(sizeof(hcal)*i)))->~G__Thcal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcal*) (soff))->~G__Thcal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalInf */
static int G__G__hcalDict_823_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalInf* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     p = 0;
     G__genericerror("Error: Array construction with private/protected destructor is illegal");
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalInf;
     } else {
       p = new((void*) gvp) hcalInf;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalInf::GetInstance((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetXPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetYPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetZPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetModuleSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalInf*) G__getstructoffset())->GetNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalInf*) G__getstructoffset())->GetN1Layers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetAbsorber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetScin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetTyveec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetThicknessLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalInf*) G__getstructoffset())->GetXSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalInf*) G__getstructoffset())->GetYSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetContainerXSemiAxiss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetContainerYSemiAxiss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetElectronCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetHadronCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const hcalInf*) G__getstructoffset())->GetHcalSize((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const hcalInf*) G__getstructoffset())->GetType((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalInf*) G__getstructoffset())->GetFastMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const hcalInf*) G__getstructoffset())->DumpContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalInf*) G__getstructoffset())->FreeInstance();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((hcalInf*) G__getstructoffset())->GetVariable((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((hcalInf*) G__getstructoffset())->GetVariableStrict((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((hcalInf*) G__getstructoffset())->GetStringVariable((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalInf*) G__getstructoffset())->AddVariable((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalInf::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalInf::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalInf::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalInf::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalInf*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalInf::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalInf::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalInf::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_823_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalInf::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalModule */
static int G__G__hcalDict_824_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModule(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) hcalModule(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModule(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) hcalModule(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModule(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) hcalModule(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModule((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) hcalModule((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModule((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) hcalModule((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((hcalModule*) G__getstructoffset())->IsInside((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->X1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->Y1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->X2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->Y2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetCenterX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetCenterY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const hcalModule*) G__getstructoffset())->ADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const hcalModule*) G__getstructoffset())->GetADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalModule*) G__getstructoffset())->GetNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModule*) G__getstructoffset())->GetEnergy2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const hcalModule*) G__getstructoffset())->GetNeighborsList(*(list<hcalModule*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->SetNeighborsList(*(list<hcalModule*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->SetEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->SetEnergy2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->SetADC((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->ResetEnergyFast();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->AddEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->AddEnergy2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->GetClusterEnergy(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->SetCoord((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalModule*) G__getstructoffset())->CountNeighbors(*(list<hcalModule*>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_824_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__hcalDict_824_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   hcalModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new hcalModule(*(hcalModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalModule G__ThcalModule;
static int G__G__hcalDict_824_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalModule*) (soff+(sizeof(hcalModule)*i)))->~G__ThcalModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalModule*) (soff))->~G__ThcalModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__hcalDict_824_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalModule* dest = (hcalModule*) G__getstructoffset();
   *dest = *(hcalModule*) libp->para[0].ref;
   const hcalModule& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalStructure */
static int G__G__hcalDict_829_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalStructure* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new hcalStructure((hcalInf*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) hcalStructure((hcalInf*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((hcalStructure*) G__getstructoffset())->SetUseMC((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((hcalStructure*) G__getstructoffset())->SetUseMC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalStructure*) G__getstructoffset())->GetUseMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalStructure*) G__getstructoffset())->Construct();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalStructure*) G__getstructoffset())->GetNumber((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((hcalStructure*) G__getstructoffset())->AddEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((const hcalStructure*) G__getstructoffset())->GetEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((const hcalStructure*) G__getstructoffset())->GetEnergy((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const hcalStructure*) G__getstructoffset())->GetModule((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalStructure*) G__getstructoffset())->GetModuleNumber((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalStructure*) G__getstructoffset())->GetX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalStructure*) G__getstructoffset())->GetY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalStructure*) G__getstructoffset())->GetX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalStructure*) G__getstructoffset())->GetY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const hcalStructure*) G__getstructoffset())->GetHcalInf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const hcalStructure*) G__getstructoffset())->GetStructure(*(vector<hcalModule*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const hcalStructure*) G__getstructoffset())->GetModules(*(list<hcalModule*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalStructure*) G__getstructoffset())->ResetModules();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((hcalStructure*) G__getstructoffset())->CreateModule((char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const hcalStructure*) G__getstructoffset())->GetHitId((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const hcalStructure*) G__getstructoffset())->GetHitXY((const Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((hcalStructure*) G__getstructoffset())->GetModule((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const hcalStructure*) G__getstructoffset())->GetHitModule((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalStructure::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalStructure::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalStructure::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalStructure::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalStructure*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalStructure::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalStructure::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalStructure::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_829_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalStructure::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalStructure G__ThcalStructure;
static int G__G__hcalDict_829_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalStructure*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalStructure*) (soff+(sizeof(hcalStructure)*i)))->~G__ThcalStructure();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalStructure*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalStructure*) (soff))->~G__ThcalStructure();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalLightMap */
static int G__G__hcalDict_872_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalLightMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalLightMap[n];
     } else {
       p = new((void*) gvp) hcalLightMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalLightMap;
     } else {
       p = new((void*) gvp) hcalLightMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalLightMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalLightMap((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) hcalLightMap((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalLightMap((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) hcalLightMap((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((hcalLightMap*) G__getstructoffset())->Data((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((hcalLightMap*) G__getstructoffset())->GetNum((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalLightMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalLightMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalLightMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalLightMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalLightMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalLightMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalLightMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalLightMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_872_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalLightMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalLightMap G__ThcalLightMap;
static int G__G__hcalDict_872_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalLightMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalLightMap*) (soff+(sizeof(hcalLightMap)*i)))->~G__ThcalLightMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalLightMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalLightMap*) (soff))->~G__ThcalLightMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalModuleMC */
static int G__G__hcalDict_878_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalModuleMC* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModuleMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) hcalModuleMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModuleMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) hcalModuleMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModuleMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) hcalModuleMC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModuleMC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) hcalModuleMC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalModuleMC((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) hcalModuleMC((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModuleMC*) G__getstructoffset())->GetTrackEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const hcalModuleMC*) G__getstructoffset())->GetTrackEnergy2((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModuleMC*) G__getstructoffset())->ResetEnergy();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModuleMC*) G__getstructoffset())->SetTrackEnergy((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModuleMC*) G__getstructoffset())->AddTrackEnergy((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModuleMC*) G__getstructoffset())->SetTrackEnergy2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModuleMC*) G__getstructoffset())->AddTrackEnergy2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((hcalModuleMC*) G__getstructoffset())->GetTrackClusterEnergy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const hcalModuleMC*) G__getstructoffset())->GetTrackEnergyBegin();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const hcalModuleMC*) G__getstructoffset())->GetTrackEnergyEnd();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const hcalModuleMC*) G__getstructoffset())->GetTrackEnergy2Begin();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator* pobj;
         const map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator xobj = ((const hcalModuleMC*) G__getstructoffset())->GetTrackEnergy2End();
         pobj = new map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalModuleMC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalModuleMC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalModuleMC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalModuleMC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalModuleMC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalModuleMC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalModuleMC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalModuleMC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_878_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalModuleMC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__hcalDict_878_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   hcalModuleMC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new hcalModuleMC(*(hcalModuleMC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalModuleMC G__ThcalModuleMC;
static int G__G__hcalDict_878_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalModuleMC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalModuleMC*) (soff+(sizeof(hcalModuleMC)*i)))->~G__ThcalModuleMC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalModuleMC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalModuleMC*) (soff))->~G__ThcalModuleMC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__hcalDict_878_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalModuleMC* dest = (hcalModuleMC*) G__getstructoffset();
   *dest = *(hcalModuleMC*) libp->para[0].ref;
   const hcalModuleMC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalStructureFiller */
static int G__G__hcalDict_888_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalStructureFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalStructureFiller[n];
     } else {
       p = new((void*) gvp) hcalStructureFiller[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalStructureFiller;
     } else {
       p = new((void*) gvp) hcalStructureFiller;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalStructureFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalStructureFiller(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) hcalStructureFiller(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalStructureFiller((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) hcalStructureFiller((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalStructureFiller((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) hcalStructureFiller((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalStructureFiller*) G__getstructoffset())->SetUseMCPoints((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const hcalStructureFiller*) G__getstructoffset())->GetStructure());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((hcalStructureFiller*) G__getstructoffset())->StoreTrackInformation((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((hcalStructureFiller*) G__getstructoffset())->StoreTrackInformation();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const hcalStructureFiller*) G__getstructoffset())->GetStoreTrackInformation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const hcalStructureFiller*) G__getstructoffset())->GetUseMCPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const hcalStructureFiller*) G__getstructoffset())->GetUseSummableHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const hcalStructureFiller*) G__getstructoffset())->GetUseHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalStructureFiller::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalStructureFiller::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalStructureFiller::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalStructureFiller::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalStructureFiller*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalStructureFiller::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalStructureFiller::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalStructureFiller::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_888_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalStructureFiller::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalStructureFiller G__ThcalStructureFiller;
static int G__G__hcalDict_888_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalStructureFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalStructureFiller*) (soff+(sizeof(hcalStructureFiller)*i)))->~G__ThcalStructureFiller();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalStructureFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalStructureFiller*) (soff))->~G__ThcalStructureFiller();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* hcalAnalysisSimple */
static int G__G__hcalDict_889_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalAnalysisSimple* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new hcalAnalysisSimple((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) hcalAnalysisSimple((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   hcalAnalysisSimple* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalAnalysisSimple[n];
     } else {
       p = new((void*) gvp) hcalAnalysisSimple[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new hcalAnalysisSimple;
     } else {
       p = new((void*) gvp) hcalAnalysisSimple;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) hcalAnalysisSimple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalAnalysisSimple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) hcalAnalysisSimple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      hcalAnalysisSimple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((hcalAnalysisSimple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalAnalysisSimple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalAnalysisSimple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) hcalAnalysisSimple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__hcalDict_889_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) hcalAnalysisSimple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef hcalAnalysisSimple G__ThcalAnalysisSimple;
static int G__G__hcalDict_889_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (hcalAnalysisSimple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((hcalAnalysisSimple*) (soff+(sizeof(hcalAnalysisSimple)*i)))->~G__ThcalAnalysisSimple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (hcalAnalysisSimple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((hcalAnalysisSimple*) (soff))->~G__ThcalAnalysisSimple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* hcalContFact */

/* hcalPoint */

/* hcal */

/* hcalInf */

/* hcalModule */

/* hcalStructure */

/* hcalLightMap */

/* hcalModuleMC */

/* hcalStructureFiller */

/* hcalAnalysisSimple */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__hcalDict {
 public:
  G__Sizep2memfuncG__hcalDict(): p(&G__Sizep2memfuncG__hcalDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__hcalDict::*p)();
};

size_t G__get_sizep2memfuncG__hcalDict()
{
  G__Sizep2memfuncG__hcalDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__hcalDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact))) {
     hcalContFact *G__Lderived;
     G__Lderived=(hcalContFact*)0x1000;
     {
       FairContFact *G__Lpbase=(FairContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact),G__get_linked_tagnum(&G__G__hcalDictLN_FairContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint))) {
     hcalPoint *G__Lderived;
     G__Lderived=(hcalPoint*)0x1000;
     {
       FairMCPoint *G__Lpbase=(FairMCPoint*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint),G__get_linked_tagnum(&G__G__hcalDictLN_FairMCPoint),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairMultiLinkedData_Interface *G__Lpbase=(FairMultiLinkedData_Interface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint),G__get_linked_tagnum(&G__G__hcalDictLN_FairMultiLinkedData_Interface),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcal))) {
     hcal *G__Lderived;
     G__Lderived=(hcal*)0x1000;
     {
       FairDetector *G__Lpbase=(FairDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcal),G__get_linked_tagnum(&G__G__hcalDictLN_FairDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcal),G__get_linked_tagnum(&G__G__hcalDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcal),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcal),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf))) {
     hcalInf *G__Lderived;
     G__Lderived=(hcalInf*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule))) {
     hcalModule *G__Lderived;
     G__Lderived=(hcalModule*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure))) {
     hcalStructure *G__Lderived;
     G__Lderived=(hcalStructure*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_FairModule))) {
     FairModule *G__Lderived;
     G__Lderived=(FairModule*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_FairModule),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_FairModule),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_FairDetector))) {
     FairDetector *G__Lderived;
     G__Lderived=(FairDetector*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_FairDetector),G__get_linked_tagnum(&G__G__hcalDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_FairDetector),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_FairDetector),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap))) {
     hcalLightMap *G__Lderived;
     G__Lderived=(hcalLightMap*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC))) {
     hcalModuleMC *G__Lderived;
     G__Lderived=(hcalModuleMC*)0x1000;
     {
       hcalModule *G__Lpbase=(hcalModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC),G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller))) {
     hcalStructureFiller *G__Lderived;
     G__Lderived=(hcalStructureFiller*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller),G__get_linked_tagnum(&G__G__hcalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller),G__get_linked_tagnum(&G__G__hcalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple))) {
     hcalAnalysisSimple *G__Lderived;
     G__Lderived=(hcalAnalysisSimple*)0x1000;
     {
       FairTask *G__Lpbase=(FairTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple),G__get_linked_tagnum(&G__G__hcalDictLN_FairTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple),G__get_linked_tagnum(&G__G__hcalDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple),G__get_linked_tagnum(&G__G__hcalDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple),G__get_linked_tagnum(&G__G__hcalDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__hcalDict() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Double32_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes in memory, written as a 4 bytes float",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<FairLink>",117,G__get_linked_tagnum(&G__G__hcalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<FairLink,less<FairLink> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TString>",117,G__get_linked_tagnum(&G__G__hcalDictLN_listlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TChain*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TChain*,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::list<TString>*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,list<TString,allocator<TString> >*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,list<TString,allocator<TString> >*,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<TString,TArrayI>",117,G__get_linked_tagnum(&G__G__hcalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<TString,TArrayI,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::multimap<TString,TArrayI> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > > >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<TClonesArray*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("queue<TClonesArray*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,std::queue<TClonesArray*> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > > >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TClonesArray*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TClonesArray*,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairTSBufferFunctional*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairTSBufferFunctional*,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairWriteoutBuffer*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,FairWriteoutBuffer*,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TBranch*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TBranch*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TBranch*,less<int> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Int_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int,less<TString> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,FairFileSource*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,FairFileSource*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,FairFileSource*,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,Double_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,double>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,double,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<UInt_t,UInt_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,unsigned int,less<unsigned int> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<hcalModule*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_listlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<hcalModule*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__hcalDictLN_reverse_iteratorlEvectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,TGeoVolume*>",117,G__get_linked_tagnum(&G__G__hcalDictLN_pairlEintcOTGeoVolumemUgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::pair<Int_t,TGeoVolume*> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<pair<Int_t,TGeoVolume*> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<pair<int,TGeoVolume*> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Float_t>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,float>",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,float,less<int> >",117,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* hcalContFact */
static void G__setup_memvarhcalContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact));
   { hcalContFact *p; p=(hcalContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalPoint */
static void G__setup_memvarhcalPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint));
   { hcalPoint *p; p=(hcalPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPdgCode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcal */
static void G__setup_memvarhcal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcal));
   { hcal *p; p=(hcal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf),-1,-1,4,"fInf=",0,"!");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Option_t"),-1,4,"fDebug=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackID=",0,"!  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolumeID=",0,"!  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TLorentzVector),-1,-1,4,"fPos=",0,"!  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TLorentzVector),-1,-1,4,"fMom=",0,"!  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fLength=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double32_t"),-1,4,"fELoss=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPosIndex=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClonesArray),-1,-1,4,"fHcalCollection=",0,"! ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClonesArray),-1,-1,4,"fLiteCollection=",0,"! ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHcalSize[3]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSimpleGeo=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFastMC=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fXSize=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fYSize=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDX=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDY=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fModuleSize=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZHcal=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSemiX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSemiY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TString),-1,-1,4,"fAbsorber=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessAbsorber=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessScin=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessTyvk=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessLayer=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThicknessSteel=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEdging=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHoleRad=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFiberRad=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXCell=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYCell=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNH=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCF=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TString),-1,-1,4,"fLightMapName=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap),-1,-1,4,"fLightMap=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNLayers=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNLayers1=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fModuleLength=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolIdMax=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFirstNumber=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVolArr[6]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fModule=",0,"! Calorimeter Modules");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fScTile=",0,"! Pb tiles ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fTileEdging=",0,"! Edging of scintillator tiles ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fPbTile=",0,"! Scintillator tiles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fTvTile=",0,"! Tyvek sheets");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fHoleVol[3]=",0,"! Hole volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fFiberVol[3]=",0,"! Fiber volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume),-1,-1,4,"fSteelTapes[2]=",0,"! Steel tapes");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__G__hcalDictLN_TGeoTranslation),-1,-1,4,"fHolePos=",0,"! Positions of holes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fModules=",0,"! Number of mudules");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR),G__defined_typename("list<std::pair<Int_t,TGeoVolume*> >"),-1,4,"fRawNumber=",0,"! List of constructed raws");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStructureId=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalInf */
static void G__setup_memvarhcalInf(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf));
   { hcalInf *p; p=(hcalInf*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf),-1,-2,2,"fInf=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fRefCount=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TMap),-1,-1,4,"fVariables=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TObjArray),-1,-1,4,"fHcalStr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNLayers=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fN1Layers=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fXSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fYSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fModuleSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAbsorber=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTyveec=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fThicknessLayer=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCellSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHcalSize[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fECut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSemiX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSemiY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFastMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSuccess=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TString),-1,-1,4,"fFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalModule */
static void G__setup_memvarhcalModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule));
   { hcalModule *p; p=(hcalModule*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEnergy2=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_listlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR),G__defined_typename("list<hcalModule*>"),-1,4,"fNeighbors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalStructure */
static void G__setup_memvarhcalStructure(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure));
   { hcalStructure *p; p=(hcalStructure*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUseMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf),-1,-1,4,"fHcalInf=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR),G__defined_typename("vector<hcalModule*>"),-1,4,"fStructure=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_listlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR),G__defined_typename("list<hcalModule*>"),-1,4,"fModules=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR),G__defined_typename("vector<hcalModule*>"),-1,4,"fHash=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalLightMap */
static void G__setup_memvarhcalLightMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap));
   { hcalLightMap *p; p=(hcalLightMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSSide=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fS=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSize=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fData=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalModuleMC */
static void G__setup_memvarhcalModuleMC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC));
   { hcalModuleMC *p; p=(hcalModuleMC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),G__defined_typename("map<Int_t,Float_t>"),-1,4,"fTrackEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR),G__defined_typename("map<Int_t,Float_t>"),-1,4,"fTrackEnergy2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalStructureFiller */
static void G__setup_memvarhcalStructureFiller(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller));
   { hcalStructureFiller *p; p=(hcalStructureFiller*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure),-1,-1,4,"fStr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf),-1,-1,4,"fInf=",0,"HCAL geometry container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClonesArray),-1,-1,4,"fListHCALpts=",0,"HCAL MC points");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvent=",0,"! Internal event counter");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInited=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseMCPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStoreTrackInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TString),-1,-1,4,"fFileGeo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* hcalAnalysisSimple */
static void G__setup_memvarhcalAnalysisSimple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple));
   { hcalAnalysisSimple *p; p=(hcalAnalysisSimple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TTree),-1,-1,4,"fTree=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fP=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCE2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEv=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fModuleNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fADC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure),-1,-1,4,"fStr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClonesArray),-1,-1,4,"fTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__hcalDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__hcalDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunchcalContFact(void) {
   /* hcalContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalContFact",1194,G__G__hcalDict_197_0_2, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_FairParSet), -1, 0, 1, 1, 1, 0, "U 'FairContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__hcalDict_197_0_4, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_197_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_197_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_197_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_197_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_197_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_197_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_197_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_197_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalContFact::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~hcalContFact", 1320, G__G__hcalDict_197_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalPoint(void) {
   /* hcalPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint));
   G__memfunc_setup("hcalPoint",930,G__G__hcalDict_821_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalPoint",930,G__G__hcalDict_821_0_2, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"u 'TVector3' - 0 - pos u 'TVector3' - 0 - mom "
"d - 'Double_t' 0 - tof d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - eLoss i - 'Int_t' 0 '0' pdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalPoint",930,G__G__hcalDict_821_0_3, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"d - 'Double32_t' 0 - tof d - 'Double32_t' 0 - eloss "
"h - 'UInt_t' 0 '0' EventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdgCode",950,G__G__hcalDict_821_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PdgCode",662,G__G__hcalDict_821_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hcalPoint",930,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 1, 1, 4, 0, "u 'hcalPoint' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 1, 1, 4, 0, "u 'hcalPoint' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_821_0_9, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalPoint::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_821_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalPoint::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_821_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalPoint::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_821_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalPoint::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_821_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_821_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalPoint::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_821_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalPoint::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_821_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalPoint::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_821_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalPoint::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~hcalPoint", 1056, G__G__hcalDict_821_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcal(void) {
   /* hcal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcal));
   G__memfunc_setup("hcal",408,G__G__hcalDict_822_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcal",408,G__G__hcalDict_822_0_2, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcal), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name g - 'Bool_t' 0 - active "
"C - - 10 '\"hcal.geo\"' fileGeo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessHits",1143,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairVolume' - 0 'NULL' vol", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndOfEvent",974,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginEvent",999,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__hcalDict_822_0_8, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CopyClones",1023,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TClonesArray' - 0 - cl1 U 'TClonesArray' - 0 - cl2 "
"i - 'Int_t' 0 - offset", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Register",837,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChangeHit",875,G__G__hcalDict_822_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'hcalPoint' - 0 'NULL' oldHit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishPrimary",1349,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCollection",1324,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClonesArray), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - iColl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSpecialPhysicsCuts",2159,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCellCoord",1175,G__G__hcalDict_822_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - fVolumeID f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y i - 'Int_t' 1 - section", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Float_t&, Float_t&, Int_t&))(&hcal::GetCellCoord) ), 0);
   G__memfunc_setup("GetCellCoordInf",1460,G__G__hcalDict_822_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - fVolumeID f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y i - 'Int_t' 1 - section", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Float_t&, Float_t&, Int_t&))(&hcal::GetCellCoordInf) ), 0);
   G__memfunc_setup("AddHit",558,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 8, 1, 2, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"u 'TVector3' - 0 - pos u 'TVector3' - 0 - mom "
"d - 'Double_t' 0 - time d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - eLoss i - 'Int_t' 0 - pdgcode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLiteHit",956,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 - detID "
"d - 'Double32_t' 0 - time d - 'Double32_t' 0 - eLoss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillLitePoint",1311,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - volnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillWallPoint",1313,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetParameters",1559,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHcalCuts",1091,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - medium", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindHit",678,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalPoint), -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - VolId i - 'Int_t' 0 - TrackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVolType",1011,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - volnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructRaw",1263,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TGeoVolume), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructModule",1579,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructTile",1363,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - material", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructModuleSimple",2197,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructTileSimple",1981,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - material", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMedium",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMedia",884,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcal",408,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcal), -1, 0, 1, 1, 4, 0, "u 'hcal' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__hcalDictLN_hcal), -1, 1, 1, 1, 4, 0, "u 'hcal' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_822_0_35, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_822_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_822_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_822_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_822_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_822_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_822_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_822_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_822_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcal::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~hcal", 534, G__G__hcalDict_822_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalInf(void) {
   /* hcalInf */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf));
   G__memfunc_setup("hcalInf",693,G__G__hcalDict_823_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInstance",1109,G__G__hcalDict_823_0_2, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf), -1, 0, 1, 3, 1, 0, "C - - 10 - filename", (char*)NULL, (void*) G__func2void( (hcalInf* (*)(const char*))(&hcalInf::GetInstance) ), 0);
   G__memfunc_setup("GetXPos",682,G__G__hcalDict_823_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYPos",683,G__G__hcalDict_823_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZPos",684,G__G__hcalDict_823_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModuleSize",1313,G__G__hcalDict_823_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLayers",990,G__G__hcalDict_823_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN1Layers",1039,G__G__hcalDict_823_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsorber",1104,G__G__hcalDict_823_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScin",685,G__G__hcalDict_823_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTyveec",912,G__G__hcalDict_823_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThicknessLayer",1737,G__G__hcalDict_823_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXSize",787,G__G__hcalDict_823_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYSize",788,G__G__hcalDict_823_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainerXSemiAxiss",2225,G__G__hcalDict_823_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetContainerYSemiAxiss",2226,G__G__hcalDict_823_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElectronCut",1416,G__G__hcalDict_823_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHadronCut",1192,G__G__hcalDict_823_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHcalSize",1075,G__G__hcalDict_823_0_19, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__hcalDict_823_0_20, 99, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", "returns type of (X,Y) supercell", (void*) NULL, 0);
   G__memfunc_setup("GetFastMC",830,G__G__hcalDict_823_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpContainer",1337,G__G__hcalDict_823_0_22, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeInstance",1207,G__G__hcalDict_823_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariable",1094,G__G__hcalDict_823_0_24, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariableStrict",1727,G__G__hcalDict_823_0_25, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStringVariable",1725,G__G__hcalDict_823_0_26, 117, G__get_linked_tagnum(&G__G__hcalDictLN_TString), -1, 0, 1, 1, 1, 0, "C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddVariable",1071,G__G__hcalDict_823_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - key C - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalInf",693,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf), -1, 0, 1, 1, 2, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateHoleSize",1713,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitVariables",1325,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExcludeParameter",1643,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 0 - parname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalInf",693,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf), -1, 0, 1, 1, 4, 0, "u 'hcalInf' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf), -1, 1, 1, 1, 4, 0, "u 'hcalInf' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_823_0_34, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalInf::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_823_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalInf::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_823_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalInf::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_823_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalInf::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_823_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_823_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalInf::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_823_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalInf::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_823_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalInf::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_823_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalInf::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalModule(void) {
   /* hcalModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule));
   G__memfunc_setup("hcalModule",1022,G__G__hcalDict_824_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - modulenumber f - 'Float_t' 0 '0' x1 "
"f - 'Float_t' 0 '0' y1 f - 'Float_t' 0 '0' x2 "
"f - 'Float_t' 0 '0' y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__G__hcalDict_824_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X1",137,G__G__hcalDict_824_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y1",138,G__G__hcalDict_824_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X2",138,G__G__hcalDict_824_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y2",139,G__G__hcalDict_824_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX1",425,G__G__hcalDict_824_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY1",426,G__G__hcalDict_824_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX2",426,G__G__hcalDict_824_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY2",427,G__G__hcalDict_824_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCenterX",985,G__G__hcalDict_824_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCenterY",986,G__G__hcalDict_824_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ADC",200,G__G__hcalDict_824_0_13, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetADC",488,G__G__hcalDict_824_0_14, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__G__hcalDict_824_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__G__hcalDict_824_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy2",956,G__G__hcalDict_824_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighborsList",1629,G__G__hcalDict_824_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "u 'list<hcalModule*,allocator<hcalModule*> >' 'list<hcalModule*>' 1 - neib", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeighborsList",1641,G__G__hcalDict_824_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<hcalModule*,allocator<hcalModule*> >' 'list<hcalModule*>' 1 - neib", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergy",918,G__G__hcalDict_824_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergy2",968,G__G__hcalDict_824_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetADC",500,G__G__hcalDict_824_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetEnergyFast",1531,G__G__hcalDict_824_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergy",883,G__G__hcalDict_824_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergy2",933,G__G__hcalDict_824_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusterEnergy",1644,G__G__hcalDict_824_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 1 - EcalEnergy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoord",803,G__G__hcalDict_824_0_27, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1 "
"f - 'Float_t' 0 - x2 f - 'Float_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CountNeighbors",1450,G__G__hcalDict_824_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'list<hcalModule*,allocator<hcalModule*> >' 'list<hcalModule*>' 11 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_824_0_29, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_824_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_824_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_824_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_824_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_824_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_824_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_824_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_824_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("hcalModule", 1022, G__G__hcalDict_824_0_41, (int) ('i'), G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule), -1, 0, 1, 1, 1, 0, "u 'hcalModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~hcalModule", 1148, G__G__hcalDict_824_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__hcalDict_824_0_43, (int) ('u'), G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule), -1, 1, 1, 1, 1, 0, "u 'hcalModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalStructure(void) {
   /* hcalStructure */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure));
   G__memfunc_setup("hcalStructure",1385,G__G__hcalDict_829_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure), -1, 0, 1, 1, 1, 0, "U 'hcalInf' - 0 - hcalinf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseMC",745,G__G__hcalDict_829_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' mc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseMC",733,G__G__hcalDict_829_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Construct",965,G__G__hcalDict_829_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__G__hcalDict_829_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergy",883,G__G__hcalDict_829_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - energy f - 'Float_t' 0 - energy2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__G__hcalDict_829_0_7, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"i - 'Int_t' 0 '0' section", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModule",902,G__G__hcalDict_829_0_8, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule), -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModuleNumber",1519,G__G__hcalDict_829_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX1",425,G__G__hcalDict_829_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY1",426,G__G__hcalDict_829_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX2",426,G__G__hcalDict_829_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY2",427,G__G__hcalDict_829_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHcalInf",949,G__G__hcalDict_829_0_14, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalInf), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructure",1265,G__G__hcalDict_829_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "u 'vector<hcalModule*,allocator<hcalModule*> >' 'vector<hcalModule*>' 1 - stru", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModules",1017,G__G__hcalDict_829_0_16, 121, -1, -1, 0, 1, 1, 1, 8, "u 'list<hcalModule*,allocator<hcalModule*> >' 'list<hcalModule*>' 1 - mdls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetModules",1244,G__G__hcalDict_829_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateModule",1210,G__G__hcalDict_829_0_18, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule), -1, 0, 6, 1, 1, 0, 
"c - - 0 - type i - 'Int_t' 0 - number "
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1 "
"f - 'Float_t' 0 - x2 f - 'Float_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitId",754,G__G__hcalDict_829_0_19, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitXY",758,G__G__hcalDict_829_0_20, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 10 - hitId f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModule",902,G__G__hcalDict_829_0_21, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - fVolId i - 'Int_t' 1 - section", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitModule",1195,G__G__hcalDict_829_0_22, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalModule), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 10 - hitId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNum",592,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Serialize",936,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalStructure",1385,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure), -1, 0, 1, 1, 4, 0, "u 'hcalStructure' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure), -1, 1, 1, 1, 4, 0, "u 'hcalStructure' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_829_0_27, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalStructure::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_829_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalStructure::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_829_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalStructure::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_829_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalStructure::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_829_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_829_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalStructure::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_829_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalStructure::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_829_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalStructure::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_829_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalStructure::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~hcalStructure", 1511, G__G__hcalDict_829_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalLightMap(void) {
   /* hcalLightMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap));
   G__memfunc_setup("hcalLightMap",1198,G__G__hcalDict_872_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalLightMap",1198,G__G__hcalDict_872_0_2, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap), -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 '\"Light collection efficiency map\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Data",378,G__G__hcalDict_872_0_3, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNum",592,G__G__hcalDict_872_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillGaps",786,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Normalize",945,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalLightMap",1198,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap), -1, 0, 1, 1, 4, 0, "u 'hcalLightMap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__hcalDictLN_hcalLightMap), -1, 1, 1, 1, 4, 0, "u 'hcalLightMap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_872_0_10, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalLightMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_872_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalLightMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_872_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalLightMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_872_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalLightMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_872_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_872_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalLightMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_872_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalLightMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_872_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalLightMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_872_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalLightMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~hcalLightMap", 1324, G__G__hcalDict_872_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalModuleMC(void) {
   /* hcalModuleMC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC));
   G__memfunc_setup("hcalModuleMC",1166,G__G__hcalDict_878_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - number f - 'Float_t' 0 '0' x1 "
"f - 'Float_t' 0 '0' y1 f - 'Float_t' 0 '0' x2 "
"f - 'Float_t' 0 '0' y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergy",1407,G__G__hcalDict_878_0_2, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergy2",1457,G__G__hcalDict_878_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetEnergy",1133,G__G__hcalDict_878_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackEnergy",1419,G__G__hcalDict_878_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - num f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrackEnergy",1384,G__G__hcalDict_878_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - num f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackEnergy2",1469,G__G__hcalDict_878_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - num f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrackEnergy2",1434,G__G__hcalDict_878_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - num f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackClusterEnergy",2145,G__G__hcalDict_878_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergyBegin",1892,G__G__hcalDict_878_0_10, 117, G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergyEnd",1686,G__G__hcalDict_878_0_11, 117, G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergy2Begin",1942,G__G__hcalDict_878_0_12, 117, G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackEnergy2End",1736,G__G__hcalDict_878_0_13, 117, G__get_linked_tagnum(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator), G__defined_typename("map<int,float,less<int>,allocator<pair<const int,float> > >::const_iterator"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_878_0_14, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalModuleMC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_878_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalModuleMC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_878_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalModuleMC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_878_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalModuleMC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_878_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_878_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalModuleMC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_878_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalModuleMC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_878_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalModuleMC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_878_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalModuleMC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("hcalModuleMC", 1166, G__G__hcalDict_878_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC), -1, 0, 1, 1, 1, 0, "u 'hcalModuleMC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~hcalModuleMC", 1292, G__G__hcalDict_878_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__hcalDict_878_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__hcalDictLN_hcalModuleMC), -1, 1, 1, 1, 1, 0, "u 'hcalModuleMC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalStructureFiller(void) {
   /* hcalStructureFiller */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller));
   G__memfunc_setup("hcalStructureFiller",1991,G__G__hcalDict_888_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalStructureFiller",1991,G__G__hcalDict_888_0_2, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 '1' iVerbose "
"C - - 10 '\"hcal.geo\"' fileGeo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__hcalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUseMCPoints",1382,G__G__hcalDict_888_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - UseMCPoints", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructure",1265,G__G__hcalDict_888_0_7, 85, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructure), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreTrackInformation",2184,G__G__hcalDict_888_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' storetrackinfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStoreTrackInformation",2472,G__G__hcalDict_888_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseMCPoints",1370,G__G__hcalDict_888_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseSummableHits",1819,G__G__hcalDict_888_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseHits",997,G__G__hcalDict_888_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParContainers",1637,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoopForMCPoints",1486,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalStructureFiller",1991,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller), -1, 0, 1, 1, 4, 0, "u 'hcalStructureFiller' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__hcalDictLN_hcalStructureFiller), -1, 1, 1, 1, 4, 0, "u 'hcalStructureFiller' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_888_0_17, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalStructureFiller::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_888_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalStructureFiller::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_888_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalStructureFiller::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_888_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalStructureFiller::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_888_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_888_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalStructureFiller::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_888_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalStructureFiller::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_888_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalStructureFiller::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_888_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalStructureFiller::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~hcalStructureFiller", 2117, G__G__hcalDict_888_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchcalAnalysisSimple(void) {
   /* hcalAnalysisSimple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple));
   G__memfunc_setup("hcalAnalysisSimple",1862,G__G__hcalDict_889_0_1, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 - iVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalAnalysisSimple",1862,G__G__hcalDict_889_0_2, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__G__hcalDictLN_InitStatus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Exec",389,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitTree",804,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hcalAnalysisSimple",1862,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple), -1, 0, 1, 1, 4, 0, "u 'hcalAnalysisSimple' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__hcalDictLN_hcalAnalysisSimple), -1, 0, 1, 1, 4, 0, "u 'hcalAnalysisSimple' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__hcalDict_889_0_9, 85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&hcalAnalysisSimple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__hcalDict_889_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalAnalysisSimple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__hcalDict_889_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&hcalAnalysisSimple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__hcalDict_889_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&hcalAnalysisSimple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__hcalDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__hcalDict_889_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__hcalDict_889_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalAnalysisSimple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__hcalDict_889_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalAnalysisSimple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__hcalDict_889_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&hcalAnalysisSimple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__hcalDict_889_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&hcalAnalysisSimple::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~hcalAnalysisSimple", 1988, G__G__hcalDict_889_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__hcalDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__hcalDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__hcalDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__hcalDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairParSet = { "FairParSet" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairContainer = { "FairContainer" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairContFact = { "FairContFact" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalContFact = { "hcalContFact" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR = { "set<FairLink,less<FairLink>,allocator<FairLink> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMap = { "TMap" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_listlETStringcOallocatorlETStringgRsPgR = { "list<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR = { "map<TString,TChain*,less<TString>,allocator<pair<const TString,TChain*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR = { "map<TString,list<TString,allocator<TString> >*,less<TString>,allocator<pair<const TString,list<TString,allocator<TString> >*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR = { "multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR = { "map<TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >,less<TString>,allocator<pair<const TString,multimap<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > > > > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR = { "map<TString,TObject*,less<TString>,allocator<pair<const TString,TObject*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR = { "deque<TClonesArray*,allocator<TClonesArray*> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR = { "queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR = { "map<TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > >,less<TString>,allocator<pair<const TString,queue<TClonesArray*,deque<TClonesArray*,allocator<TClonesArray*> > > > > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR = { "map<TString,TClonesArray*,less<TString>,allocator<pair<const TString,TClonesArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR = { "map<TString,FairTSBufferFunctional*,less<TString>,allocator<pair<const TString,FairTSBufferFunctional*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR = { "map<TString,FairWriteoutBuffer*,less<TString>,allocator<pair<const TString,FairWriteoutBuffer*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR = { "map<int,TBranch*,less<int>,allocator<pair<const int,TBranch*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR = { "map<TString,int,less<TString>,allocator<pair<const TString,int> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR = { "map<unsigned int,FairFileSource*,less<unsigned int>,allocator<pair<const unsigned int,FairFileSource*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR = { "map<unsigned int,double,less<unsigned int>,allocator<pair<const unsigned int,double> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR = { "map<unsigned int,unsigned int,less<unsigned int>,allocator<pair<const unsigned int,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairMultiLinkedData_Interface = { "FairMultiLinkedData_Interface" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairMCPoint = { "FairMCPoint" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalPoint = { "hcalPoint" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcal = { "hcal" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalInf = { "hcalInf" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalModule = { "hcalModule" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_listlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR = { "list<hcalModule*,allocator<hcalModule*> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalStructure = { "hcalStructure" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR = { "vector<hcalModule*,allocator<hcalModule*> >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_reverse_iteratorlEvectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<hcalModule*,allocator<hcalModule*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairTask = { "FairTask" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairVolume = { "FairVolume" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairModule = { "FairModule" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_FairDetector = { "FairDetector" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TGeoTranslation = { "TGeoTranslation" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalLightMap = { "hcalLightMap" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_pairlEintcOTGeoVolumemUgR = { "pair<int,TGeoVolume*>" , 115 , -1 };
G__linked_taginfo G__G__hcalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR = { "list<pair<int,TGeoVolume*>,allocator<pair<int,TGeoVolume*> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalModuleMC = { "hcalModuleMC" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR = { "map<int,float,less<int>,allocator<pair<const int,float> > >" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator = { "map<int,float,less<int>,allocator<pair<const int,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_InitStatus = { "InitStatus" , 101 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalStructureFiller = { "hcalStructureFiller" , 99 , -1 };
G__linked_taginfo G__G__hcalDictLN_hcalAnalysisSimple = { "hcalAnalysisSimple" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__hcalDict() {
  G__G__hcalDictLN_TClass.tagnum = -1 ;
  G__G__hcalDictLN_TBuffer.tagnum = -1 ;
  G__G__hcalDictLN_TMemberInspector.tagnum = -1 ;
  G__G__hcalDictLN_TObject.tagnum = -1 ;
  G__G__hcalDictLN_TNamed.tagnum = -1 ;
  G__G__hcalDictLN_TString.tagnum = -1 ;
  G__G__hcalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__hcalDictLN_TObjArray.tagnum = -1 ;
  G__G__hcalDictLN_TClonesArray.tagnum = -1 ;
  G__G__hcalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__hcalDictLN_FairParSet.tagnum = -1 ;
  G__G__hcalDictLN_FairContainer.tagnum = -1 ;
  G__G__hcalDictLN_FairContFact.tagnum = -1 ;
  G__G__hcalDictLN_hcalContFact.tagnum = -1 ;
  G__G__hcalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__hcalDictLN_TTree.tagnum = -1 ;
  G__G__hcalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_TMap.tagnum = -1 ;
  G__G__hcalDictLN_listlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_FairMultiLinkedData_Interface.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__hcalDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__hcalDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__hcalDictLN_TVector3.tagnum = -1 ;
  G__G__hcalDictLN_FairMCPoint.tagnum = -1 ;
  G__G__hcalDictLN_hcalPoint.tagnum = -1 ;
  G__G__hcalDictLN_hcal.tagnum = -1 ;
  G__G__hcalDictLN_hcalInf.tagnum = -1 ;
  G__G__hcalDictLN_hcalModule.tagnum = -1 ;
  G__G__hcalDictLN_listlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_hcalStructure.tagnum = -1 ;
  G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_reverse_iteratorlEvectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__hcalDictLN_TGeoVolume.tagnum = -1 ;
  G__G__hcalDictLN_FairTask.tagnum = -1 ;
  G__G__hcalDictLN_FairVolume.tagnum = -1 ;
  G__G__hcalDictLN_FairModule.tagnum = -1 ;
  G__G__hcalDictLN_FairDetector.tagnum = -1 ;
  G__G__hcalDictLN_TLorentzVector.tagnum = -1 ;
  G__G__hcalDictLN_TGeoTranslation.tagnum = -1 ;
  G__G__hcalDictLN_hcalLightMap.tagnum = -1 ;
  G__G__hcalDictLN_pairlEintcOTGeoVolumemUgR.tagnum = -1 ;
  G__G__hcalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_hcalModuleMC.tagnum = -1 ;
  G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__G__hcalDictLN_TTask.tagnum = -1 ;
  G__G__hcalDictLN_InitStatus.tagnum = -1 ;
  G__G__hcalDictLN_hcalStructureFiller.tagnum = -1 ;
  G__G__hcalDictLN_hcalAnalysisSimple.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__hcalDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairParSet);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairContainer);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalContFact),sizeof(hcalContFact),-1,62720,"Factory for all hcal parameter containers",G__setup_memvarhcalContFact,G__setup_memfunchcalContFact);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_setlEFairLinkcOlesslEFairLinkgRcOallocatorlEFairLinkgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMap);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_listlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOTChainmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTChainmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOlistlETStringcOallocatorlETStringgRsPgRmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOlistlETStringcOallocatorlETStringgRsPgRmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_multimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOmultimaplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_dequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_queuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOqueuelETClonesArraymUcOdequelETClonesArraymUcOallocatorlETClonesArraymUgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOTClonesArraymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTClonesArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOFairTSBufferFunctionalmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairTSBufferFunctionalmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOFairWriteoutBuffermUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOFairWriteoutBuffermUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplEintcOTBranchmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTBranchmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplEunsignedsPintcOFairFileSourcemUcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOFairFileSourcemUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplEunsignedsPintcOdoublecOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplEunsignedsPintcOunsignedsPintcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairMultiLinkedData_Interface);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairMCPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalPoint),sizeof(hcalPoint),-1,327424,(char*)NULL,G__setup_memvarhcalPoint,G__setup_memfunchcalPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcal),sizeof(hcal),-1,65280,(char*)NULL,G__setup_memvarhcal,G__setup_memfunchcal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalInf),sizeof(hcalInf),-1,327424,(char*)NULL,G__setup_memvarhcalInf,G__setup_memfunchcalInf);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalModule),sizeof(hcalModule),-1,61440,(char*)NULL,G__setup_memvarhcalModule,G__setup_memfunchcalModule);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_listlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalStructure),sizeof(hcalStructure),-1,64000,(char*)NULL,G__setup_memvarhcalStructure,G__setup_memfunchcalStructure);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_vectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_reverse_iteratorlEvectorlEhcalModulemUcOallocatorlEhcalModulemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairTask);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairVolume);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairModule);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_FairDetector);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TLorentzVector);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TGeoTranslation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalLightMap),sizeof(hcalLightMap),-1,65280,(char*)NULL,G__setup_memvarhcalLightMap,G__setup_memfunchcalLightMap);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_pairlEintcOTGeoVolumemUgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_listlEpairlEintcOTGeoVolumemUgRcOallocatorlEpairlEintcOTGeoVolumemUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalModuleMC),sizeof(hcalModuleMC),-1,61440,(char*)NULL,G__setup_memvarhcalModuleMC,G__setup_memfunchcalModuleMC);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_maplEintcOfloatcOlesslEintgRcOallocatorlEpairlEconstsPintcOfloatgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_TTask);
   G__get_linked_tagnum_fwd(&G__G__hcalDictLN_InitStatus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalStructureFiller),sizeof(hcalStructureFiller),-1,65280,(char*)NULL,G__setup_memvarhcalStructureFiller,G__setup_memfunchcalStructureFiller);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__hcalDictLN_hcalAnalysisSimple),sizeof(hcalAnalysisSimple),-1,65280,(char*)NULL,G__setup_memvarhcalAnalysisSimple,G__setup_memfunchcalAnalysisSimple);
}
extern "C" void G__cpp_setupG__hcalDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__hcalDict()");
  G__set_cpp_environmentG__hcalDict();
  G__cpp_setup_tagtableG__hcalDict();

  G__cpp_setup_inheritanceG__hcalDict();

  G__cpp_setup_typetableG__hcalDict();

  G__cpp_setup_memvarG__hcalDict();

  G__cpp_setup_memfuncG__hcalDict();
  G__cpp_setup_globalG__hcalDict();
  G__cpp_setup_funcG__hcalDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__hcalDict();
  return;
}
class G__cpp_setup_initG__hcalDict {
  public:
    G__cpp_setup_initG__hcalDict() { G__add_setup_func("G__hcalDict",(G__incsetup)(&G__cpp_setupG__hcalDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__hcalDict() { G__remove_setup_func("G__hcalDict"); }
};
G__cpp_setup_initG__hcalDict G__cpp_setup_initializerG__hcalDict;

