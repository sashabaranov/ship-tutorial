//
// File generated by /opt/ocean/FairSoftInst/bin/rootcint at Thu Oct  8 06:24:39 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIinputdIFairShipRundIpassivedIG__PassiveDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__PassiveDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void ShipCave_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipCave(void *p = 0);
   static void *newArray_ShipCave(Long_t size, void *p);
   static void delete_ShipCave(void *p);
   static void deleteArray_ShipCave(void *p);
   static void destruct_ShipCave(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipCave*)
   {
      ::ShipCave *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipCave >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipCave", ::ShipCave::Class_Version(), "/input/FairShip/passive/ShipCave.h", 9,
                  typeid(::ShipCave), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipCave::Dictionary, isa_proxy, 4,
                  sizeof(::ShipCave) );
      instance.SetNew(&new_ShipCave);
      instance.SetNewArray(&newArray_ShipCave);
      instance.SetDelete(&delete_ShipCave);
      instance.SetDeleteArray(&deleteArray_ShipCave);
      instance.SetDestructor(&destruct_ShipCave);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipCave*)
   {
      return GenerateInitInstanceLocal((::ShipCave*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipCave*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipGeoCave_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipGeoCave(void *p = 0);
   static void *newArray_ShipGeoCave(Long_t size, void *p);
   static void delete_ShipGeoCave(void *p);
   static void deleteArray_ShipGeoCave(void *p);
   static void destruct_ShipGeoCave(void *p);
   static void streamer_ShipGeoCave(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipGeoCave*)
   {
      ::ShipGeoCave *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipGeoCave >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipGeoCave", ::ShipGeoCave::Class_Version(), "/input/FairShip/passive/ShipGeoCave.h", 15,
                  typeid(::ShipGeoCave), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipGeoCave::Dictionary, isa_proxy, 0,
                  sizeof(::ShipGeoCave) );
      instance.SetNew(&new_ShipGeoCave);
      instance.SetNewArray(&newArray_ShipGeoCave);
      instance.SetDelete(&delete_ShipGeoCave);
      instance.SetDeleteArray(&deleteArray_ShipGeoCave);
      instance.SetDestructor(&destruct_ShipGeoCave);
      instance.SetStreamerFunc(&streamer_ShipGeoCave);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipGeoCave*)
   {
      return GenerateInitInstanceLocal((::ShipGeoCave*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipGeoCave*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipMagnet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipMagnet(void *p = 0);
   static void *newArray_ShipMagnet(Long_t size, void *p);
   static void delete_ShipMagnet(void *p);
   static void deleteArray_ShipMagnet(void *p);
   static void destruct_ShipMagnet(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipMagnet*)
   {
      ::ShipMagnet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipMagnet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipMagnet", ::ShipMagnet::Class_Version(), "/input/FairShip/passive/ShipMagnet.h", 12,
                  typeid(::ShipMagnet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipMagnet::Dictionary, isa_proxy, 4,
                  sizeof(::ShipMagnet) );
      instance.SetNew(&new_ShipMagnet);
      instance.SetNewArray(&newArray_ShipMagnet);
      instance.SetDelete(&delete_ShipMagnet);
      instance.SetDeleteArray(&deleteArray_ShipMagnet);
      instance.SetDestructor(&destruct_ShipMagnet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipMagnet*)
   {
      return GenerateInitInstanceLocal((::ShipMagnet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipMagnet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipChamber_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipChamber(void *p = 0);
   static void *newArray_ShipChamber(Long_t size, void *p);
   static void delete_ShipChamber(void *p);
   static void deleteArray_ShipChamber(void *p);
   static void destruct_ShipChamber(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipChamber*)
   {
      ::ShipChamber *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipChamber >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipChamber", ::ShipChamber::Class_Version(), "/input/FairShip/passive/ShipChamber.h", 11,
                  typeid(::ShipChamber), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipChamber::Dictionary, isa_proxy, 4,
                  sizeof(::ShipChamber) );
      instance.SetNew(&new_ShipChamber);
      instance.SetNewArray(&newArray_ShipChamber);
      instance.SetDelete(&delete_ShipChamber);
      instance.SetDeleteArray(&deleteArray_ShipChamber);
      instance.SetDestructor(&destruct_ShipChamber);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipChamber*)
   {
      return GenerateInitInstanceLocal((::ShipChamber*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipChamber*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipTargetStation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipTargetStation(void *p = 0);
   static void *newArray_ShipTargetStation(Long_t size, void *p);
   static void delete_ShipTargetStation(void *p);
   static void deleteArray_ShipTargetStation(void *p);
   static void destruct_ShipTargetStation(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipTargetStation*)
   {
      ::ShipTargetStation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipTargetStation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipTargetStation", ::ShipTargetStation::Class_Version(), "/input/FairShip/passive/ShipTargetStation.h", 9,
                  typeid(::ShipTargetStation), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipTargetStation::Dictionary, isa_proxy, 4,
                  sizeof(::ShipTargetStation) );
      instance.SetNew(&new_ShipTargetStation);
      instance.SetNewArray(&newArray_ShipTargetStation);
      instance.SetDelete(&delete_ShipTargetStation);
      instance.SetDeleteArray(&deleteArray_ShipTargetStation);
      instance.SetDestructor(&destruct_ShipTargetStation);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipTargetStation*)
   {
      return GenerateInitInstanceLocal((::ShipTargetStation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipTargetStation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipMuonShield_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipMuonShield(void *p = 0);
   static void *newArray_ShipMuonShield(Long_t size, void *p);
   static void delete_ShipMuonShield(void *p);
   static void deleteArray_ShipMuonShield(void *p);
   static void destruct_ShipMuonShield(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipMuonShield*)
   {
      ::ShipMuonShield *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipMuonShield >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipMuonShield", ::ShipMuonShield::Class_Version(), "/input/FairShip/passive/ShipMuonShield.h", 16,
                  typeid(::ShipMuonShield), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipMuonShield::Dictionary, isa_proxy, 4,
                  sizeof(::ShipMuonShield) );
      instance.SetNew(&new_ShipMuonShield);
      instance.SetNewArray(&newArray_ShipMuonShield);
      instance.SetDelete(&delete_ShipMuonShield);
      instance.SetDeleteArray(&deleteArray_ShipMuonShield);
      instance.SetDestructor(&destruct_ShipMuonShield);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipMuonShield*)
   {
      return GenerateInitInstanceLocal((::ShipMuonShield*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipMuonShield*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipPassiveContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipPassiveContFact(void *p = 0);
   static void *newArray_ShipPassiveContFact(Long_t size, void *p);
   static void delete_ShipPassiveContFact(void *p);
   static void deleteArray_ShipPassiveContFact(void *p);
   static void destruct_ShipPassiveContFact(void *p);
   static void streamer_ShipPassiveContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipPassiveContFact*)
   {
      ::ShipPassiveContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipPassiveContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipPassiveContFact", ::ShipPassiveContFact::Class_Version(), "/input/FairShip/passive/ShipPassiveContFact.h", 11,
                  typeid(::ShipPassiveContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipPassiveContFact::Dictionary, isa_proxy, 0,
                  sizeof(::ShipPassiveContFact) );
      instance.SetNew(&new_ShipPassiveContFact);
      instance.SetNewArray(&newArray_ShipPassiveContFact);
      instance.SetDelete(&delete_ShipPassiveContFact);
      instance.SetDeleteArray(&deleteArray_ShipPassiveContFact);
      instance.SetDestructor(&destruct_ShipPassiveContFact);
      instance.SetStreamerFunc(&streamer_ShipPassiveContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipPassiveContFact*)
   {
      return GenerateInitInstanceLocal((::ShipPassiveContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipPassiveContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipTAUMagneticSpectrometer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipTAUMagneticSpectrometer(void *p = 0);
   static void *newArray_ShipTAUMagneticSpectrometer(Long_t size, void *p);
   static void delete_ShipTAUMagneticSpectrometer(void *p);
   static void deleteArray_ShipTAUMagneticSpectrometer(void *p);
   static void destruct_ShipTAUMagneticSpectrometer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipTAUMagneticSpectrometer*)
   {
      ::ShipTAUMagneticSpectrometer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipTAUMagneticSpectrometer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipTAUMagneticSpectrometer", ::ShipTAUMagneticSpectrometer::Class_Version(), "/input/FairShip/passive/ShipTAUMagneticSpectrometer.h", 11,
                  typeid(::ShipTAUMagneticSpectrometer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipTAUMagneticSpectrometer::Dictionary, isa_proxy, 4,
                  sizeof(::ShipTAUMagneticSpectrometer) );
      instance.SetNew(&new_ShipTAUMagneticSpectrometer);
      instance.SetNewArray(&newArray_ShipTAUMagneticSpectrometer);
      instance.SetDelete(&delete_ShipTAUMagneticSpectrometer);
      instance.SetDeleteArray(&deleteArray_ShipTAUMagneticSpectrometer);
      instance.SetDestructor(&destruct_ShipTAUMagneticSpectrometer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipTAUMagneticSpectrometer*)
   {
      return GenerateInitInstanceLocal((::ShipTAUMagneticSpectrometer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipTAUMagneticSpectrometer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ShipGoliath_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ShipGoliath(void *p = 0);
   static void *newArray_ShipGoliath(Long_t size, void *p);
   static void delete_ShipGoliath(void *p);
   static void deleteArray_ShipGoliath(void *p);
   static void destruct_ShipGoliath(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ShipGoliath*)
   {
      ::ShipGoliath *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ShipGoliath >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ShipGoliath", ::ShipGoliath::Class_Version(), "/input/FairShip/passive/ShipGoliath.h", 11,
                  typeid(::ShipGoliath), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ShipGoliath::Dictionary, isa_proxy, 4,
                  sizeof(::ShipGoliath) );
      instance.SetNew(&new_ShipGoliath);
      instance.SetNewArray(&newArray_ShipGoliath);
      instance.SetDelete(&delete_ShipGoliath);
      instance.SetDeleteArray(&deleteArray_ShipGoliath);
      instance.SetDestructor(&destruct_ShipGoliath);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ShipGoliath*)
   {
      return GenerateInitInstanceLocal((::ShipGoliath*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ShipGoliath*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr ShipCave::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipCave::Class_Name()
{
   return "ShipCave";
}

//______________________________________________________________________________
const char *ShipCave::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipCave*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipCave::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipCave*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipCave::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipCave*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipCave::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipCave*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipGeoCave::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipGeoCave::Class_Name()
{
   return "ShipGeoCave";
}

//______________________________________________________________________________
const char *ShipGeoCave::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGeoCave*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipGeoCave::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGeoCave*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipGeoCave::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGeoCave*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipGeoCave::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGeoCave*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipMagnet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipMagnet::Class_Name()
{
   return "ShipMagnet";
}

//______________________________________________________________________________
const char *ShipMagnet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMagnet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipMagnet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMagnet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipMagnet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMagnet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipMagnet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMagnet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipChamber::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipChamber::Class_Name()
{
   return "ShipChamber";
}

//______________________________________________________________________________
const char *ShipChamber::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipChamber*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipChamber::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipChamber*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipChamber::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipChamber*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipChamber::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipChamber*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipTargetStation::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipTargetStation::Class_Name()
{
   return "ShipTargetStation";
}

//______________________________________________________________________________
const char *ShipTargetStation::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTargetStation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipTargetStation::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTargetStation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipTargetStation::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTargetStation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipTargetStation::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTargetStation*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipMuonShield::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipMuonShield::Class_Name()
{
   return "ShipMuonShield";
}

//______________________________________________________________________________
const char *ShipMuonShield::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMuonShield*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipMuonShield::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMuonShield*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipMuonShield::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMuonShield*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipMuonShield::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipMuonShield*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipPassiveContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipPassiveContFact::Class_Name()
{
   return "ShipPassiveContFact";
}

//______________________________________________________________________________
const char *ShipPassiveContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipPassiveContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipPassiveContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipPassiveContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipPassiveContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipPassiveContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipPassiveContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipPassiveContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipTAUMagneticSpectrometer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipTAUMagneticSpectrometer::Class_Name()
{
   return "ShipTAUMagneticSpectrometer";
}

//______________________________________________________________________________
const char *ShipTAUMagneticSpectrometer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTAUMagneticSpectrometer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipTAUMagneticSpectrometer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTAUMagneticSpectrometer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipTAUMagneticSpectrometer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTAUMagneticSpectrometer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipTAUMagneticSpectrometer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipTAUMagneticSpectrometer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ShipGoliath::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ShipGoliath::Class_Name()
{
   return "ShipGoliath";
}

//______________________________________________________________________________
const char *ShipGoliath::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGoliath*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ShipGoliath::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGoliath*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ShipGoliath::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGoliath*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ShipGoliath::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ShipGoliath*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void ShipMagnet::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipMagnet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipMagnet::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipMagnet::Class(),this);
   }
}

//______________________________________________________________________________
void ShipMagnet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipMagnet.
      TClass *R__cl = ::ShipMagnet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDesign", &fDesign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSpecMagz", &fSpecMagz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipMagnet(void *p) {
      return  p ? new(p) ::ShipMagnet : new ::ShipMagnet;
   }
   static void *newArray_ShipMagnet(Long_t nElements, void *p) {
      return p ? new(p) ::ShipMagnet[nElements] : new ::ShipMagnet[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipMagnet(void *p) {
      delete ((::ShipMagnet*)p);
   }
   static void deleteArray_ShipMagnet(void *p) {
      delete [] ((::ShipMagnet*)p);
   }
   static void destruct_ShipMagnet(void *p) {
      typedef ::ShipMagnet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipMagnet

//______________________________________________________________________________
void ShipCave::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipCave.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipCave::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipCave::Class(),this);
   }
}

//______________________________________________________________________________
void ShipCave::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipCave.
      TClass *R__cl = ::ShipCave::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "world[3]", world);
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipCave(void *p) {
      return  p ? new(p) ::ShipCave : new ::ShipCave;
   }
   static void *newArray_ShipCave(Long_t nElements, void *p) {
      return p ? new(p) ::ShipCave[nElements] : new ::ShipCave[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipCave(void *p) {
      delete ((::ShipCave*)p);
   }
   static void deleteArray_ShipCave(void *p) {
      delete [] ((::ShipCave*)p);
   }
   static void destruct_ShipCave(void *p) {
      typedef ::ShipCave current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipCave

//______________________________________________________________________________
void ShipChamber::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipChamber.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipChamber::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipChamber::Class(),this);
   }
}

//______________________________________________________________________________
void ShipChamber::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipChamber.
      TClass *R__cl = ::ShipChamber::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipChamber(void *p) {
      return  p ? new(p) ::ShipChamber : new ::ShipChamber;
   }
   static void *newArray_ShipChamber(Long_t nElements, void *p) {
      return p ? new(p) ::ShipChamber[nElements] : new ::ShipChamber[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipChamber(void *p) {
      delete ((::ShipChamber*)p);
   }
   static void deleteArray_ShipChamber(void *p) {
      delete [] ((::ShipChamber*)p);
   }
   static void destruct_ShipChamber(void *p) {
      typedef ::ShipChamber current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipChamber

//______________________________________________________________________________
void ShipTargetStation::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipTargetStation.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipTargetStation::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipTargetStation::Class(),this);
   }
}

//______________________________________________________________________________
void ShipTargetStation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipTargetStation.
      TClass *R__cl = ::ShipTargetStation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetLength", &fTargetLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsorberLength", &fAbsorberLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsorberZ", &fAbsorberZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetZ", &fTargetZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiameter", &fDiameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL", (void*)&fL);
      R__insp.InspectMember("vector<float>", (void*)&fL, "fL.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", (void*)&fM);
      R__insp.InspectMember("vector<std::string>", (void*)&fM, "fM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnS", &fnS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fsl", &fsl);
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipTargetStation(void *p) {
      return  p ? new(p) ::ShipTargetStation : new ::ShipTargetStation;
   }
   static void *newArray_ShipTargetStation(Long_t nElements, void *p) {
      return p ? new(p) ::ShipTargetStation[nElements] : new ::ShipTargetStation[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipTargetStation(void *p) {
      delete ((::ShipTargetStation*)p);
   }
   static void deleteArray_ShipTargetStation(void *p) {
      delete [] ((::ShipTargetStation*)p);
   }
   static void destruct_ShipTargetStation(void *p) {
      typedef ::ShipTargetStation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipTargetStation

//______________________________________________________________________________
void ShipMuonShield::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipMuonShield.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipMuonShield::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipMuonShield::Class(),this);
   }
}

//______________________________________________________________________________
void ShipMuonShield::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipMuonShield.
      TClass *R__cl = ::ShipMuonShield::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDesign", &fDesign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonShieldLength", &fMuonShieldLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fField", &fField);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ0", &dZ0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ1", &dZ1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ2", &dZ2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ3", &dZ3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ4", &dZ4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ5", &dZ5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ6", &dZ6);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ7", &dZ7);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZ8", &dZ8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dXgap", &dXgap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zEndOfAbsorb", &zEndOfAbsorb);
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipMuonShield(void *p) {
      return  p ? new(p) ::ShipMuonShield : new ::ShipMuonShield;
   }
   static void *newArray_ShipMuonShield(Long_t nElements, void *p) {
      return p ? new(p) ::ShipMuonShield[nElements] : new ::ShipMuonShield[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipMuonShield(void *p) {
      delete ((::ShipMuonShield*)p);
   }
   static void deleteArray_ShipMuonShield(void *p) {
      delete [] ((::ShipMuonShield*)p);
   }
   static void destruct_ShipMuonShield(void *p) {
      typedef ::ShipMuonShield current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipMuonShield

//______________________________________________________________________________
void ShipGeoCave::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipGeoCave.

   FairGeoSet::Streamer(R__b);
}

//______________________________________________________________________________
void ShipGeoCave::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipGeoCave.
      TClass *R__cl = ::ShipGeoCave::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", &name);
      R__insp.InspectMember(name, "name.");
      FairGeoSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipGeoCave(void *p) {
      return  p ? new(p) ::ShipGeoCave : new ::ShipGeoCave;
   }
   static void *newArray_ShipGeoCave(Long_t nElements, void *p) {
      return p ? new(p) ::ShipGeoCave[nElements] : new ::ShipGeoCave[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipGeoCave(void *p) {
      delete ((::ShipGeoCave*)p);
   }
   static void deleteArray_ShipGeoCave(void *p) {
      delete [] ((::ShipGeoCave*)p);
   }
   static void destruct_ShipGeoCave(void *p) {
      typedef ::ShipGeoCave current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ShipGeoCave(TBuffer &buf, void *obj) {
      ((::ShipGeoCave*)obj)->::ShipGeoCave::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ShipGeoCave

//______________________________________________________________________________
void ShipPassiveContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipPassiveContFact.

   FairContFact::Streamer(R__b);
}

//______________________________________________________________________________
void ShipPassiveContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipPassiveContFact.
      TClass *R__cl = ::ShipPassiveContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipPassiveContFact(void *p) {
      return  p ? new(p) ::ShipPassiveContFact : new ::ShipPassiveContFact;
   }
   static void *newArray_ShipPassiveContFact(Long_t nElements, void *p) {
      return p ? new(p) ::ShipPassiveContFact[nElements] : new ::ShipPassiveContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipPassiveContFact(void *p) {
      delete ((::ShipPassiveContFact*)p);
   }
   static void deleteArray_ShipPassiveContFact(void *p) {
      delete [] ((::ShipPassiveContFact*)p);
   }
   static void destruct_ShipPassiveContFact(void *p) {
      typedef ::ShipPassiveContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_ShipPassiveContFact(TBuffer &buf, void *obj) {
      ((::ShipPassiveContFact*)obj)->::ShipPassiveContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::ShipPassiveContFact

//______________________________________________________________________________
void ShipTAUMagneticSpectrometer::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipTAUMagneticSpectrometer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipTAUMagneticSpectrometer::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipTAUMagneticSpectrometer::Class(),this);
   }
}

//______________________________________________________________________________
void ShipTAUMagneticSpectrometer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipTAUMagneticSpectrometer.
      TClass *R__cl = ::ShipTAUMagneticSpectrometer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zLastSlab", &zLastSlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IronLenght", &IronLenght);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AirLenght", &AirLenght);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SpectrometerLenght", &SpectrometerLenght);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GapFromVacuum", &GapFromVacuum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DriftGap", &DriftGap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MiddleGap", &MiddleGap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MagneticField", &MagneticField);
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipTAUMagneticSpectrometer(void *p) {
      return  p ? new(p) ::ShipTAUMagneticSpectrometer : new ::ShipTAUMagneticSpectrometer;
   }
   static void *newArray_ShipTAUMagneticSpectrometer(Long_t nElements, void *p) {
      return p ? new(p) ::ShipTAUMagneticSpectrometer[nElements] : new ::ShipTAUMagneticSpectrometer[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipTAUMagneticSpectrometer(void *p) {
      delete ((::ShipTAUMagneticSpectrometer*)p);
   }
   static void deleteArray_ShipTAUMagneticSpectrometer(void *p) {
      delete [] ((::ShipTAUMagneticSpectrometer*)p);
   }
   static void destruct_ShipTAUMagneticSpectrometer(void *p) {
      typedef ::ShipTAUMagneticSpectrometer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipTAUMagneticSpectrometer

//______________________________________________________________________________
void ShipGoliath::Streamer(TBuffer &R__b)
{
   // Stream an object of class ShipGoliath.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ShipGoliath::Class(),this);
   } else {
      R__b.WriteClassBuffer(ShipGoliath::Class(),this);
   }
}

//______________________________________________________________________________
void ShipGoliath::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ShipGoliath.
      TClass *R__cl = ::ShipGoliath::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zCenter", &zCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LongitudinalSize", &LongitudinalSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TransversalSize", &TransversalSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GapFromTSpectro", &GapFromTSpectro);
      FairModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ShipGoliath(void *p) {
      return  p ? new(p) ::ShipGoliath : new ::ShipGoliath;
   }
   static void *newArray_ShipGoliath(Long_t nElements, void *p) {
      return p ? new(p) ::ShipGoliath[nElements] : new ::ShipGoliath[nElements];
   }
   // Wrapper around operator delete
   static void delete_ShipGoliath(void *p) {
      delete ((::ShipGoliath*)p);
   }
   static void deleteArray_ShipGoliath(void *p) {
      delete [] ((::ShipGoliath*)p);
   }
   static void destruct_ShipGoliath(void *p) {
      typedef ::ShipGoliath current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ShipGoliath

namespace ROOTDict {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<float>

namespace ROOTDict {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "prec_stl/vector", 49,
                  typeid(vector<string>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<string>

/********************************************************
* /input/FairShipRun/passive/G__PassiveDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__PassiveDict();

extern "C" void G__set_cpp_environmentG__PassiveDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("ShipCave.h");
  G__add_compiledheader("ShipGeoCave.h");
  G__add_compiledheader("ShipMagnet.h");
  G__add_compiledheader("ShipChamber.h");
  G__add_compiledheader("ShipTargetStation.h");
  G__add_compiledheader("ShipMuonShield.h");
  G__add_compiledheader("ShipPassiveContFact.h");
  G__add_compiledheader("ShipTAUMagneticSpectrometer.h");
  G__add_compiledheader("ShipGoliath.h");
  G__cpp_reset_tagtableG__PassiveDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__PassiveDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ShipCave */
static int G__G__PassiveDict_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipCave* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipCave((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ShipCave((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipCave((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ShipCave((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipCave* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipCave[n];
     } else {
       p = new((void*) gvp) ShipCave[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipCave;
     } else {
       p = new((void*) gvp) ShipCave;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipCave::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipCave::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipCave::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipCave::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipCave*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipCave::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipCave::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipCave::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_237_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipCave::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__PassiveDict_237_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ShipCave* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ShipCave(*(ShipCave*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipCave G__TShipCave;
static int G__G__PassiveDict_237_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipCave*) (soff+(sizeof(ShipCave)*i)))->~G__TShipCave();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipCave*) (soff))->~G__TShipCave();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipGeoCave */
static int G__G__PassiveDict_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipGeoCave* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipGeoCave[n];
     } else {
       p = new((void*) gvp) ShipGeoCave[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipGeoCave;
     } else {
       p = new((void*) gvp) ShipGeoCave;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipGeoCave::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipGeoCave::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipGeoCave::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipGeoCave::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipGeoCave*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipGeoCave::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipGeoCave::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipGeoCave::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipGeoCave::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipGeoCave G__TShipGeoCave;
static int G__G__PassiveDict_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipGeoCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipGeoCave*) (soff+(sizeof(ShipGeoCave)*i)))->~G__TShipGeoCave();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipGeoCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipGeoCave*) (soff))->~G__TShipGeoCave();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipMagnet */
static int G__G__PassiveDict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMagnet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMagnet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) ShipMagnet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMagnet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) ShipMagnet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMagnet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) ShipMagnet(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMagnet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ShipMagnet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMagnet((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ShipMagnet((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMagnet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMagnet[n];
     } else {
       p = new((void*) gvp) ShipMagnet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMagnet;
     } else {
       p = new((void*) gvp) ShipMagnet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipMagnet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMagnet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipMagnet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipMagnet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMagnet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMagnet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipMagnet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMagnet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipMagnet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__PassiveDict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ShipMagnet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ShipMagnet(*(ShipMagnet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipMagnet G__TShipMagnet;
static int G__G__PassiveDict_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipMagnet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipMagnet*) (soff+(sizeof(ShipMagnet)*i)))->~G__TShipMagnet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipMagnet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipMagnet*) (soff))->~G__TShipMagnet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipChamber */
static int G__G__PassiveDict_506_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipChamber* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipChamber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ShipChamber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipChamber((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ShipChamber((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipChamber* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipChamber[n];
     } else {
       p = new((void*) gvp) ShipChamber[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipChamber;
     } else {
       p = new((void*) gvp) ShipChamber;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipChamber::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipChamber::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipChamber::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipChamber::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipChamber*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipChamber::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipChamber::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipChamber::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipChamber::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ShipChamber*) G__getstructoffset())->InitMedium((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__PassiveDict_506_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ShipChamber* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ShipChamber(*(ShipChamber*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipChamber G__TShipChamber;
static int G__G__PassiveDict_506_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipChamber*) (soff+(sizeof(ShipChamber)*i)))->~G__TShipChamber();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipChamber*) (soff))->~G__TShipChamber();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipTargetStation */
static int G__G__PassiveDict_507_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipTargetStation* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTargetStation(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const int) G__int(libp->para[5])
, (const Double_t) G__double(libp->para[6]), (const char*) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) ShipTargetStation(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const int) G__int(libp->para[5])
, (const Double_t) G__double(libp->para[6]), (const char*) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTargetStation(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const int) G__int(libp->para[5])
, (const Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) ShipTargetStation(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const int) G__int(libp->para[5])
, (const Double_t) G__double(libp->para[6]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipTargetStation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTargetStation[n];
     } else {
       p = new((void*) gvp) ShipTargetStation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTargetStation;
     } else {
       p = new((void*) gvp) ShipTargetStation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipTargetStation*) G__getstructoffset())->SetLayerPosMat(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (const char*) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (const char*) G__int(libp->para[6]), (Float_t) G__double(libp->para[7])
, (const char*) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (const char*) G__int(libp->para[10]), (Float_t) G__double(libp->para[11])
, (const char*) G__int(libp->para[12]), (Float_t) G__double(libp->para[13])
, (const char*) G__int(libp->para[14]), (Float_t) G__double(libp->para[15])
, (const char*) G__int(libp->para[16]), (Float_t) G__double(libp->para[17])
, (const char*) G__int(libp->para[18]), (Float_t) G__double(libp->para[19])
, (const char*) G__int(libp->para[20]), (Float_t) G__double(libp->para[21])
, (const char*) G__int(libp->para[22]), (Float_t) G__double(libp->para[23])
, (const char*) G__int(libp->para[24]), (Float_t) G__double(libp->para[25])
, (const char*) G__int(libp->para[26]), (Float_t) G__double(libp->para[27])
, (const char*) G__int(libp->para[28]), (Float_t) G__double(libp->para[29])
, (const char*) G__int(libp->para[30]), (Float_t) G__double(libp->para[31])
, (const char*) G__int(libp->para[32]), (Float_t) G__double(libp->para[33])
, (const char*) G__int(libp->para[34]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipTargetStation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipTargetStation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipTargetStation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipTargetStation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipTargetStation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipTargetStation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipTargetStation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipTargetStation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipTargetStation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__PassiveDict_507_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ShipTargetStation* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ShipTargetStation(*(ShipTargetStation*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipTargetStation G__TShipTargetStation;
static int G__G__PassiveDict_507_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipTargetStation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipTargetStation*) (soff+(sizeof(ShipTargetStation)*i)))->~G__TShipTargetStation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipTargetStation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipTargetStation*) (soff))->~G__TShipTargetStation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipMuonShield */
static int G__G__PassiveDict_522_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMuonShield* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 17:
     //m: 17
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15])
, (Double_t) G__double(libp->para[16]));
     }
     break;
   case 16:
     //m: 16
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), (Double_t) G__double(libp->para[15]));
     }
     break;
   case 15:
     //m: 15
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]));
     }
     break;
   case 14:
     //m: 14
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13]));
     }
     break;
   case 13:
     //m: 13
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]));
     }
     break;
   case 12:
     //m: 12
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11]));
     }
     break;
   case 11:
     //m: 11
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]));
     }
     break;
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) ShipMuonShield(
(const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ShipMuonShield((const char*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ShipMuonShield((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipMuonShield* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield[n];
     } else {
       p = new((void*) gvp) ShipMuonShield[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipMuonShield;
     } else {
       p = new((void*) gvp) ShipMuonShield;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipMuonShield::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMuonShield::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipMuonShield::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipMuonShield::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipMuonShield*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMuonShield::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipMuonShield::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipMuonShield::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_522_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipMuonShield::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__PassiveDict_522_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ShipMuonShield* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ShipMuonShield(*(ShipMuonShield*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipMuonShield G__TShipMuonShield;
static int G__G__PassiveDict_522_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipMuonShield*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipMuonShield*) (soff+(sizeof(ShipMuonShield)*i)))->~G__TShipMuonShield();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipMuonShield*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipMuonShield*) (soff))->~G__TShipMuonShield();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipPassiveContFact */
static int G__G__PassiveDict_528_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipPassiveContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipPassiveContFact[n];
     } else {
       p = new((void*) gvp) ShipPassiveContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipPassiveContFact;
     } else {
       p = new((void*) gvp) ShipPassiveContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipPassiveContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipPassiveContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipPassiveContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipPassiveContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipPassiveContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipPassiveContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipPassiveContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipPassiveContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_528_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipPassiveContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipPassiveContFact G__TShipPassiveContFact;
static int G__G__PassiveDict_528_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipPassiveContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipPassiveContFact*) (soff+(sizeof(ShipPassiveContFact)*i)))->~G__TShipPassiveContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipPassiveContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipPassiveContFact*) (soff))->~G__TShipPassiveContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipTAUMagneticSpectrometer */
static int G__G__PassiveDict_529_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipTAUMagneticSpectrometer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 10:
     //m: 10
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTAUMagneticSpectrometer(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const Double_t) G__double(libp->para[5])
, (const Double_t) G__double(libp->para[6]), (const Double_t) G__double(libp->para[7])
, (const Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9]));
     } else {
       p = new((void*) gvp) ShipTAUMagneticSpectrometer(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const Double_t) G__double(libp->para[5])
, (const Double_t) G__double(libp->para[6]), (const Double_t) G__double(libp->para[7])
, (const Double_t) G__double(libp->para[8]), (const char*) G__int(libp->para[9]));
     }
     break;
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTAUMagneticSpectrometer(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const Double_t) G__double(libp->para[5])
, (const Double_t) G__double(libp->para[6]), (const Double_t) G__double(libp->para[7])
, (const Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) ShipTAUMagneticSpectrometer(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const Double_t) G__double(libp->para[5])
, (const Double_t) G__double(libp->para[6]), (const Double_t) G__double(libp->para[7])
, (const Double_t) G__double(libp->para[8]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipTAUMagneticSpectrometer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTAUMagneticSpectrometer[n];
     } else {
       p = new((void*) gvp) ShipTAUMagneticSpectrometer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipTAUMagneticSpectrometer;
     } else {
       p = new((void*) gvp) ShipTAUMagneticSpectrometer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipTAUMagneticSpectrometer*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipTAUMagneticSpectrometer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipTAUMagneticSpectrometer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipTAUMagneticSpectrometer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipTAUMagneticSpectrometer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipTAUMagneticSpectrometer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipTAUMagneticSpectrometer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipTAUMagneticSpectrometer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipTAUMagneticSpectrometer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_529_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipTAUMagneticSpectrometer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__PassiveDict_529_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ShipTAUMagneticSpectrometer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ShipTAUMagneticSpectrometer(*(ShipTAUMagneticSpectrometer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipTAUMagneticSpectrometer G__TShipTAUMagneticSpectrometer;
static int G__G__PassiveDict_529_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipTAUMagneticSpectrometer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipTAUMagneticSpectrometer*) (soff+(sizeof(ShipTAUMagneticSpectrometer)*i)))->~G__TShipTAUMagneticSpectrometer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipTAUMagneticSpectrometer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipTAUMagneticSpectrometer*) (soff))->~G__TShipTAUMagneticSpectrometer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ShipGoliath */
static int G__G__PassiveDict_530_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipGoliath* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipGoliath(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const char*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) ShipGoliath(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]), (const char*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipGoliath(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) ShipGoliath(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ShipGoliath* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipGoliath[n];
     } else {
       p = new((void*) gvp) ShipGoliath[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ShipGoliath;
     } else {
       p = new((void*) gvp) ShipGoliath;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ShipGoliath::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipGoliath::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ShipGoliath::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ShipGoliath::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ShipGoliath*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipGoliath::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipGoliath::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ShipGoliath::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_530_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ShipGoliath::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__PassiveDict_530_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ShipGoliath* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ShipGoliath(*(ShipGoliath*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ShipGoliath G__TShipGoliath;
static int G__G__PassiveDict_530_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ShipGoliath*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ShipGoliath*) (soff+(sizeof(ShipGoliath)*i)))->~G__TShipGoliath();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ShipGoliath*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ShipGoliath*) (soff))->~G__TShipGoliath();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ShipCave */

/* ShipGeoCave */

/* ShipMagnet */

/* ShipChamber */

/* ShipTargetStation */

/* ShipMuonShield */

/* ShipPassiveContFact */

/* ShipTAUMagneticSpectrometer */

/* ShipGoliath */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__PassiveDict {
 public:
  G__Sizep2memfuncG__PassiveDict(): p(&G__Sizep2memfuncG__PassiveDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__PassiveDict::*p)();
};

size_t G__get_sizep2memfuncG__PassiveDict()
{
  G__Sizep2memfuncG__PassiveDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__PassiveDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave))) {
     ShipCave *G__Lderived;
     G__Lderived=(ShipCave*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave))) {
     ShipGeoCave *G__Lderived;
     G__Lderived=(ShipGeoCave*)0x1000;
     {
       FairGeoSet *G__Lpbase=(FairGeoSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave),G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet))) {
     ShipMagnet *G__Lderived;
     G__Lderived=(ShipMagnet*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber))) {
     ShipChamber *G__Lderived;
     G__Lderived=(ShipChamber*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation))) {
     ShipTargetStation *G__Lderived;
     G__Lderived=(ShipTargetStation*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield))) {
     ShipMuonShield *G__Lderived;
     G__Lderived=(ShipMuonShield*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact))) {
     ShipPassiveContFact *G__Lderived;
     G__Lderived=(ShipPassiveContFact*)0x1000;
     {
       FairContFact *G__Lpbase=(FairContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact),G__get_linked_tagnum(&G__G__PassiveDictLN_FairContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer))) {
     ShipTAUMagneticSpectrometer *G__Lderived;
     G__Lderived=(ShipTAUMagneticSpectrometer*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath))) {
     ShipGoliath *G__Lderived;
     G__Lderived=(ShipGoliath*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__PassiveDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*,less<int> >",117,G__get_linked_tagnum(&G__G__PassiveDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<Double_t> >",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Double_t> >",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ShipCave */
static void G__setup_memvarShipCave(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave));
   { ShipCave *p; p=(ShipCave*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"world[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipGeoCave */
static void G__setup_memvarShipGeoCave(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave));
   { ShipGeoCave *p; p=(ShipGeoCave*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TString),-1,-1,2,"name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipMagnet */
static void G__setup_memvarShipMagnet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet));
   { ShipMagnet *p; p=(ShipMagnet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDesign=",0,"design, 1=circular 5m, 2 = ellipse 5x10");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSpecMagz=",0,"z position");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDy=",0,"y diameter of ellipse");
   }
   G__tag_memvar_reset();
}


   /* ShipChamber */
static void G__setup_memvarShipChamber(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber));
   { ShipChamber *p; p=(ShipChamber*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipTargetStation */
static void G__setup_memvarShipTargetStation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation));
   { ShipTargetStation *p; p=(ShipTargetStation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTargetLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAbsorberLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAbsorberZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTargetZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDiameter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,2,"fL=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"fM=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fnS=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fsl=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipMuonShield */
static void G__setup_memvarShipMuonShield(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield));
   { ShipMuonShield *p; p=(ShipMuonShield*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDesign=",0,"design of muon shield, 1=passive, active = ...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMuonShieldLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fField=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ3=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ4=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ5=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ6=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ7=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZ8=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dXgap=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zEndOfAbsorb=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipPassiveContFact */
static void G__setup_memvarShipPassiveContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact));
   { ShipPassiveContFact *p; p=(ShipPassiveContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipTAUMagneticSpectrometer */
static void G__setup_memvarShipTAUMagneticSpectrometer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer));
   { ShipTAUMagneticSpectrometer *p; p=(ShipTAUMagneticSpectrometer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zLastSlab=",0,"z distance of the center of the last Fe slab of the second spectrometer in cm from the center of the vacuum tube");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"IronLenght=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"AirLenght=",0,"distance between the center of 2 iron slabs");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"SpectrometerLenght=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"GapFromVacuum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"DriftGap=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"MiddleGap=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"MagneticField=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ShipGoliath */
static void G__setup_memvarShipGoliath(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath));
   { ShipGoliath *p; p=(ShipGoliath*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"LongitudinalSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"TransversalSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"GapFromTSpectro=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__PassiveDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncShipCave(void) {
   /* ShipCave */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave));
   G__memfunc_setup("ShipCave",787,G__G__PassiveDict_237_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"Exp Cave\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipCave",787,G__G__PassiveDict_237_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_237_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipCave::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_237_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipCave::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_237_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipCave::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_237_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipCave::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_237_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_237_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipCave::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_237_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipCave::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_237_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipCave::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_237_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipCave::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ShipCave", 787, G__G__PassiveDict_237_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__PassiveDictLN_ShipCave), -1, 0, 1, 1, 1, 0, "u 'ShipCave' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipCave", 913, G__G__PassiveDict_237_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipGeoCave(void) {
   /* ShipGeoCave */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave));
   G__memfunc_setup("ShipGeoCave",1070,G__G__PassiveDict_239_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGeoCave), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addRefNodes",1087,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_239_0_7, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipGeoCave::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_239_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipGeoCave::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_239_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipGeoCave::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_239_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipGeoCave::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_239_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_239_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipGeoCave::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_239_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipGeoCave::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_239_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipGeoCave::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_239_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipGeoCave::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ShipGeoCave", 1196, G__G__PassiveDict_239_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipMagnet(void) {
   /* ShipMagnet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet));
   G__memfunc_setup("ShipMagnet",1008,G__G__PassiveDict_505_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"SHiP Magnet\"' Title "
"d - 'Double_t' 0 '2018.' z i - 'Int_t' 0 '2' c "
"d - 'Double_t' 0 '5' dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipMagnet",1008,G__G__PassiveDict_505_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_505_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipMagnet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_505_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMagnet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_505_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipMagnet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_505_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipMagnet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_505_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_505_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMagnet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_505_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipMagnet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_505_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMagnet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_505_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipMagnet::DeclFileLine) ), 0);
   G__memfunc_setup("InitMedium",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ShipMagnet", 1008, G__G__PassiveDict_505_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMagnet), -1, 0, 1, 1, 1, 0, "u 'ShipMagnet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipMagnet", 1134, G__G__PassiveDict_505_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipChamber(void) {
   /* ShipChamber */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber));
   G__memfunc_setup("ShipChamber",1094,G__G__PassiveDict_506_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"ShipChamber\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipChamber",1094,G__G__PassiveDict_506_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_506_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipChamber::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_506_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipChamber::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_506_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipChamber::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_506_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipChamber::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_506_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_506_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipChamber::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_506_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipChamber::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_506_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipChamber::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_506_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipChamber::DeclFileLine) ), 0);
   G__memfunc_setup("InitMedium",1013,G__G__PassiveDict_506_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ShipChamber", 1094, G__G__PassiveDict_506_0_17, (int) ('i'), G__get_linked_tagnum(&G__G__PassiveDictLN_ShipChamber), -1, 0, 1, 1, 1, 0, "u 'ShipChamber' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipChamber", 1220, G__G__PassiveDict_506_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipTargetStation(void) {
   /* ShipTargetStation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation));
   G__memfunc_setup("ShipTargetStation",1757,G__G__PassiveDict_507_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation), -1, 0, 8, 1, 1, 0, 
"C - - 10 - name d - 'Double_t' 10 - tl "
"d - 'Double_t' 10 - al d - 'Double_t' 10 - tz "
"d - 'Double_t' 10 - az i - - 10 - nS "
"d - 'Double_t' 10 - sl C - - 10 '\"ShipTargetStation\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipTargetStation",1757,G__G__PassiveDict_507_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLayerPosMat",1405,G__G__PassiveDict_507_0_4, 121, -1, -1, 0, 35, 1, 1, 0, 
"f - 'Float_t' 0 - d f - 'Float_t' 0 - l1 "
"C - - 10 - m1 f - 'Float_t' 0 - l2 "
"C - - 10 - m2 f - 'Float_t' 0 - l3 "
"C - - 10 - m3 f - 'Float_t' 0 - l4 "
"C - - 10 - m4 f - 'Float_t' 0 - l5 "
"C - - 10 - m5 f - 'Float_t' 0 - l6 "
"C - - 10 - m6 f - 'Float_t' 0 - l7 "
"C - - 10 - m7 f - 'Float_t' 0 - l8 "
"C - - 10 - m8 f - 'Float_t' 0 - l9 "
"C - - 10 - m9 f - 'Float_t' 0 - l10 "
"C - - 10 - m10 f - 'Float_t' 0 - l11 "
"C - - 10 - m11 f - 'Float_t' 0 - l12 "
"C - - 10 - m12 f - 'Float_t' 0 - l13 "
"C - - 10 - m13 f - 'Float_t' 0 - l14 "
"C - - 10 - m14 f - 'Float_t' 0 - l15 "
"C - - 10 - m15 f - 'Float_t' 0 - l16 "
"C - - 10 - m16 f - 'Float_t' 0 - l17 "
"C - - 10 - m17", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__PassiveDict_507_0_5, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipTargetStation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_507_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipTargetStation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_507_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipTargetStation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_507_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipTargetStation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_507_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_507_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipTargetStation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_507_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipTargetStation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_507_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipTargetStation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_507_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipTargetStation::DeclFileLine) ), 0);
   G__memfunc_setup("InitMedium",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ShipTargetStation", 1757, G__G__PassiveDict_507_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTargetStation), -1, 0, 1, 1, 1, 0, "u 'ShipTargetStation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipTargetStation", 1883, G__G__PassiveDict_507_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipMuonShield(void) {
   /* ShipMuonShield */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield));
   G__memfunc_setup("ShipMuonShield",1420,G__G__PassiveDict_522_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield), -1, 0, 17, 1, 1, 0, 
"C - - 10 - name i - 'Int_t' 10 '1' Design "
"C - - 10 '\"ShipMuonShield\"' Title d - 'Double_t' 0 '0' Z "
"d - 'Double_t' 0 '0' L0 d - 'Double_t' 0 '0' L1 "
"d - 'Double_t' 0 '0' L2 d - 'Double_t' 0 '0' L3 "
"d - 'Double_t' 0 '0' L4 d - 'Double_t' 0 '0' L5 "
"d - 'Double_t' 0 '0' L6 d - 'Double_t' 0 '0' L7 "
"d - 'Double_t' 0 '0' L8 d - 'Double_t' 0 '0' gap "
"d - 'Double_t' 0 '0' LE d - 'Double_t' 0 '400' y "
"d - 'Double_t' 0 '1.8' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipMuonShield",1420,G__G__PassiveDict_522_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_522_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipMuonShield::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_522_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMuonShield::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_522_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipMuonShield::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_522_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipMuonShield::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_522_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_522_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMuonShield::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_522_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipMuonShield::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_522_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipMuonShield::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_522_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipMuonShield::DeclFileLine) ), 0);
   G__memfunc_setup("InitMedium",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateBox",893,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 12, 1, 2, 0, 
"C - - 10 - boxName U 'TGeoMedium' - 0 - medium "
"d - 'Double_t' 0 - dX d - 'Double_t' 0 - dY "
"d - 'Double_t' 0 - dZ i - 'Int_t' 0 - color "
"U 'TGeoUniformMagField' - 0 - magField U 'TGeoVolume' - 0 - top "
"i - 'Int_t' 0 - numberOfItems d - 'Double_t' 0 - x_translation "
"d - 'Double_t' 0 - y_translation d - 'Double_t' 0 - z_translation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateArb8",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 11, 1, 2, 0, 
"C - - 10 - arbName U 'TGeoMedium' - 0 - medium "
"d - 'Double_t' 0 - dZ D - 'Double_t' 0 - corners "
"i - 'Int_t' 0 - color U 'TGeoUniformMagField' - 0 - magField "
"U 'TGeoVolume' - 0 - top i - 'Int_t' 0 - numberOfItems "
"d - 'Double_t' 0 - x_translation d - 'Double_t' 0 - y_translation "
"d - 'Double_t' 0 - z_translation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateArb8",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 11, 1, 2, 0, 
"C - - 10 - arbName U 'TGeoMedium' - 0 - medium "
"d - 'Double_t' 0 - dZ u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 - corners "
"i - 'Int_t' 0 - color U 'TGeoUniformMagField' - 0 - magField "
"U 'TGeoVolume' - 0 - top i - 'Int_t' 0 - numberOfItems "
"d - 'Double_t' 0 - x_translation d - 'Double_t' 0 - y_translation "
"d - 'Double_t' 0 - z_translation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateTube",996,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 11, 1, 2, 0, 
"C - - 10 - tubeName U 'TGeoMedium' - 0 - medium "
"d - 'Double_t' 0 - dX d - 'Double_t' 0 - dY "
"d - 'Double_t' 0 - dZ i - 'Int_t' 0 - color "
"U 'TGeoVolume' - 0 - top i - 'Int_t' 0 - numberOfItems "
"d - 'Double_t' 0 - x_translation d - 'Double_t' 0 - y_translation "
"d - 'Double_t' 0 - z_translation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 13, 1, 2, 0, 
"d - 'Double_t' 1 - dX1 u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' 'vector<std::vector<Double_t> >' 1 - corners "
"d - 'Double_t' 1 - Z1 d - 'Double_t' 1 - X2 "
"d - 'Double_t' 1 - dXH1 d - 'Double_t' 1 - Z2 "
"d - 'Double_t' 1 - Z3 d - 'Double_t' 1 - Z4 "
"d - 'Double_t' 1 - Z6 d - 'Double_t' 1 - Z7 "
"d - 'Double_t' 1 - Z8 d - 'Double_t' 1 - ZGmid "
"d - 'Double_t' 1 - dY", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ShipMuonShield", 1420, G__G__PassiveDict_522_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__PassiveDictLN_ShipMuonShield), -1, 0, 1, 1, 1, 0, "u 'ShipMuonShield' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipMuonShield", 1546, G__G__PassiveDict_522_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipPassiveContFact(void) {
   /* ShipPassiveContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipPassiveContFact",1921,G__G__PassiveDict_528_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipPassiveContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_FairParSet), -1, 0, 1, 1, 1, 0, "U 'FairContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_528_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipPassiveContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_528_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipPassiveContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_528_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipPassiveContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_528_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipPassiveContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_528_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_528_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipPassiveContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_528_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipPassiveContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_528_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipPassiveContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_528_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipPassiveContFact::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ShipPassiveContFact", 2047, G__G__PassiveDict_528_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipTAUMagneticSpectrometer(void) {
   /* ShipTAUMagneticSpectrometer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer));
   G__memfunc_setup("ShipTAUMagneticSpectrometer",2723,G__G__PassiveDict_529_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer), -1, 0, 10, 1, 1, 0, 
"C - - 10 - name d - 'Double_t' 10 - zLS "
"d - 'Double_t' 10 - FeL d - 'Double_t' 10 - AirL "
"d - 'Double_t' 10 - SpectroL d - 'Double_t' 10 - GapV "
"d - 'Double_t' 10 - DGap d - 'Double_t' 10 - MGap "
"d - 'Double_t' 10 - mf C - - 10 '\"ShipTAUMagneticSpectrometer\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipTAUMagneticSpectrometer",2723,G__G__PassiveDict_529_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,G__G__PassiveDict_529_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__PassiveDict_529_0_5, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipTAUMagneticSpectrometer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_529_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipTAUMagneticSpectrometer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_529_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipTAUMagneticSpectrometer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_529_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipTAUMagneticSpectrometer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_529_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_529_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipTAUMagneticSpectrometer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_529_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipTAUMagneticSpectrometer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_529_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipTAUMagneticSpectrometer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_529_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipTAUMagneticSpectrometer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ShipTAUMagneticSpectrometer", 2723, G__G__PassiveDict_529_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer), -1, 0, 1, 1, 1, 0, "u 'ShipTAUMagneticSpectrometer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipTAUMagneticSpectrometer", 2849, G__G__PassiveDict_529_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncShipGoliath(void) {
   /* ShipGoliath */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath));
   G__memfunc_setup("ShipGoliath",1116,G__G__PassiveDict_530_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name d - 'Double_t' 10 - zC "
"d - 'Double_t' 10 - LS d - 'Double_t' 10 - TS "
"d - 'Double_t' 10 - GapTS C - - 10 '\"Goliath\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShipGoliath",1116,G__G__PassiveDict_530_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_530_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ShipGoliath::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_530_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipGoliath::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_530_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ShipGoliath::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_530_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ShipGoliath::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_530_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_530_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipGoliath::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_530_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipGoliath::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_530_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ShipGoliath::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_530_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ShipGoliath::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ShipGoliath", 1116, G__G__PassiveDict_530_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__PassiveDictLN_ShipGoliath), -1, 0, 1, 1, 1, 0, "u 'ShipGoliath' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ShipGoliath", 1242, G__G__PassiveDict_530_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__PassiveDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__PassiveDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__PassiveDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__PassiveDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoSet = { "FairGeoSet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoMedia = { "FairGeoMedia" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairContFact = { "FairContFact" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairParSet = { "FairParSet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TGeoMedium = { "TGeoMedium" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairModule = { "FairModule" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipCave = { "ShipCave" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipGeoCave = { "ShipGeoCave" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR = { "map<int,TGeoElementRN*,less<int>,allocator<pair<const int,TGeoElementRN*> > >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipMagnet = { "ShipMagnet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipChamber = { "ShipChamber" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipTargetStation = { "ShipTargetStation" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TGeoUniformMagField = { "TGeoUniformMagField" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipMuonShield = { "ShipMuonShield" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairContainer = { "FairContainer" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipPassiveContFact = { "ShipPassiveContFact" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipTAUMagneticSpectrometer = { "ShipTAUMagneticSpectrometer" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_ShipGoliath = { "ShipGoliath" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__PassiveDict() {
  G__G__PassiveDictLN_TClass.tagnum = -1 ;
  G__G__PassiveDictLN_TBuffer.tagnum = -1 ;
  G__G__PassiveDictLN_TMemberInspector.tagnum = -1 ;
  G__G__PassiveDictLN_TObject.tagnum = -1 ;
  G__G__PassiveDictLN_TNamed.tagnum = -1 ;
  G__G__PassiveDictLN_TString.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoSet.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoMedia.tagnum = -1 ;
  G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__PassiveDictLN_TGeoVolume.tagnum = -1 ;
  G__G__PassiveDictLN_FairContFact.tagnum = -1 ;
  G__G__PassiveDictLN_FairParSet.tagnum = -1 ;
  G__G__PassiveDictLN_TGeoMedium.tagnum = -1 ;
  G__G__PassiveDictLN_FairModule.tagnum = -1 ;
  G__G__PassiveDictLN_ShipCave.tagnum = -1 ;
  G__G__PassiveDictLN_ShipGeoCave.tagnum = -1 ;
  G__G__PassiveDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_ShipMagnet.tagnum = -1 ;
  G__G__PassiveDictLN_ShipChamber.tagnum = -1 ;
  G__G__PassiveDictLN_ShipTargetStation.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__PassiveDictLN_TGeoUniformMagField.tagnum = -1 ;
  G__G__PassiveDictLN_ShipMuonShield.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__PassiveDictLN_FairContainer.tagnum = -1 ;
  G__G__PassiveDictLN_ShipPassiveContFact.tagnum = -1 ;
  G__G__PassiveDictLN_ShipTAUMagneticSpectrometer.tagnum = -1 ;
  G__G__PassiveDictLN_ShipGoliath.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__PassiveDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoSet);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoMedia);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairContFact);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairParSet);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TGeoMedium);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipCave),sizeof(ShipCave),-1,324864,"PNDCaveSD",G__setup_memvarShipCave,G__setup_memfuncShipCave);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipGeoCave),sizeof(ShipGeoCave),-1,62720,"Class for the geometry of CAVE",G__setup_memvarShipGeoCave,G__setup_memfuncShipGeoCave);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipMagnet),sizeof(ShipMagnet),-1,324864,(char*)NULL,G__setup_memvarShipMagnet,G__setup_memfuncShipMagnet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipChamber),sizeof(ShipChamber),-1,324864,(char*)NULL,G__setup_memvarShipChamber,G__setup_memfuncShipChamber);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipTargetStation),sizeof(ShipTargetStation),-1,324864,(char*)NULL,G__setup_memvarShipTargetStation,G__setup_memfuncShipTargetStation);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TGeoUniformMagField);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipMuonShield),sizeof(ShipMuonShield),-1,324864,(char*)NULL,G__setup_memvarShipMuonShield,G__setup_memfuncShipMuonShield);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipPassiveContFact),sizeof(ShipPassiveContFact),-1,62720,"Factory for all Passive parameter containers",G__setup_memvarShipPassiveContFact,G__setup_memfuncShipPassiveContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipTAUMagneticSpectrometer),sizeof(ShipTAUMagneticSpectrometer),-1,324864,(char*)NULL,G__setup_memvarShipTAUMagneticSpectrometer,G__setup_memfuncShipTAUMagneticSpectrometer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_ShipGoliath),sizeof(ShipGoliath),-1,324864,(char*)NULL,G__setup_memvarShipGoliath,G__setup_memfuncShipGoliath);
}
extern "C" void G__cpp_setupG__PassiveDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__PassiveDict()");
  G__set_cpp_environmentG__PassiveDict();
  G__cpp_setup_tagtableG__PassiveDict();

  G__cpp_setup_inheritanceG__PassiveDict();

  G__cpp_setup_typetableG__PassiveDict();

  G__cpp_setup_memvarG__PassiveDict();

  G__cpp_setup_memfuncG__PassiveDict();
  G__cpp_setup_globalG__PassiveDict();
  G__cpp_setup_funcG__PassiveDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__PassiveDict();
  return;
}
class G__cpp_setup_initG__PassiveDict {
  public:
    G__cpp_setup_initG__PassiveDict() { G__add_setup_func("G__PassiveDict",(G__incsetup)(&G__cpp_setupG__PassiveDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__PassiveDict() { G__remove_setup_func("G__PassiveDict"); }
};
G__cpp_setup_initG__PassiveDict G__cpp_setup_initializerG__PassiveDict;

